{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to wnc's note!","text":"<p> \u7ad9\u70b9\u7edf\u8ba1</p> <p>\u9875\u9762\u603b\u6570\uff1a{{pages}} \u603b\u5b57\u6570\uff1a{{words}} \u4ee3\u7801\u5757\u884c\u6570\uff1a{{codes}} \u7f51\u7ad9\u8fd0\u884c\u65f6\u95f4\uff1a</p> <p>updated:</p> <ul> <li>\u6570\u5b66\u7ecf\u9a8c\u5206\u4eab\u5df2\u66f4\u65b0 240823</li> <li>\u82f1\u8bed\u7ecf\u9a8c\u5206\u4eab\u5df2\u66f4\u65b0 240819</li> <li>\u4e00\u4e9b\u8d44\u6e90\u5df2\u66f4\u65b0 240818</li> <li>\u7269\u7406\u7ecf\u9a8c\u5206\u4eab\u5df2\u66f4\u65b0 240817</li> <li>\u6280\u672f\u7ecf\u9a8c\u5206\u4eab\u5df2\u66f4\u65b0 240817</li> </ul>"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/","title":"Dive into Deep Learning","text":""},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#1","title":"1 \u5f15\u8a00","text":""},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#2","title":"2 \u9884\u5907\u77e5\u8bc6","text":""},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#21","title":"2.1 \u6570\u636e\u64cd\u4f5c","text":"<ul> <li>tensor</li> <li>ndarray (MXNet)</li> <li>Tensor (TensorFlow)</li> </ul> <pre><code>x = torch.arrange(12)\nx.shape\nx.numel()\nx.reshape(3, 4)\ntorch.zeros((2, 3, 4))\ntorch.ones((2, 3, 4))\ntorch.randn(3, 4)\n</code></pre> <ul> <li>elementwise\uff1a<ul> <li>+</li> <li>-</li> <li>-</li> <li>/</li> <li>exp ()</li> <li>==</li> </ul> </li> <li>concatenate</li> </ul> <pre><code>torch.cat((X, Y), dim = 0) # \u7ad6\u7740\u52a0\ntorch.cat((X, Y), dim = 1) # \u6a2a\u7740\u52a0\nx.sum()\n</code></pre> <ul> <li>broadcasting mechanism<ul> <li>\u590d\u5236\u62d3\u5c55\u5230\u5f62\u72b6\u4e00\u81f4\u540e\u76f8\u52a0</li> </ul> </li> <li>\u7d22\u5f15+\u5207\u7247</li> <li>\u5207\u7247\u4fdd\u6301\u5730\u5740\u4e0d\u53d8\uff1a\u8282\u7701\u5185\u5b58</li> <li>ndarry &lt;-&gt; Tensor</li> <li>item ()</li> </ul>"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#22","title":"2.2 \u6570\u636e\u9884\u5904\u7406","text":"<p>pandas</p> <ul> <li>read_csv ()</li> <li>NaN<ul> <li>fillna (inputs.mean ())</li> <li>np.array (inputs. to_numpy (dtype = float))</li> </ul> </li> </ul>"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#23","title":"2.3 \u7ebf\u6027\u4ee3\u6570","text":"<ul> <li>scalar</li> <li>variable</li> <li>space</li> <li>element / component</li> <li>dimension <ul> <li>len ()</li> <li>shape</li> </ul> </li> <li>square matrix</li> <li>transpose<ul> <li>A.T</li> </ul> </li> <li>symmetric matrix<ul> <li>A == A.T</li> </ul> </li> <li>channel</li> <li>Hadamard product</li> </ul> \\[ \\begin{split}\\mathbf{A} \\odot \\mathbf{B} = \\begin{bmatrix} a_{11}  b_{11} &amp; a_{12}  b_{12} &amp; \\dots  &amp; a_{1n}  b_{1n} \\\\ a_{21}  b_{21} &amp; a_{22}  b_{22} &amp; \\dots  &amp; a_{2n}  b_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m1}  b_{m1} &amp; a_{m2}  b_{m2} &amp; \\dots  &amp; a_{mn}  b_{mn} \\end{bmatrix}.\\end{split} \\] <ul> <li>A.sum (axis = 0) # \u7ad6\u7740\u6c42\u548c</li> <li>A.sum (axis = [0, 1]) = A.sum ()</li> <li>A.mean () = A.sum () / A.size ()</li> <li>A.cumsum (axis = 0)</li> <li>dot product<ul> <li>torch.dot (x, y) = torch.sum (x * y)</li> <li>weighted average</li> </ul> </li> <li>matrix-vector product<ul> <li>torch.mv (A, x)</li> </ul> </li> <li>matrix-matric multiplication<ul> <li>torch.mm (A, B)</li> </ul> </li> <li>norm<ol> <li>\\(f(\\alpha \\mathbf{x}) = |\\alpha| f(\\mathbf{x}).\\)</li> <li>\\((\\mathbf{x} + \\mathbf{y}) \\leq f(\\mathbf{x}) + f(\\mathbf{y}).\\)</li> <li>\\(f(\\mathbf{x}) \\geq 0.\\)</li> </ol> </li> </ul>"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#24","title":"2.4 \u5fae\u79ef\u5206","text":""},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#241","title":"2.4.1 \u5bfc\u6570\u548c\u5fae\u5206","text":""},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#242","title":"2.4.2 \u504f\u5bfc\u6570","text":""},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#243","title":"2.4.3 \u68af\u5ea6","text":"\\[ \\nabla_{\\mathbf{x}} f(\\mathbf{x}) = \\bigg[\\frac{\\partial f(\\mathbf{x})}{\\partial x_1}, \\frac{\\partial f(\\mathbf{x})}{\\partial x_2}, \\ldots, \\frac{\\partial f(\\mathbf{x})}{\\partial x_n}\\bigg]^\\top, \\] \\[ \\nabla_{\\mathbf{x}} \\mathbf{A} \\mathbf{x} = \\mathbf{A}^\\top \\] \\[ \\nabla_{\\mathbf{x}} \\mathbf{x}^\\top \\mathbf{A} = \\mathbf{A} \\] \\[ \\nabla_{\\mathbf{x}} \\mathbf{x}^\\top \\mathbf{A} \\mathbf{x} = (\\mathbf{A} + \\mathbf{A}^\\top)\\mathbf{x} \\] \\[ \\nabla_{\\mathbf{x}} \\|\\mathbf{x} \\|^2 = \\nabla_{\\mathbf{x}} \\mathbf{x}^\\top \\mathbf{x} = 2\\mathbf{x} \\] \\[ \\nabla_{\\mathbf{X}} \\|\\mathbf{X} \\|_F^2 = 2\\mathbf{X} \\]"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#244","title":"2.4.4 \u94fe\u5f0f\u6cd5\u5219","text":""},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#245","title":"2.4.5 \u5c0f\u7ed3","text":""},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#25-automatic-differentiation","title":"2.5 \u81ea\u52a8\u5fae\u5206\uff08automatic differentiation\uff09","text":"<ul> <li>computational graph</li> <li>backpropagate</li> </ul> <pre><code>x.requires_grad_(True)  # \u7b49\u4ef7\u4e8ex=torch.arange(4.0,requires_grad=True)\nx.grad  # \u9ed8\u8ba4\u503c\u662fNone\ny = 2 * torch.dot(x, x)\ny.backward()\nx.grad\nx.grad == 4 * x\n</code></pre>"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#251","title":"2.5.1 \u975e\u6807\u91cf\u53d8\u91cf\u7684\u53cd\u5411\u4f20\u64ad","text":"<pre><code># \u5bf9\u975e\u6807\u91cf\u8c03\u7528backward\u9700\u8981\u4f20\u5165\u4e00\u4e2agradient\u53c2\u6570\uff0c\u8be5\u53c2\u6570\u6307\u5b9a\u5fae\u5206\u51fd\u6570\u5173\u4e8eself\u7684\u68af\u5ea6\u3002\n# \u672c\u4f8b\u53ea\u60f3\u6c42\u504f\u5bfc\u6570\u7684\u548c\uff0c\u6240\u4ee5\u4f20\u9012\u4e00\u4e2a1\u7684\u68af\u5ea6\u662f\u5408\u9002\u7684\nx.grad.zero_()\ny = x * x\n# \u7b49\u4ef7\u4e8ey.backward(torch.ones(len(x)))\ny.sum().backward()\nx.grad\n</code></pre>"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#252","title":"2.5.2 \u5206\u79bb\u8ba1\u7b97","text":"<pre><code>x.grad.zero_()\ny = x * x\nu = y.detach()\nz = u * x\n\nz.sum().backward()\nx.grad == u\n</code></pre>"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#26","title":"2.6 \u6982\u7387","text":""},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#261","title":"2.6.1 \u57fa\u672c\u6982\u7387\u8bba","text":"<ul> <li>sampling</li> <li>distribution</li> <li>multinomial distribution</li> </ul> <pre><code>fair_probs = torch.ones([6]) / 6\nmultinomial.Multinomial(10, fair_probs).sample() # \u591a\u4e2a\u6837\u672c\n</code></pre>"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#262","title":"2.6.2 \u5904\u7406\u591a\u4e2a\u968f\u673a\u53d8\u91cf","text":"<ul> <li>joint probability</li> <li>conditional probability</li> <li>Bayes\u2019 theorem</li> </ul> \\[ P(A \\mid B) = \\frac{P(B \\mid A) P(A)}{P(B)}.  \\] <ul> <li>\u5176\u4e2d P (A, B) \u662f\u4e00\u4e2a\u8054\u5408\u5206\u5e03 (joint distribution)\uff0c\u00a0P (A\u2223B) \u662f\u4e00\u4e2a\u6761\u4ef6\u5206\u5e03 (conditional distribution)</li> <li>marginalization<ul> <li>marginal probability</li> <li>marginal distribution</li> </ul> </li> <li>conditionally independent</li> </ul> <p>$$  P(A, B \\mid C) = P(A \\mid C)P(B \\mid C)  $$</p> \\[ A \\perp B \\mid C  \\] <ul> <li>expectation</li> </ul> \\[ E[X] = \\sum_{x} x P(X = x).  \\] \\[ E_{x \\sim P}[f(x)] = \\sum_x f(x) P(x).  \\] <ul> <li>standard deviation</li> </ul> \\[ \\mathrm{Var}[X] = E\\left[(X - E[X])^2\\right] = E[X^2] - E[X]^2.  \\] \\[ \\mathrm{Var}[f(x)] = E\\left[\\left(f(x) - E[f(x)]\\right)^2\\right].  \\]"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#3","title":"3 \u7ebf\u6027\u795e\u7ecf\u7f51\u7edc","text":""},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#31","title":"3.1 \u7ebf\u6027\u56de\u5f52","text":""},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#311","title":"3.1.1 \u7ebf\u6027\u56de\u5f52\u7684\u57fa\u672c\u5143\u7d20","text":"<ul> <li>regression</li> <li>prediction / inference</li> <li>training set</li> <li>sample / data point / data instance</li> <li>label / target</li> <li>feature / covariate</li> </ul> \\[ \\mathrm{price} = w_{\\mathrm{area}} \\cdot \\mathrm{area} + w_{\\mathrm{age}} \\cdot \\mathrm{age} + b.  \\] <ul> <li>weight</li> <li>bias / offset / intercept</li> <li>affine transformation<ul> <li>linear transformation</li> <li>translation</li> </ul> </li> <li>model parameters</li> <li>loss function</li> </ul> \\[ l^{(i)}(\\mathbf{w}, b) = \\frac{1}{2} \\left(\\hat{y}^{(i)} - y^{(i)}\\right)^2. \\] \\[ L(\\mathbf{w}, b) =\\frac{1}{n}\\sum_{i=1}^n l^{(i)}(\\mathbf{w}, b) =\\frac{1}{n} \\sum_{i=1}^n \\frac{1}{2}\\left(\\mathbf{w}^\\top \\mathbf{x}^{(i)} + b - y^{(i)}\\right)^2. \\] \\[ \\mathbf{w}^*, b^* = \\operatorname*{argmin}_{\\mathbf{w}, b}\\  L(\\mathbf{w}, b). \\] \\[ \\mathbf{w}^{*} = (\\mathbf X^\\top \\mathbf X)^{-1}\\mathbf X^\\top \\mathbf{y}. \\] <ul> <li>analytical solution</li> <li>gradient descent<ul> <li>minibatch stochastic gradient descent</li> </ul> </li> </ul> \\[ (\\mathbf{w},b) \\leftarrow (\\mathbf{w},b) - \\frac{\\eta}{|\\mathcal{B}|} \\sum_{i \\in \\mathcal{B}} \\partial_{(\\mathbf{w},b)} l^{(i)}(\\mathbf{w},b). \\] <ol> <li>\u521d\u59cb\u5316\u6a21\u578b\u53c2\u6570\u7684\u503c\uff0c\u5982\u968f\u673a\u521d\u59cb\u5316</li> <li>\u4ece\u6570\u636e\u96c6\u4e2d\u968f\u673a\u62bd\u53d6\u5c0f\u6279\u91cf\u6837\u672c\u4e14\u5728\u8d1f\u68af\u5ea6\u7684\u65b9\u5411\u4e0a\u66f4\u65b0\u53c2\u6570\uff0c\u5e76\u4e0d\u65ad\u8fed\u4ee3\u8fd9\u4e00\u6b65\u9aa4 - hyperparameter<ul> <li>\\(|\\mathcal{B}|\\): batch size</li> <li>\\(\\eta\\): learning rate</li> <li>hyperparameter tuning</li> <li>validationg dataset</li> <li>generalization</li> </ul> </li> </ol>"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#312","title":"3.1.2 \u77e2\u91cf\u5316\u52a0\u901f","text":"<ul> <li>\u77e2\u91cf\u5316\u4ee3\u7801</li> </ul>"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#313","title":"3.1.3 \u6b63\u6001\u5206\u5e03\u4e0e\u5e73\u65b9\u635f\u5931","text":"<ul> <li>normal distribution / Gaussian distribution</li> </ul> \\[ p(x) = \\frac{1}{\\sqrt{2 \\pi \\sigma^2}} \\exp\\left(-\\frac{1}{2 \\sigma^2} (x - \\mu)^2\\right). \\] \\[ y = \\mathbf{w}^\\top \\mathbf{x} + b + \\epsilon, \\] <p>\u5176\u4e2d \\(\\epsilon \\sim \\mathcal{N}(0, \\sigma^2)\\). \u56e0\u6b64 y \u7684 likelihood:</p> \\[ P(y \\mid \\mathbf{x}) = \\frac{1}{\\sqrt{2 \\pi \\sigma^2}} \\exp\\left(-\\frac{1}{2 \\sigma^2} (y - \\mathbf{w}^\\top \\mathbf{x} - b)^2\\right). \\] \\[ P(\\mathbf y \\mid \\mathbf X) = \\prod_{i=1}^{n} p(y^{(i)}|\\mathbf{x}^{(i)}). \\] \\[ -\\log P(\\mathbf y \\mid \\mathbf X) = \\sum_{i=1}^n \\frac{1}{2} \\log(2 \\pi \\sigma^2) + \\frac{1}{2 \\sigma^2} \\left(y^{(i)} - \\mathbf{w}^\\top \\mathbf{x}^{(i)} - b\\right)^2. \\]"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#314","title":"3.1.4 \u4ece\u7ebf\u6027\u56de\u5f52\u5230\u795e\u7ecf\u7f51\u7edc","text":"<ul> <li>feature dimensionality</li> <li>fully-connected layer / dense layer</li> </ul>"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#32","title":"3.2 \u7ebf\u6027\u56de\u5f52\u7684\u4ece\u96f6\u5f00\u59cb\u5b9e\u73b0","text":"<pre><code>%matplotlib inline\nimport random\nimport torch\nfrom d2l import torch as d2l\ndef synthetic_data(w, b, num_examples):  #@save\n    \"\"\"\u751f\u6210y=Xw+b+\u566a\u58f0\"\"\"\n    X = torch.normal(0, 1, (num_examples, len(w)))\n    y = torch.matmul(X, w) + b\n    y += torch.normal(0, 0.01, y.shape)\n    return X, y.reshape((-1, 1))\n\ntrue_w = torch.tensor([2, -3.4])\ntrue_b = 4.2\nfeatures, labels = synthetic_data(true_w, true_b, 1000)\n\ndef data_iter(batch_size, features, labels):\n    num_examples = len(features)\n    indices = list(range(num_examples))\n    # \u8fd9\u4e9b\u6837\u672c\u662f\u968f\u673a\u8bfb\u53d6\u7684\uff0c\u6ca1\u6709\u7279\u5b9a\u7684\u987a\u5e8f\n    random.shuffle(indices)\n    for i in range(0, num_examples, batch_size):\n        batch_indices = torch.tensor(\n            indices[i: min(i + batch_size, num_examples)])\n        yield features[batch_indices], labels[batch_indices]\n\nw = torch.normal(0, 0.01, size=(2,1), requires_grad=True)\nb = torch.zeros(1, requires_grad=True)\n\ndef linreg(X, w, b):  #@save\n    \"\"\"\u7ebf\u6027\u56de\u5f52\u6a21\u578b\"\"\"\n    return torch.matmul(X, w) + b\n\ndef squared_loss(y_hat, y):  #@save\n    \"\"\"\u5747\u65b9\u635f\u5931\"\"\"\n    return (y_hat - y.reshape(y_hat.shape)) ** 2 / 2\n\ndef sgd(params, lr, batch_size):  #@save\n    \"\"\"\u5c0f\u6279\u91cf\u968f\u673a\u68af\u5ea6\u4e0b\u964d\"\"\"\n    with torch.no_grad():\n        for param in params:\n            param -= lr * param.grad / batch_size\n            param.grad.zero_()\n\nlr = 0.03\nnum_epochs = 3\nnet = linreg\nloss = squared_loss\n\nfor epoch in range(num_epochs):\n    for X, y in data_iter(batch_size, features, labels):\n        l = loss(net(X, w, b), y)  # X\u548cy\u7684\u5c0f\u6279\u91cf\u635f\u5931\n        # \u56e0\u4e3al\u5f62\u72b6\u662f(batch_size,1)\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u6807\u91cf\u3002l\u4e2d\u7684\u6240\u6709\u5143\u7d20\u88ab\u52a0\u5230\u4e00\u8d77\uff0c\n        # \u5e76\u4ee5\u6b64\u8ba1\u7b97\u5173\u4e8e[w,b]\u7684\u68af\u5ea6\n        l.sum().backward()\n        sgd([w, b], lr, batch_size)  # \u4f7f\u7528\u53c2\u6570\u7684\u68af\u5ea6\u66f4\u65b0\u53c2\u6570\n    with torch.no_grad():\n        train_l = loss(net(features, w, b), labels)\n        print(f'epoch {epoch + 1}, loss {float(train_l.mean()):f}')\n</code></pre>"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#33","title":"3.3 \u7ebf\u6027\u56de\u5f52\u7684\u7b80\u6d01\u5b9e\u73b0","text":"<pre><code>import numpy as np\nimport torch\nfrom torch.utils import data\nfrom d2l import torch as d2l\n\ntrue_w = torch.tensor([2, -3.4])\ntrue_b = 4.2\nfeatures, labels = d2l.synthetic_data(true_w, true_b, 1000) # \u751f\u6210\u6570\u636e\u96c6\n\ndef load_array(data_arrays, batch_size, is_train=True):  #@save\n    \"\"\"\u6784\u9020\u4e00\u4e2aPyTorch\u6570\u636e\u8fed\u4ee3\u5668\"\"\"\n    dataset = data.TensorDataset(*data_arrays)\n    return data.DataLoader(dataset, batch_size, shuffle=is_train)\n\nbatch_size = 10\ndata_iter = load_array((features, labels), batch_size) # \u8bfb\u53d6\u6570\u636e\u96c6\n\n# nn\u662f\u795e\u7ecf\u7f51\u7edc\u7684\u7f29\u5199\nfrom torch import nn\n\nnet = nn.Sequential(nn.Linear(2, 1)) # \u5b9a\u4e49\u6a21\u578b \uff08\u8f93\u5165\uff0c\u8f93\u51fa\uff09\u7279\u5f81\u5f62\u72b6\nnet[0].weight.data.normal_(0, 0.01)\nnet[0].bias.data.fill_(0) # \u521d\u59cb\u5316\u6a21\u578b\u53c2\u6570\nloss = nn.MSELoss() # \u5b9a\u4e49\u635f\u5931\u51fd\u6570\ntrainer = torch.optim.SGD(net.parameters(), lr=0.03) # \u5b9a\u4e49\u4f18\u5316\u7b97\u6cd5\n\n# \u8bad\u7ec3\nnum_epochs = 3\nfor epoch in range(num_epochs):\n    for X, y in data_iter:\n        l = loss(net(X) ,y)\n        trainer.zero_grad()\n        l.backward()\n        trainer.step()\n    l = loss(net(features), labels)\n    print(f'epoch {epoch + 1}, loss {l:f}')\n\nw = net[0].weight.data\nprint('w\u7684\u4f30\u8ba1\u8bef\u5dee\uff1a', true_w - w.reshape(true_w.shape))\nb = net[0].bias.data\nprint('b\u7684\u4f30\u8ba1\u8bef\u5dee\uff1a', true_b - b)\n</code></pre>"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#34-softmax","title":"3.4 softmax \u56de\u5f52","text":""},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#341","title":"3.4.1 \u5206\u7c7b\u95ee\u9898","text":"<ul> <li>one-hot encoding</li> </ul> \\[ y \\in \\{(1, 0, 0), (0, 1, 0), (0, 0, 1)\\}. \\]"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#342","title":"3.4.2 \u7f51\u7edc\u67b6\u6784","text":"<ul> <li>affine function</li> <li>logit</li> </ul> \\[ \\begin{split}\\begin{aligned} o_1 &amp;= x_1 w_{11} + x_2 w_{12} + x_3 w_{13} + x_4 w_{14} + b_1,\\\\ o_2 &amp;= x_1 w_{21} + x_2 w_{22} + x_3 w_{23} + x_4 w_{24} + b_2,\\\\ o_3 &amp;= x_1 w_{31} + x_2 w_{32} + x_3 w_{33} + x_4 w_{34} + b_3. \\end{aligned}\\end{split} \\]"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#343","title":"3.4.3 \u5168\u8fde\u63a5\u5c42\u7684\u53c2\u6570\u5f00\u9500","text":"<p>\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u4e1c\u897f</p>"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#344-softmax","title":"3.4.4 softmax \u8fd0\u7b97","text":"<ul> <li>calibration</li> <li>choice model</li> </ul> \\[ \\hat{\\mathbf{y}} = \\mathrm{softmax}(\\mathbf{o})\\quad \\text{\u5176\u4e2d}\\quad \\hat{y}_j = \\frac{\\exp(o_j)}{\\sum_k \\exp(o_k)} \\] \\[ \\operatorname*{argmax}_j \\hat y_j = \\operatorname*{argmax}_j o_j. \\] <ul> <li>linear model</li> </ul>"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#345","title":"3.4.5 \u5c0f\u6279\u6837\u672c\u7684\u77e2\u91cf\u5316","text":"\\[ \\begin{split}\\begin{aligned} \\mathbf{O} &amp;= \\mathbf{X} \\mathbf{W} + \\mathbf{b}, \\\\ \\hat{\\mathbf{Y}} &amp; = \\mathrm{softmax}(\\mathbf{O}). \\end{aligned}\\end{split} \\]"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#346","title":"3.4.6 \u635f\u5931\u51fd\u6570","text":"\\[ P(\\mathbf{Y} \\mid \\mathbf{X}) = \\prod_{i=1}^n P(\\mathbf{y}^{(i)} \\mid \\mathbf{x}^{(i)}). \\] \\[ -\\log P(\\mathbf{Y} \\mid \\mathbf{X}) = \\sum_{i=1}^n -\\log P(\\mathbf{y}^{(i)} \\mid \\mathbf{x}^{(i)}) = \\sum_{i=1}^n l(\\mathbf{y}^{(i)}, \\hat{\\mathbf{y}}^{(i)}), \\] \\[ l(\\mathbf{y}, \\hat{\\mathbf{y}}) = - \\sum_{j=1}^q y_j \\log \\hat{y}_j. \\] <ul> <li>cross-entropy loss</li> </ul> \\[ \\begin{split}\\begin{aligned} l(\\mathbf{y}, \\hat{\\mathbf{y}}) &amp;=  - \\sum_{j=1}^q y_j \\log \\frac{\\exp(o_j)}{\\sum_{k=1}^q \\exp(o_k)} \\\\ &amp;= \\sum_{j=1}^q y_j \\log \\sum_{k=1}^q \\exp(o_k) - \\sum_{j=1}^q y_j o_j\\\\ &amp;= \\log \\sum_{k=1}^q \\exp(o_k) - \\sum_{j=1}^q y_j o_j. \\end{aligned}\\end{split} \\] \\[ \\partial_{o_j} l(\\mathbf{y}, \\hat{\\mathbf{y}}) = \\frac{\\exp(o_j)}{\\sum_{k=1}^q \\exp(o_k)} - y_j = \\mathrm{softmax}(\\mathbf{o})_j - y_j. \\]"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#347","title":"3.4.7 \u4fe1\u606f\u8bba\u57fa\u7840","text":"<ul> <li>information theory</li> <li>entropy</li> </ul> \\[ H[P] = \\sum_j - P(j) \\log P(j). \\]"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#348","title":"3.4.8 \u6a21\u578b\u9884\u6d4b\u548c\u8bc4\u4f30","text":"<ul> <li>accuracy</li> </ul>"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#35","title":"3.5 \u56fe\u50cf\u5206\u7c7b\u6570\u636e\u96c6","text":"<pre><code>%matplotlib inline\nimport torch\nimport torchvision\nfrom torch.utils import data\nfrom torchvision import transforms\nfrom d2l import torch as d2l\n\nd2l.use_svg_display()\n\n# \u901a\u8fc7ToTensor\u5b9e\u4f8b\u5c06\u56fe\u50cf\u6570\u636e\u4ecePIL\u7c7b\u578b\u53d8\u6362\u621032\u4f4d\u6d6e\u70b9\u6570\u683c\u5f0f\uff0c\n# \u5e76\u9664\u4ee5255\u4f7f\u5f97\u6240\u6709\u50cf\u7d20\u7684\u6570\u503c\u5747\u57280\uff5e1\u4e4b\u95f4\ntrans = transforms.ToTensor()\nmnist_train = torchvision.datasets.FashionMNIST(\n    root=\"../data\", train=True, transform=trans, download=True)\nmnist_test = torchvision.datasets.FashionMNIST(\n    root=\"../data\", train=False, transform=trans, download=True)\n\ndef get_fashion_mnist_labels(labels):  #@save\n    \"\"\"\u8fd4\u56deFashion-MNIST\u6570\u636e\u96c6\u7684\u6587\u672c\u6807\u7b7e\"\"\"\n    text_labels = ['t-shirt', 'trouser', 'pullover', 'dress', 'coat',\n                   'sandal', 'shirt', 'sneaker', 'bag', 'ankle boot']\n    return [text_labels[int(i)] for i in labels]\n\ndef show_images(imgs, num_rows, num_cols, titles=None, scale=1.5):  #@save\n    \"\"\"\u7ed8\u5236\u56fe\u50cf\u5217\u8868\"\"\"\n    figsize = (num_cols * scale, num_rows * scale)\n    _, axes = d2l.plt.subplots(num_rows, num_cols, figsize=figsize)\n    axes = axes.flatten()\n    for i, (ax, img) in enumerate(zip(axes, imgs)):\n        if torch.is_tensor(img):\n            # \u56fe\u7247\u5f20\u91cf\n            ax.imshow(img.numpy())\n        else:\n            # PIL\u56fe\u7247\n            ax.imshow(img)\n        ax.axes.get_xaxis().set_visible(False)\n        ax.axes.get_yaxis().set_visible(False)\n        if titles:\n            ax.set_title(titles[i])\n    return axes\n\nbatch_size = 256\n\ndef get_dataloader_workers():  #@save\n    \"\"\"\u4f7f\u75284\u4e2a\u8fdb\u7a0b\u6765\u8bfb\u53d6\u6570\u636e\"\"\"\n    return 4\n\ntrain_iter = data.DataLoader(mnist_train, batch_size, shuffle=True,\n                             num_workers=get_dataloader_workers())\n\ndef load_data_fashion_mnist(batch_size, resize=None):  #@save\n    \"\"\"\u4e0b\u8f7dFashion-MNIST\u6570\u636e\u96c6\uff0c\u7136\u540e\u5c06\u5176\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\"\"\"\n    trans = [transforms.ToTensor()]\n    if resize:\n        trans.insert(0, transforms.Resize(resize))\n    trans = transforms.Compose(trans)\n    mnist_train = torchvision.datasets.FashionMNIST(\n        root=\"../data\", train=True, transform=trans, download=True)\n    mnist_test = torchvision.datasets.FashionMNIST(\n        root=\"../data\", train=False, transform=trans, download=True)\n    return (data.DataLoader(mnist_train, batch_size, shuffle=True,\n                            num_workers=get_dataloader_workers()),\n            data.DataLoader(mnist_test, batch_size, shuffle=False,\n                            num_workers=get_dataloader_workers()))\n\ntrain_iter, test_iter = load_data_fashion_mnist(32, resize=64)\nfor X, y in train_iter:\n    print(X.shape, X.dtype, y.shape, y.dtype)\n    break\n</code></pre>"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#36-softmax","title":"3.6 softmax \u56de\u5f52\u7684\u4ece\u96f6\u5f00\u59cb\u5b9e\u73b0","text":"<pre><code>import torch\nfrom IPython import display\nfrom d2l import torch as d2l\n\nbatch_size = 256\ntrain_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)\n\nnum_inputs = 784\nnum_outputs = 10\n\nW = torch.normal(0, 0.01, size=(num_inputs, num_outputs), requires_grad=True)\nb = torch.zeros(num_outputs, requires_grad=True) # \u521d\u59cb\u5316\u6a21\u578b\u53c2\u6570\n\nX = torch.tensor([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\nX.sum(0, keepdim=True), X.sum(1, keepdim=True) \n\ndef softmax(X):\n    X_exp = torch.exp(X)\n    partition = X_exp.sum(1, keepdim=True)\n    return X_exp / partition  # \u8fd9\u91cc\u5e94\u7528\u4e86\u5e7f\u64ad\u673a\u5236\n\nX = torch.normal(0, 1, (2, 5))\nX_prob = softmax(X)\nX_prob, X_prob.sum(1) # \u5b9a\u4e49softmax\u64cd\u4f5c\n\ndef net(X):\n    return softmax(torch.matmul(X.reshape((-1, W.shape[0])), W) + b) # \u5b9a\u4e49\u6a21\u578b\n\ny = torch.tensor([0, 2])\ny_hat = torch.tensor([[0.1, 0.3, 0.6], [0.3, 0.2, 0.5]])\ny_hat[[0, 1], y] \ndef cross_entropy(y_hat, y):\n    return - torch.log(y_hat[range(len(y_hat)), y])\n\ncross_entropy(y_hat, y) # \u5b9a\u4e49\u635f\u5931\u51fd\u6570\n\ndef accuracy(y_hat, y):  #@save\n    \"\"\"\u8ba1\u7b97\u9884\u6d4b\u6b63\u786e\u7684\u6570\u91cf\"\"\"\n    if len(y_hat.shape) &gt; 1 and y_hat.shape[1] &gt; 1:\n        y_hat = y_hat.argmax(axis=1)\n    cmp = y_hat.type(y.dtype) == y\n    return float(cmp.type(y.dtype).sum())\n\ndef evaluate_accuracy(net, data_iter):  #@save\n    \"\"\"\u8ba1\u7b97\u5728\u6307\u5b9a\u6570\u636e\u96c6\u4e0a\u6a21\u578b\u7684\u7cbe\u5ea6\"\"\"\n    if isinstance(net, torch.nn.Module):\n        net.eval()  # \u5c06\u6a21\u578b\u8bbe\u7f6e\u4e3a\u8bc4\u4f30\u6a21\u5f0f\n    metric = Accumulator(2)  # \u6b63\u786e\u9884\u6d4b\u6570\u3001\u9884\u6d4b\u603b\u6570\n    with torch.no_grad():\n        for X, y in data_iter:\n            metric.add(accuracy(net(X), y), y.numel())\n    return metric[0] / metric[1]\n\nclass Accumulator:  #@save\n    \"\"\"\u5728n\u4e2a\u53d8\u91cf\u4e0a\u7d2f\u52a0\"\"\"\n    def __init__(self, n):\n        self.data = [0.0] * n\n\n    def add(self, *args):\n        self.data = [a + float(b) for a, b in zip(self.data, args)]\n\n    def reset(self):\n        self.data = [0.0] * len(self.data)\n\n    def __getitem__(self, idx):\n        return self.data[idx]\n\nevaluate_accuracy(net, test_iter) # \u5206\u7c7b\u7cbe\u5ea6\n\ndef train_epoch_ch3(net, train_iter, loss, updater):  #@save\n    \"\"\"\u8bad\u7ec3\u6a21\u578b\u4e00\u4e2a\u8fed\u4ee3\u5468\u671f\uff08\u5b9a\u4e49\u89c1\u7b2c3\u7ae0\uff09\"\"\"\n    # \u5c06\u6a21\u578b\u8bbe\u7f6e\u4e3a\u8bad\u7ec3\u6a21\u5f0f\n    if isinstance(net, torch.nn.Module):\n        net.train()\n    # \u8bad\u7ec3\u635f\u5931\u603b\u548c\u3001\u8bad\u7ec3\u51c6\u786e\u5ea6\u603b\u548c\u3001\u6837\u672c\u6570\n    metric = Accumulator(3)\n    for X, y in train_iter:\n        # \u8ba1\u7b97\u68af\u5ea6\u5e76\u66f4\u65b0\u53c2\u6570\n        y_hat = net(X)\n        l = loss(y_hat, y)\n        if isinstance(updater, torch.optim.Optimizer):\n            # \u4f7f\u7528PyTorch\u5185\u7f6e\u7684\u4f18\u5316\u5668\u548c\u635f\u5931\u51fd\u6570\n            updater.zero_grad()\n            l.mean().backward()\n            updater.step()\n        else:\n            # \u4f7f\u7528\u5b9a\u5236\u7684\u4f18\u5316\u5668\u548c\u635f\u5931\u51fd\u6570\n            l.sum().backward()\n            updater(X.shape[0])\n        metric.add(float(l.sum()), accuracy(y_hat, y), y.numel())\n    # \u8fd4\u56de\u8bad\u7ec3\u635f\u5931\u548c\u8bad\u7ec3\u7cbe\u5ea6\n    return metric[0] / metric[2], metric[1] / metric[2]\n\nclass Animator:  #@save\n    \"\"\"\u5728\u52a8\u753b\u4e2d\u7ed8\u5236\u6570\u636e\"\"\"\n    def __init__(self, xlabel=None, ylabel=None, legend=None, xlim=None,\n                 ylim=None, xscale='linear', yscale='linear',\n                 fmts=('-', 'm--', 'g-.', 'r:'), nrows=1, ncols=1,\n                 figsize=(3.5, 2.5)):\n        # \u589e\u91cf\u5730\u7ed8\u5236\u591a\u6761\u7ebf\n        if legend is None:\n            legend = []\n        d2l.use_svg_display()\n        self.fig, self.axes = d2l.plt.subplots(nrows, ncols, figsize=figsize)\n        if nrows * ncols == 1:\n            self.axes = [self.axes, ]\n        # \u4f7f\u7528lambda\u51fd\u6570\u6355\u83b7\u53c2\u6570\n        self.config_axes = lambda: d2l.set_axes(\n            self.axes[0], xlabel, ylabel, xlim, ylim, xscale, yscale, legend)\n        self.X, self.Y, self.fmts = None, None, fmts\n\n    def add(self, x, y):\n        # \u5411\u56fe\u8868\u4e2d\u6dfb\u52a0\u591a\u4e2a\u6570\u636e\u70b9\n        if not hasattr(y, \"__len__\"):\n            y = [y]\n        n = len(y)\n        if not hasattr(x, \"__len__\"):\n            x = [x] * n\n        if not self.X:\n            self.X = [[] for _ in range(n)]\n        if not self.Y:\n            self.Y = [[] for _ in range(n)]\n        for i, (a, b) in enumerate(zip(x, y)):\n            if a is not None and b is not None:\n                self.X[i].append(a)\n                self.Y[i].append(b)\n        self.axes[0].cla()\n        for x, y, fmt in zip(self.X, self.Y, self.fmts):\n            self.axes[0].plot(x, y, fmt)\n        self.config_axes()\n        display.display(self.fig)\n        display.clear_output(wait=True)\n\ndef train_ch3(net, train_iter, test_iter, loss, num_epochs, updater):  #@save\n    \"\"\"\u8bad\u7ec3\u6a21\u578b\uff08\u5b9a\u4e49\u89c1\u7b2c3\u7ae0\uff09\"\"\"\n    animator = Animator(xlabel='epoch', xlim=[1, num_epochs], ylim=[0.3, 0.9],\n                        legend=['train loss', 'train acc', 'test acc'])\n    for epoch in range(num_epochs):\n        train_metrics = train_epoch_ch3(net, train_iter, loss, updater)\n        test_acc = evaluate_accuracy(net, test_iter)\n        animator.add(epoch + 1, train_metrics + (test_acc,))\n    train_loss, train_acc = train_metrics\n    assert train_loss &lt; 0.5, train_loss\n    assert train_acc &lt;= 1 and train_acc &gt; 0.7, train_acc\n    assert test_acc &lt;= 1 and test_acc &gt; 0.7, test_acc\n\nlr = 0.1\n\ndef updater(batch_size):\n    return d2l.sgd([W, b], lr, batch_size)\n\nnum_epochs = 10\ntrain_ch3(net, train_iter, test_iter, cross_entropy, num_epochs, updater) # \u8bad\u7ec3\n\ndef predict_ch3(net, test_iter, n=6):  #@save\n    \"\"\"\u9884\u6d4b\u6807\u7b7e\uff08\u5b9a\u4e49\u89c1\u7b2c3\u7ae0\uff09\"\"\"\n    for X, y in test_iter:\n        break\n    trues = d2l.get_fashion_mnist_labels(y)\n    preds = d2l.get_fashion_mnist_labels(net(X).argmax(axis=1))\n    titles = [true +'\\n' + pred for true, pred in zip(trues, preds)]\n    d2l.show_images(\n        X[0:n].reshape((n, 28, 28)), 1, n, titles=titles[0:n])\n\npredict_ch3(net, test_iter) # \u9884\u6d4b\n</code></pre>"},{"location":"Dive%20into%20deep%20learning/Dive%20into%20Deep%20Learning/#37-softmax","title":"3.7 softmax \u56de\u5f52\u7684\u7b80\u6d01\u5b9e\u73b0","text":"<pre><code>import torch\nfrom torch import nn\nfrom d2l import torch as d2l\n\nbatch_size = 256\ntrain_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)\n\n# PyTorch\u4e0d\u4f1a\u9690\u5f0f\u5730\u8c03\u6574\u8f93\u5165\u7684\u5f62\u72b6\u3002\u56e0\u6b64\uff0c\n# \u6211\u4eec\u5728\u7ebf\u6027\u5c42\u524d\u5b9a\u4e49\u4e86\u5c55\u5e73\u5c42\uff08flatten\uff09\uff0c\u6765\u8c03\u6574\u7f51\u7edc\u8f93\u5165\u7684\u5f62\u72b6\nnet = nn.Sequential(nn.Flatten(), nn.Linear(784, 10))\n\ndef init_weights(m):\n    if type(m) == nn.Linear:\n        nn.init.normal_(m.weight, std=0.01)\n\nnet.apply(init_weights); # \u521d\u59cb\u5316\u6a21\u578b\u53c2\u6570\n</code></pre> \\[ \\begin{split}\\begin{aligned} \\hat y_j &amp; =  \\frac{\\exp(o_j - \\max(o_k))\\exp(\\max(o_k))}{\\sum_k \\exp(o_k - \\max(o_k))\\exp(\\max(o_k))} \\\\ &amp; = \\frac{\\exp(o_j - \\max(o_k))}{\\sum_k \\exp(o_k - \\max(o_k))}. \\end{aligned}\\end{split} \\] \\[ \\begin{split}\\begin{aligned} \\log{(\\hat y_j)} &amp; = \\log\\left( \\frac{\\exp(o_j - \\max(o_k))}{\\sum_k \\exp(o_k - \\max(o_k))}\\right) \\\\ &amp; = \\log{(\\exp(o_j - \\max(o_k)))}-\\log{\\left( \\sum_k \\exp(o_k - \\max(o_k)) \\right)} \\\\ &amp; = o_j - \\max(o_k) -\\log{\\left( \\sum_k \\exp(o_k - \\max(o_k)) \\right)}. \\end{aligned}\\end{split} \\] <pre><code>loss = nn.CrossEntropyLoss(reduction='none') # LogSumExp\u6280\u5de7\n\ntrainer = torch.optim.SGD(net.parameters(), lr=0.1) # \u4f18\u5316\u7b97\u6cd5\n\nnum_epochs = 10\nd2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, trainer) # \u8bad\u7ec3\n</code></pre>"},{"location":"cs61a/COMPOSING%20PROGRAMS/","title":"1. COMPOSING PROGRAMS","text":""},{"location":"cs61a/COMPOSING%20PROGRAMS/#1","title":"1 \u4f7f\u7528\u51fd\u6570\u6784\u5efa\u62bd\u8c61","text":""},{"location":"cs61a/COMPOSING%20PROGRAMS/#11","title":"1.1 \u5f00\u59cb","text":"<p>\u7a0b\u5e8f\u7531\u4e24\u90e8\u5206\u7ec4\u6210: * \u8ba1\u7b97\u4e00\u4e9b\u503c * \u6267\u884c\u4e00\u4e9b\u64cd\u4f5c</p> <ul> <li>\u51fd\u6570</li> <li>\u5bf9\u8c61</li> <li>\u89e3\u91ca\u5668:<ul> <li>\u7528\u4e8e\u8ba1\u7b97\u590d\u6742\u8868\u8fbe\u5f0f\u7684\u7a0b\u5e8f</li> </ul> </li> <li>\u589e\u91cf\u6d4b\u8bd5\u3001\u6a21\u5757\u5316\u8bbe\u8ba1\u3001\u660e\u786e\u7684\u5047\u8bbe\u548c\u56e2\u961f\u5408\u4f5c</li> </ul>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#12","title":"1.2 \u7f16\u7a0b\u8981\u7d20","text":""},{"location":"cs61a/COMPOSING%20PROGRAMS/#121","title":"1.2.1 \u8868\u8fbe\u5f0f","text":"<p>\u8bed\u8a00\u8981\u6709\u7684\u673a\u5236: - \u539f\u59cb\u8868\u8fbe\u5f0f\u548c\u8bed\u53e5\uff1a\u8bed\u8a00\u6240\u5173\u5fc3\u7684\u6700\u7b80\u5355\u7684\u4e2a\u4f53 - \u7ec4\u5408\u65b9\u6cd5\uff1a\u7531\u7b80\u5355\u5143\u7d20\u7ec4\u5408\u6784\u5efa\u590d\u5408\u5143\u7d20 - \u62bd\u8c61\u65b9\u6cd5\uff1a\u547d\u540d\u590d\u5408\u5143\u7d20\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u5355\u5143\u8fdb\u884c\u64cd\u4f5c infix notation</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#122","title":"1.2.2 \u8c03\u7528\u8868\u8fbe\u5f0f","text":"<p> subexpressions \u7528\u53c2\u6570\u6765\u8c03\u7528\u51fd\u6570 nested\uff08\u5d4c\u5957\uff09</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#123","title":"1.2.3 \u5bfc\u5165\u5e93\u51fd\u6570","text":""},{"location":"cs61a/COMPOSING%20PROGRAMS/#124","title":"1.2.4 \u540d\u79f0\u4e0e\u73af\u5883","text":"<ul> <li>= is assignment operator<ul> <li>\u6700\u7b80\u5355\u7684\u62bd\u8c61\u65b9\u6cd5</li> </ul> </li> <li>environment</li> </ul>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#125","title":"1.2.5 \u6c42\u89e3\u5d4c\u5957\u8868\u8fbe\u5f0f","text":"<p>\u6c42\u503c\u7a0b\u5e8f\u672c\u8d28\u4e0a\u662f\u9012\u5f52\u7684  \u8868\u8fbe\u5f0f\u6811</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#126-print","title":"1.2.6 \u975e\u7eaf\u51fd\u6570 print","text":"<p>Pure functions None-pure functions     which has a side effect</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#13","title":"1.3 \u5b9a\u4e49\u65b0\u7684\u51fd\u6570","text":"<pre><code>def &lt;name&gt;(&lt;formal parameters&gt;):\n    return &lt;return expression&gt;  \n</code></pre>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#131","title":"1.3.1 \u73af\u5883","text":"<p>environment has some frames     frames have some bindings * intrinsic name * bound name \u4e0d\u540c\u7684\u540d\u79f0\u53ef\u80fd\u6307\u7684\u662f\u540c\u4e00\u4e2a\u51fd\u6570\uff0c\u4f46\u8be5\u51fd\u6570\u672c\u8eab\u53ea\u6709\u4e00\u4e2a\u5185\u5728\u540d\u79f0 \u5bf9\u51fd\u6570\u5f62\u5f0f\u53c2\u6570\u7684\u63cf\u8ff0\u88ab\u79f0\u4e3a\u51fd\u6570\u7684\u7b7e\u540d</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#132","title":"1.3.2 \u8c03\u7528\u7528\u6237\u5b9a\u4e49\u7684\u51fd\u6570","text":"<ol> <li>\u5728\u65b0\u7684\u5c40\u90e8\u5e27\u4e2d\uff0c\u5c06\u5b9e\u53c2\u7ed1\u5b9a\u5230\u51fd\u6570\u7684\u5f62\u53c2\u4e0a\u3002</li> <li>\u5728\u4ee5\u6b64\u5e27\u5f00\u59cb\u7684\u73af\u5883\u4e2d\u6267\u884c\u51fd\u6570\u4f53\u3002 name evaluation</li> </ol>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#133","title":"1.3.3 \u793a\u4f8b\uff1a\u8c03\u7528\u7528\u6237\u5b9a\u4e49\u7684\u51fd\u6570","text":""},{"location":"cs61a/COMPOSING%20PROGRAMS/#134","title":"1.3.4 \u5c40\u90e8\u540d\u79f0","text":""},{"location":"cs61a/COMPOSING%20PROGRAMS/#135","title":"1.3.5 \u9009\u62e9\u540d\u79f0","text":"<p>PEP 8 \u2013 Style Guide for Python Code | peps.python.org</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#136","title":"1.3.6 \u62bd\u8c61\u51fd\u6570","text":"<ul> <li>functional abstraction<ul> <li>domain</li> <li>range</li> <li>intent</li> </ul> </li> </ul>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#137","title":"1.3.7 \u8fd0\u7b97\u7b26","text":"<ul> <li>truediv</li> <li>floordiv</li> </ul>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#14","title":"1.4 \u8bbe\u8ba1\u51fd\u6570","text":"<ul> <li>\u4e00\u4e2a\u51fd\u6570\u4e00\u4e2a\u4efb\u52a1</li> <li>Don't repeat yourself (DRY)</li> <li>\u5b9a\u4e49\u901a\u7528\u7684\u51fd\u6570</li> </ul>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#141","title":"1.4.1 \u6587\u6863","text":"<p>docstring</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#142","title":"1.4.2 \u53c2\u6570\u9ed8\u8ba4\u503c","text":""},{"location":"cs61a/COMPOSING%20PROGRAMS/#15","title":"1.5 \u63a7\u5236","text":""},{"location":"cs61a/COMPOSING%20PROGRAMS/#151","title":"1.5.1 \u8bed\u53e5","text":"<ul> <li>assignment</li> <li>def </li> <li>return</li> </ul>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#152","title":"1.5.2 \u590d\u5408\u8bed\u53e5","text":"<p>header suite <pre><code>&lt;header&gt;:\n    &lt;statement&gt;\n    &lt;statement&gt;\n    ...\n&lt;separating header&gt;:\n    &lt;statement&gt;\n    &lt;statement&gt;\n    ...\n...\n</code></pre> def \u662f\u590d\u5408\u8bed\u53e5 the header controls its suite \u8fd9\u4e2a\u5b9a\u4e49\u63ed\u793a\u4e86\u9012\u5f52\u5b9a\u4e49\u5e8f\u5217\uff08sequence\uff09\u7684\u57fa\u672c\u7ed3\u6784\uff1a\u4e00\u4e2a\u5e8f\u5217\u53ef\u4ee5\u5206\u89e3\u6210\u5b83\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u548c\u5176\u4f59\u5143\u7d20 redirected control</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#153-ii","title":"1.5.3 \u00a0\u5b9a\u4e49\u51fd\u6570 II\uff1a\u5c40\u90e8\u8d4b\u503c","text":""},{"location":"cs61a/COMPOSING%20PROGRAMS/#154","title":"1.5.4 \u6761\u4ef6\u8bed\u53e5","text":"<pre><code>if &lt;expression&gt;:\n    &lt;suite&gt;\nelif &lt;expression&gt;:\n    &lt;suite&gt;\nelse:\n    &lt;suite&gt;\n</code></pre>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#155","title":"1.5.5 \u8fed\u4ee3","text":"<p>iteractive control <pre><code>while &lt;expression&gt;:\n    &lt;suite&gt;\n</code></pre></p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#156","title":"1.5.6 \u6d4b\u8bd5","text":"<p>assertions <pre><code>&gt;&gt;&gt; assert fib(8) == 13, '\u7b2c\u516b\u4e2a\u6590\u6ce2\u90a3\u5951\u6570\u5e94\u8be5\u662f 13'\n</code></pre> Doctests <pre><code>&gt;&gt;&gt; def sum_naturals(n):\n    \"\"\"\u8fd4\u56de\u524d n \u4e2a\u81ea\u7136\u6570\u7684\u548c\u3002\n\n    &gt;&gt;&gt; sum_naturals(10)\n    55\n    &gt;&gt;&gt; sum_naturals(100)\n    5050\n    \"\"\"\n    total, k = 0, 1\n    while k &lt;= n:\n        total, k = total + k, k + 1\n    return total\n</code></pre></p> <p><pre><code>&gt;&gt;&gt; from doctest import testmod\n&gt;&gt;&gt; testmod()\nTestResults(failed=0, attempted=2)\n</code></pre> \u5355\u4e2a\u51fd\u6570\u7684\u4ea4\u4e92 <pre><code>&gt;&gt;&gt; from doctest import run_docstring_examples\n&gt;&gt;&gt; run_docstring_examples(sum_naturals, globals(), True)\nFinding tests in NoName\nTrying:\n\u00a0\u00a0\u00a0 sum_naturals(10)\nExpecting:\n\u00a0\u00a0\u00a0 55\nok\nTrying:\n\u00a0\u00a0\u00a0 sum_naturals(100)\nExpecting:\n\u00a0\u00a0\u00a0 5050\nok\n</code></pre></p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#16","title":"1.6 \u9ad8\u9636\u51fd\u6570","text":"<p>general patterns named concepts higher-order functions     \u53ef\u4ee5\u628a\u51fd\u6570\u5f53\u4f5c\u53c2\u6570\u6216\u8005\u8fd4\u56de\u503c</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#161","title":"1.6.1 \u4f5c\u4e3a\u53c2\u6570\u7684\u51fd\u6570","text":"<p>slots step through \uff08\u5355\u6b65\u8c03\u8bd5\uff09 \u4e00\u4e2a\u51e0\u4e4e\u6ca1\u5fc5\u8981\u770b\u7684\u4f8b\u5b50: <pre><code>&gt;&gt;&gt; def summation(n, term):\n        total, k = 0, 1\n        while k &lt;= n:\n            total, k = total + term(k), k + 1\n        return total\n&gt;&gt;&gt; def identity(x):\n        return x\n&gt;&gt;&gt; def sum_naturals(n):\n        return summation(n, identity)\n&gt;&gt;&gt; sum_naturals(10)\n55\n</code></pre></p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#162","title":"1.6.2 \u4f5c\u4e3a\u901a\u7528\u65b9\u6cd5\u7684\u51fd\u6570","text":"<p>user-defined functions general methods iterative improvement repetitive refinement</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#163-iii","title":"1.6.3 \u5b9a\u4e49\u51fd\u6570 III\uff1a\u5d4c\u5957\u5b9a\u4e49","text":"<p>\u4e24\u4e2a\u540e\u679c: * \u5168\u5c40\u5e27\u53d8\u6df7\u4e71 * \u51fd\u6570\u7b7e\u540d\u9650\u5236  Nested function definition Lexical scope     \u8fd9\u79cd\u5728\u5d4c\u5957\u5b9a\u4e49\u4e4b\u95f4\u5171\u4eab\u540d\u79f0\u7684\u89c4\u5219\u79f0\u4e3a\u8bcd\u6cd5\u4f5c\u7528\u57df</p> <ol> <li>\u6bcf\u4e2a\u7528\u6237\u5b9a\u4e49\u7684\u51fd\u6570\u90fd\u6709\u4e00\u4e2a\u7236\u73af\u5883\uff1a\u5b9a\u4e49\u5b83\u7684\u73af\u5883\u3002</li> <li>\u8c03\u7528\u7528\u6237\u5b9a\u4e49\u7684\u51fd\u6570\u65f6\uff0c\u5176\u5c40\u90e8\u5e27\u4f1a\u7ee7\u627f\u5176\u7236\u73af\u5883\u3002</li> </ol> <ul> <li>\u5173\u952e\u4f18\u52bf:<ul> <li>\u5c40\u90e8\u51fd\u6570\u7684\u540d\u79f0\u4e0d\u4f1a\u5f71\u54cd\u5b9a\u4e49\u5b83\u7684\u51fd\u6570\u7684\u5916\u90e8\u540d\u79f0\uff0c\u56e0\u4e3a\u5c40\u90e8\u51fd\u6570\u7684\u540d\u79f0\u5c06\u7ed1\u5b9a\u5728\u5b9a\u4e49\u5b83\u7684\u5f53\u524d\u5c40\u90e8\u73af\u5883\u4e2d\uff0c\u800c\u4e0d\u662f\u5168\u5c40\u73af\u5883\u4e2d\u3002</li> <li>\u5c40\u90e8\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u5916\u5c42\u51fd\u6570\u7684\u73af\u5883\uff0c\u8fd9\u662f\u56e0\u4e3a\u5c40\u90e8\u51fd\u6570\u7684\u51fd\u6570\u4f53\u7684\u6c42\u503c\u73af\u5883\u4f1a\u7ee7\u627f\u5b9a\u4e49\u5b83\u7684\u6c42\u503c\u73af\u5883\u3002 Extended Environments \u5c40\u90e8\u5b9a\u4e49\u7684\u51fd\u6570\u901a\u5e38\u88ab\u79f0\u4e3a\u95ed\u5305\uff08closures\uff09</li> </ul> </li> </ul>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#164","title":"1.6.4 \u4f5c\u4e3a\u8fd4\u56de\u503c\u7684\u51fd\u6570","text":"<p>composition</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#165","title":"1.6.5 \u793a\u4f8b\uff1a\u725b\u987f\u6cd5","text":""},{"location":"cs61a/COMPOSING%20PROGRAMS/#166-currying","title":"1.6.6 Currying","text":"<p>uncurrying transformation <pre><code>&gt;&gt;&gt; def curry2(f):\n        \"\"\"\u8fd4\u56de\u7ed9\u5b9a\u7684\u53cc\u53c2\u6570\u51fd\u6570\u7684\u67ef\u91cc\u5316\u7248\u672c\"\"\"\n        def g(x):\n            def h(y):\n                return f(x, y)\n            return h\n        return g\n&gt;&gt;&gt; def uncurry2(g):\n        \"\"\"\u8fd4\u56de\u7ed9\u5b9a\u7684\u67ef\u91cc\u5316\u51fd\u6570\u7684\u53cc\u53c2\u6570\u7248\u672c\"\"\"\n        def f(x, y):\n            return g(x)(y)\n        return f\n&gt;&gt;&gt; pow_curried = curry2(pow)\n&gt;&gt;&gt; pow_curried(2)(5)\n32\n&gt;&gt;&gt; map_to_range(0, 10, pow_curried(2))\n1\n2\n4\n8\n16\n32\n64\n128\n256\n512\n</code></pre></p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#167-lambda","title":"1.6.7 Lambda \u8868\u8fbe\u5f0f","text":"<p><pre><code>lambda              x         :              f(g(x))\n\"A function that    takes x   and returns    f(g(x))\"\n</code></pre> \\(\\displaystyle \\lambda\\) <pre><code>&gt;&gt;&gt; s = lambda x: x * x\n&gt;&gt;&gt; s\n&lt;function &lt;lambda&gt; at 0xf3f490&gt;\n&gt;&gt;&gt; s(12)\n144\n</code></pre></p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#168","title":"1.6.8 \u62bd\u8c61\u548c\u4e00\u7b49\u51fd\u6570","text":"<p>first-class status 1. \u53ef\u4ee5\u4e0e\u540d\u79f0\u7ed1\u5b9a 2. \u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570 3. \u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u7684\u7ed3\u679c\u8fd4\u56de 4. \u53ef\u4ee5\u5305\u542b\u5728\u6570\u636e\u7ed3\u6784\u4e2d</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#169","title":"1.6.9 \u51fd\u6570\u88c5\u9970\u5668","text":"<p>decorator <pre><code>&gt;&gt;&gt; def trace(fn):\n        def wrapped(x):\n            print('-&gt; ', fn, '(', x, ')')\n            return fn(x)\n        return wrapped\n\n&gt;&gt;&gt; @trace\n    def triple(x):\n        return 3 * x\n\n&gt;&gt;&gt; triple(12)\n-&gt;  &lt;function triple at 0x102a39848&gt; ( 12 )\n36\n</code></pre> annotation \u7b49\u4ef7\u4e8e: <pre><code>&gt;&gt;&gt; def triple(x):\n        return 3 * x\n&gt;&gt;&gt; triple = trace(triple)\n</code></pre></p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#17","title":"1.7 \u9012\u5f52\u51fd\u6570","text":"<p>rucursive circular nature</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#171","title":"1.7.1 \u9012\u5f52\u51fd\u6570\u5256\u6790","text":"<p>base case unwinds recursive calls induction</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#172-mutually-recursive","title":"1.7.2 mutually recursive","text":""},{"location":"cs61a/COMPOSING%20PROGRAMS/#173","title":"1.7.3 \u9012\u5f52\u51fd\u6570\u4e2d\u7684\u6253\u5370","text":"<p>abstraction barrier</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#174-tree-recursive","title":"1.7.4 tree recursive","text":""},{"location":"cs61a/COMPOSING%20PROGRAMS/#175","title":"1.7.5 \u793a\u4f8b\uff1a\u5206\u5272\u6570","text":"<pre><code>&gt;&gt;&gt; def count_partitions(n, m):\n\u00a0\u00a0\u00a0     \"\"\"\u8ba1\u7b97\u4f7f\u7528\u6700\u5927\u6570 m \u7684\u6574\u6570\u5206\u5272 n \u7684\u65b9\u5f0f\u7684\u6570\u91cf\"\"\"\n\u00a0\u00a0\u00a0     if n == 0:\n\u00a0\u00a0\u00a0         return 1\n\u00a0\u00a0\u00a0     elif n &lt; 0:\n\u00a0\u00a0\u00a0         return 0\n\u00a0\u00a0\u00a0     elif m == 0:\n\u00a0\u00a0\u00a0         return 0\n\u00a0\u00a0\u00a0     else:\n\u00a0\u00a0\u00a0         return count_partitions(n-m, m) + count_partitions(n, m-1)\n\n&gt;&gt;&gt; count_partitions(6, 4)\n9\n&gt;&gt;&gt; count_partitions(5, 5)\n7\n&gt;&gt;&gt; count_partitions(10, 10)\n42\n&gt;&gt;&gt; count_partitions(15, 15)\n176\n&gt;&gt;&gt; count_partitions(20, 20)\n627\n</code></pre>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#2","title":"2 \u4f7f\u7528\u6570\u636e\u6784\u5efa\u62bd\u8c61","text":""},{"location":"cs61a/COMPOSING%20PROGRAMS/#21","title":"2.1 \u5f15\u8a00","text":"<ul> <li>\u9ad8\u9636\u51fd\u6570\u4f7f\u6211\u4eec\u80fd\u591f\u6839\u636e\u901a\u7528\u7684\u8ba1\u7b97\u65b9\u6cd5\u8fdb\u884c\u64cd\u4f5c\u548c\u63a8\u7406\uff0c\u4ece\u800c\u589e\u5f3a\u4e86\u8bed\u8a00\u7684\u529f\u80fd\u3002\u8fd9\u5c31\u662f\u7f16\u7a0b\u7684\u672c\u8d28</li> <li>\u6709\u6548\u4f7f\u7528\u5185\u7f6e\u6570\u636e\u7c7b\u578b\u548c\u7528\u6237\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\u662f\u6570\u636e\u5904\u7406\u578b\u5e94\u7528\uff08data processing applications\uff09\u7684\u57fa\u7840</li> </ul>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#211","title":"2.1.1 \u539f\u59cb\u6570\u636e\u7c7b\u578b","text":"<p>\u539f\u59cb\u6570\u636e\u7c7b\u578b\u5177\u6709\u5c5e\u6027: 1. \u6709\u4e00\u4e9b\u53ef\u4ee5\u6c42\u89e3\u4e3a\u539f\u59cb\u6570\u636e\u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\uff0c\u88ab\u79f0\u4e3a\u5b57\u9762\u91cf\uff08literals\uff09\u3002 2. \u6709\u7528\u4e8e\u64cd\u4f5c\u539f\u59cb\u7c7b\u578b\u503c\u7684\u5185\u7f6e\u51fd\u6570\u548c\u64cd\u4f5c\u7b26\u3002 - \u539f\u59cb\u6570\u5b57\u7c7b\u578b     - int     - float     - complex - Non-numeric types     - bool - more on \u539f\u59cb\u6570\u636e\u7c7b\u578b</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#22","title":"2.2 \u6570\u636e\u62bd\u8c61","text":""},{"location":"cs61a/COMPOSING%20PROGRAMS/#221","title":"2.2.1 \u793a\u4f8b\uff1a\u6709\u7406\u6570","text":"<p>wishful thinking <pre><code>&gt;&gt;&gt; def add_rationals(x, y):\n        nx, dx = numer(x), denom(x)\n        ny, dy = numer(y), denom(y)\n        return rational(nx * dy + ny * dx, dx * dy)\n\n&gt;&gt;&gt; def mul_rationals(x, y):\n        return rational(numer(x) * numer(y), denom(x) * denom(y))\n\n&gt;&gt;&gt; def print_rational(x):\n        print(numer(x), '/', denom(x))\n\n&gt;&gt;&gt; def rationals_are_equal(x, y):\n        return numer(x) * denom(y) == numer(y) * denom(x)\n</code></pre></p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#222-pair","title":"2.2.2 pair","text":"<p>from operator import getitem <pre><code>&gt;&gt;&gt; def rational(n, d):\n        return [n, d]\n\n&gt;&gt;&gt; def numer(x):\n        return x[0]\n\n&gt;&gt;&gt; def denom(x):\n        return x[1]\n</code></pre> \u7b80\u5316\u6709\u7406\u6570: <pre><code>&gt;&gt;&gt; from fractions import gcd\n&gt;&gt;&gt; def rational(n, d):\n        g = gcd(n, d)\n        return (n//g, d//g)\n</code></pre></p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#223","title":"2.2.3 \u62bd\u8c61\u5c4f\u969c","text":"<p>\u6570\u636e\u62bd\u8c61: \u7528\u4e00\u7ec4\u57fa\u672c\u64cd\u4f5c\u6765\u64cd\u4f5c\u6570\u636e\u3002 avbstraction barrier the best: <pre><code>&gt;&gt;&gt; def square_rational(x):\n    return mul_rational(x, x)\n</code></pre></p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#224","title":"2.2.4 \u6570\u636e\u7684\u5c5e\u6027","text":"<p>\u76f8\u5f53\u4e8e\u81ea\u5df1\u5199\u4e00\u4e2a\u6570\u636e\u7ed3\u6784: <pre><code>&gt;&gt;&gt; def pair(x, y):\n        \"\"\"Return a function that represents a pair.\"\"\"\n        def get(index):\n            if index == 0:\n                return x\n            elif index == 1:\n                return y\n        return get\n\n&gt;&gt;&gt; def select(p, i):\n        \"\"\"Return the element at index i of pair p.\"\"\"\n        return p(i)\n\n&gt;&gt;&gt; p = pair(20, 14)\n&gt;&gt;&gt; select(p, 0)\n20\n&gt;&gt;&gt; select(p, 1)\n14\n</code></pre></p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#23","title":"2.3 \u5e8f\u5217","text":"<ul> <li>sequence<ul> <li>Length</li> <li>Element selection</li> </ul> </li> </ul>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#231-list","title":"2.3.1 list","text":""},{"location":"cs61a/COMPOSING%20PROGRAMS/#232","title":"2.3.2 \u5e8f\u5217\u904d\u5386","text":"<p><pre><code>for &lt;name&gt; in &lt;expression&gt;:\n    &lt;suite&gt;\n</code></pre> the expression must produce an iterable object sequence unpacking <pre><code>&gt;&gt;&gt; pairs = [[1, 2], [2, 2], [2, 3], [4, 4]]\n&gt;&gt;&gt; same_count = 0\n&gt;&gt;&gt; for x, y in pairs:\n        if x == y:\n            same_count = same_count + 1\n&gt;&gt;&gt; same_count\n2\n</code></pre> range</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#233","title":"2.3.3 \u5e8f\u5217\u5904\u7406","text":"<p>list comprehensions <pre><code>&gt;&gt;&gt; odds = [1, 3, 5, 7, 9]\n&gt;&gt;&gt; [x+1 for x in odds]\n[2, 4, 6, 8, 10]\n[&lt;map expression&gt; for &lt;name&gt; in &lt;sequence expression&gt; if &lt;filter expression&gt;]\n</code></pre> - Aggregation \u5c31\u662f\u7f29\u5e76\u5566     - sum     - min     - max</p> <pre><code>&gt;&gt;&gt; def apply_to_all(map_fn, s):\n    return [map_fn(x) for x in s]\n&gt;&gt;&gt; def keep_if(filter_fn, s):\n    return [x for x in s if filter_fn(x)]\n# conventional names\n&gt;&gt;&gt; apply_to_all = lambda map_fn, s: list(map(map_fn, s))\n&gt;&gt;&gt; keep_if = lambda filter_fn, s: list(filter(filter_fn, s))\n</code></pre>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#234","title":"2.3.4 \u5e8f\u5217\u62bd\u8c61","text":"<ul> <li>Membership<ul> <li>in</li> <li>not in</li> </ul> </li> <li>Slicing</li> </ul>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#235","title":"2.3.5 \u5b57\u7b26\u4e32","text":"<p>string \u6ca1\u6709\u5b57\u7b26\u7c7b\u578b - Membership - Multiline Literals - String Coercion more on Dive Into Python 3\u00a0\u7684\u00a0\u5b57\u7b26\u4e32\u7ae0\u8282\u00a0\u63d0\u4f9b\u4e86\u5b57\u7b26\u7f16\u7801\u548c Unicode \u7684\u63cf\u8ff0</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#236","title":"2.3.6 \u6811","text":"<p>closure property bax-and-pointer notation - root label - branch - leaf: the tree without branch - node tree-recursive \u4e24\u4e2a\u4f8b\u5b50: <pre><code>&gt;&gt;&gt; def fib_tree(n):\n        if n == 0 or n == 1:\n            return tree(n)\n        else:\n            left, right = fib_tree(n-2), fib_tree(n-1)\n            fib_n = label(left) + label(right)\n            return tree(fib_n, [left, right])\n&gt;&gt;&gt; fib_tree(5)\n[5, [2, [1], [1, [0], [1]]], [3, [1, [0], [1]], [2, [1], [1, [0], [1]]]]]\n</code></pre> <pre><code>&gt;&gt;&gt; def count_leaves(tree):\n      if is_leaf(tree):\n          return 1\n      else:\n          branch_counts = [count_leaves(b) for b in branches(tree)]\n          return sum(branch_counts)\n&gt;&gt;&gt; count_leaves(fib_tree(5))\n8\n</code></pre> Partition trees <pre><code>&gt;&gt;&gt; def print_parts(tree, partition=[]):\n        if is_leaf(tree):\n            if label(tree):\n                print(' + '.join(partition))\n        else:\n            left, right = branches(tree)\n            m = str(label(tree))\n            print_parts(left, partition + [m])\n            print_parts(right, partition)\n\n&gt;&gt;&gt; print_parts(partition_tree(6, 4))\n4 + 2\n4 + 1 + 1\n3 + 3\n3 + 2 + 1\n3 + 1 + 1 + 1\n2 + 2 + 2\n2 + 2 + 1 + 1\n2 + 1 + 1 + 1 + 1\n1 + 1 + 1 + 1 + 1 + 1\n</code></pre></p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#237","title":"2.3.7 \u94fe\u8868","text":"<p>linked list abstract data reprensentation <pre><code>&gt;&gt;&gt; def partitions(n, m):\n\"\"\"\u8fd4\u56de\u4e00\u4e2a\u5305\u542b n \u7684\u5206\u5272\u65b9\u6848\u7684\u94fe\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a\u6b63\u6574\u6570\u4e0d\u8d85\u8fc7 m\"\"\"\nif n == 0:\n    return link(empty, empty) # \u5305\u542b\u7a7a\u5206\u5272\u7684\u94fe\u8868\nelif n &lt; 0 or m == 0:\n    return empty\nelse:\n    using_m = partitions(n-m, m)\n    with_m = apply_to_all_link(lambda s: link(m, s), using_m)\n    without_m = partitions(n, m-1)\n    return extend_link(with_m, without_m)\n\n&gt;&gt;&gt; def print_partitions(n, m):\n        lists = partitions(n, m)\n        strings = apply_to_all_link(lambda s: join_link(s, \" + \"), lists)\n        print(join_link(strings, \"\\n\"))\n\n&gt;&gt;&gt; print_partitions(6, 4)\n4 + 2\n4 + 1 + 1\n3 + 3\n3 + 2 + 1\n3 + 1 + 1 + 1\n2 + 2 + 2\n2 + 2 + 1 + 1\n2 + 1 + 1 + 1 + 1\n1 + 1 + 1 + 1 + 1 + 1\n</code></pre></p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#24","title":"2.4 \u53ef\u53d8\u6570\u636e","text":"<p>object-oriented programming</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#241","title":"2.4.1 \u5bf9\u8c61\u9690\u55bb","text":"<ul> <li>attributes</li> <li>mehod</li> </ul>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#242","title":"2.4.2 \u5e8f\u5217\u5bf9\u8c61","text":"<p>mutable Sharing and Identity \u5217\u8868\u63a8\u5bfc\u5f0f: <pre><code>&gt;&gt;&gt; from unicodedata import lookup\n&gt;&gt;&gt; [lookup('WHITE ' + s.upper() + ' SUIT') for s in suits]\n['\u2661', '\u2662', '\u2664', '\u2667']\n</code></pre> tuple</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#243","title":"2.4.3 \u5b57\u5178","text":"<p>key-value pairs</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#244","title":"2.4.4 \u5c40\u90e8\u72b6\u6001","text":"<p>local state <pre><code>&gt;&gt;&gt; def make_withdraw(balance):\n\"\"\"\u8fd4\u56de\u4e00\u4e2a\u6bcf\u6b21\u8c03\u7528\u90fd\u4f1a\u51cf\u5c11 balance \u7684 withdraw \u51fd\u6570\"\"\"\ndef withdraw(amount):\n    nonlocal balance                 # \u58f0\u660e balance \u662f\u975e\u5c40\u90e8\u7684\n    if amount &gt; balance:\n        return '\u4f59\u989d\u4e0d\u8db3'\n    balance = balance - amount       # \u91cd\u65b0\u7ed1\u5b9a\n    return balance\nreturn withdraw\n</code></pre> Python Particulars</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#245-non-local","title":"2.4.5 \u975e\u5c40\u90e8 Non-local \u8d4b\u503c\u7684\u597d\u5904","text":"<p>\u8fd9\u6837\uff0c\u6bcf\u4e2a withdraw \u5b9e\u4f8b\u90fd\u4fdd\u6301\u81ea\u5df1\u7684 balance \u72b6\u6001\uff0c\u4f46\u7a0b\u5e8f\u4e2d\u7684\u4efb\u4f55\u5176\u4ed6\u51fd\u6570\u90fd\u65e0\u6cd5\u8bbf\u95ee\u8be5\u72b6\u6001\u3002\u4ece\u66f4\u9ad8\u7684\u5c42\u9762\u6765\u770b\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u62bd\u8c61\u4e86\u4e00\u4e2a\u94f6\u884c\u8d26\u6237\uff0c\u5b83\u81ea\u5df1\u7ba1\u7406\u81ea\u5df1\u7684\u72b6\u6001\uff0c\u5176\u884c\u4e3a\u65b9\u5f0f\u4e0e\u4e16\u754c\u4e0a\u6240\u6709\u5176\u5b83\u8d26\u6237\u4e00\u6837\uff1a\u968f\u7740\u65f6\u95f4\u63a8\u79fb\uff0c\u8d26\u6237\u7684\u72b6\u6001\u4f1a\u6839\u636e\u8d26\u6237\u7684\u53d6\u6b3e\u8bb0\u5f55\u800c\u53d1\u751f\u53d8\u5316\u3002</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#246-non-local","title":"2.4.6 \u975e\u5c40\u90e8 Non-local \u8d4b\u503c\u7684\u4ee3\u4ef7","text":"<p>\u6b63\u786e\u7406\u89e3\u5305\u542b nonlocal \u58f0\u660e\u7684\u4ee3\u7801\u7684\u5173\u952e\u662f\u8bb0\u4f4f\uff1a\u53ea\u6709\u51fd\u6570\u8c03\u7528\u624d\u80fd\u5f15\u5165\u65b0\u5e27\u3002\u8d4b\u503c\u8bed\u53e5\u53ea\u80fd\u66f4\u6539\u73b0\u6709\u5e27\u4e2d\u7684\u7ed1\u5b9a\u5173\u7cfb\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u9664\u975e make_withdraw \u88ab\u8c03\u7528\u4e24\u6b21\uff0c\u5426\u5219\u53ea\u80fd\u6709\u4e00\u4e2a balance \u7ed1\u5b9a\u3002 Sameness and change referentially transparent</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#247","title":"2.4.7 \u5217\u8868\u548c\u5b57\u5178\u5b9e\u73b0","text":"<p>\u51fd\u6570\u662f\u4e00\u4e2a dispatch \uff08\u8c03\u5ea6\uff09\u51fd\u6570\uff0c\u5176\u53c2\u6570\u9996\u5148\u662f\u4e00\u4e2a\u671f\u671b\u7684\u6307\u4ee4\uff0c\u4ee3\u8868\u671f\u671b\u8fd9\u4e2a\u51fd\u6570\u505a\u4ec0\u4e48\uff1b\u7136\u540e\u662f\u8be5\u65b9\u6cd5\u7684\u9700\u8981\u7528\u5230\u7684\u53c2\u6570\u3002\u6b64\u6307\u4ee4\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7528\u4e8e\u547d\u540d\u51fd\u6570\u5e94\u6267\u884c\u7684\u64cd\u4f5c\u3002\u53ef\u4ee5\u5c06\u8fd9\u4e2a dispatch \u51fd\u6570\u7406\u89e3\u4e3a\u591a\u4e2a\u4e0d\u540c\u51fd\u6570\u7684\u62bd\u8c61\uff1a\u7b2c\u4e00\u4e2a\u53c2\u6570\u786e\u5b9a\u76ee\u6807\u51fd\u6570\u7684\u884c\u4e3a\uff0c\u5e76\u4e3a\u8be5\u884c\u4e3a\u5165\u53c2\u5176\u4ed6\u53c2\u6570\u3002     \u7528\u5b57\u7b26\u4e32\u4e5f\u592a\u9006\u5929\u4e86\u3002 <pre><code>&gt;&gt;&gt; def mutable_link():\n\"\"\"\u8fd4\u56de\u4e00\u4e2a\u53ef\u53d8\u94fe\u8868\u7684\u51fd\u6570\"\"\"\ncontents = empty\ndef dispatch(message, value=None):\n    nonlocal contents\n    if message == 'len':\n        return len_link(contents)\n    elif message == 'getitem':\n        return getitem_link(contents, value)\n    elif message == 'push_first':\n        contents = link(value, contents)\n    elif message == 'pop_first':\n        f = first(contents)\n        contents = rest(contents)\n        return f\n    elif message == 'str':\n        return join_link(contents, \", \")\nreturn dispatch\n\n&gt;&gt;&gt; def to_mutable_link(source):\n\"\"\"\u8fd4\u56de\u4e00\u4e2a\u4e0e\u539f\u5217\u8868\u76f8\u540c\u5185\u5bb9\u7684\u51fd\u6570\u5217\u8868\"\"\"\ns = mutable_link()\nfor element in reversed(source):\n    s('push_first', element)\nreturn s\n\n&gt;&gt;&gt; s = to_mutable_link(suits)\n&gt;&gt;&gt; type(s)\n&lt;class 'function'&gt;\n&gt;&gt;&gt; print(s('str'))\nheart, diamond, spade, club\n</code></pre> \u5b57\u5178\u5b9e\u73b0: <pre><code>&gt;&gt;&gt; def dictionary():\n\"\"\"\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\u7684\u51fd\u6570\u5b9e\u73b0\"\"\"\nrecords = []\ndef getitem(key):\n    matches = [r for r in records if r[0] == key]\n    if len(matches) == 1:\n        key, value = matches[0]\n        return value\ndef setitem(key, value):\n    nonlocal records\n    non_matches = [r for r in records if r[0] != key]\n    records = non_matches + [[key, value]]\ndef dispatch(message, key=None, value=None):\n    if message == 'getitem':\n        return getitem(key)\n    elif message == 'setitem':\n        setitem(key, value)\nreturn dispatch\n</code></pre></p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#248-dispatch-dictionaries","title":"2.4.8 \u8c03\u5ea6\u5b57\u5178\uff08Dispatch Dictionaries\uff09","text":"<p>\u7528\u5b57\u5178\u5b58\u50a8\u6d88\u606f\u3002</p> <pre><code>def account(initial_balance):\n    def deposit(amount):\n        dispatch['balance'] += amount\n        return dispatch['balance']\n    def withdraw(amount):\n        if amount &gt; dispatch['balance']:\n            return 'Insufficient funds'\n        dispatch['balance'] -= amount\n        return dispatch['balance']\n    dispatch = {'deposit':   deposit,\n                'withdraw':  withdraw,\n                'balance':   initial_balance}\n    return dispatch\n\ndef withdraw(account, amount):\n    return account['withdraw'](amount)\ndef deposit(account, amount):\n    return account['deposit'](amount)\ndef check_balance(account):\n    return account['balance']\n\na = account(20)\ndeposit(a, 5)\nwithdraw(a, 17)\ncheck_balance(a)\n</code></pre>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#249-propagating-constraints","title":"2.4.9 \u7ea6\u675f\u4f20\u9012 (Propagating\u00a0Constraints)","text":"<p>connector Using the Constraint System <pre><code>&gt;&gt;&gt; celsius = connector('Celsius')\n&gt;&gt;&gt; fahrenheit = connector('Fahrenheit')\n&gt;&gt;&gt; def converter(c, f):\n    \"\"\"\u7528\u7ea6\u675f\u6761\u4ef6\u8fde\u63a5 c \u5230 f\uff0c\u5c06\u6444\u6c0f\u5ea6\u8f6c\u6362\u4e3a\u534e\u6c0f\u5ea6.\"\"\"\n    u, v, w, x, y = [connector() for _ in range(5)]\n    multiplier(c, w, u)\n    multiplier(v, x, u)\n    adder(v, y, f)\n    constant(w, 9)\n    constant(x, 5)\n    constant(y, 32)\n&gt;&gt;&gt; converter(celsius, fahrenheit)\n\n&gt;&gt;&gt; celsius['set_val']('user', 25)\nCelsius = 25\nFahrenheit = 77.0\n\n&gt;&gt;&gt; fahrenheit['set_val']('user', 212)\nContradiction detected: 77.0 vs 212\n\n&gt;&gt;&gt; celsius['forget']('user')\nCelsius is forgotten\nFahrenheit is forgotten\n\n&gt;&gt;&gt; fahrenheit['set_val']('user', 212)\nFahrenheit = 212\nCelsius = 100.0\n\n# Implementing the Constraint System\n&gt;&gt;&gt; connector ['set_val'](source, value)  \"\"\"\u8868\u793a\u00a0source\u00a0\u5728\u8bf7\u6c42\u8fde\u63a5\u5668\u5c06\u5f53\u524d\u503c\u8bbe\u4e3a value\"\"\"\n&gt;&gt;&gt; connector ['has_val']()\u00a0 \"\"\"\u8fd4\u56de\u8fde\u63a5\u5668\u662f\u5426\u5df2\u7ecf\u5177\u6709\u503c\"\"\"\n&gt;&gt;&gt; connector ['val']  \"\"\"\u662f\u8fde\u63a5\u5668\u7684\u5f53\u524d\u503c\"\"\"\n&gt;&gt;&gt; connector ['forget'](source)\u00a0 \"\"\"\u544a\u8bc9\u8fde\u63a5\u5668 source \u8bf7\u6c42\u9057\u5fd8\u5b83\u7684\u503c\"\"\"\n&gt;&gt;&gt; connector ['connect'](source)\u00a0 \"\"\"\u544a\u8bc9\u8fde\u63a5\u5668\u53c2\u4e0e\u65b0\u7684\u7ea6\u675f\uff0c\u5373 source\"\"\"\n&gt;&gt;&gt; constraint['new_val']()  \"\"\"\u8868\u793a\u4e0e\u7ea6\u675f\u76f8\u8fde\u7684\u67d0\u4e2a\u8fde\u63a5\u5668\u5177\u6709\u65b0\u7684\u503c\u3002\"\"\"\n&gt;&gt;&gt; constraint['forget']()\u00a0 \"\"\"\u8868\u793a\u4e0e\u7ea6\u675f\u76f8\u8fde\u7684\u67d0\u4e2a\u8fde\u63a5\u5668\u9057\u5fd8\u4e86\u503c\u3002\"\"\"\n\n&gt;&gt;&gt; from operator import add, sub\n&gt;&gt;&gt; def adder(a, b, c):\n        \"\"\"\u7ea6\u675f a+b=c\"\"\"\n        return make_ternary_constraint(a, b, c, add, sub, sub)\n\n&gt;&gt;&gt; def make_ternary_constraint(a, b, c, ab, ca, cb):\n    \"\"\"\u7ea6\u675f ab(a,b)=c\uff0cca(c,a)=b\uff0ccb(c,b)=a\"\"\"\n    def new_value():\n        av, bv, cv = [connector['has_val']() for connector in (a, b, c)]\n        if av and bv:\n            c['set_val'](constraint, ab(a['val'], b['val']))\n        elif av and cv:\n            b['set_val'](constraint, ca(c['val'], a['val']))\n        elif bv and cv:\n            a['set_val'](constraint, cb(c['val'], b['val']))\n    def forget_value():\n        for connector in (a, b, c):\n            connector['forget'](constraint)\n    constraint = {'new_val': new_value, 'forget': forget_value}\n    for connector in (a, b, c):\n        connector['connect'](constraint)\n    return constraint\n\n&gt;&gt;&gt; from operator import mul, truediv\n&gt;&gt;&gt; def multiplier(a, b, c):\n        \"\"\"\u7ea6\u675f a*b=c\"\"\"\n        return make_ternary_constraint(a, b, c, mul, truediv, truediv)\n\n&gt;&gt;&gt; def constant(connector, value):\n    \"\"\"\u5e38\u91cf\u8d4b\u503c\"\"\"\n    constraint = {}\n    connector['set_val'](constraint, value)\n    return constraint\n\n# Representing connectors\n&gt;&gt;&gt; def connector(name=None):\n    \"\"\"\u9650\u5236\u6761\u4ef6\u4e4b\u95f4\u7684\u8fde\u63a5\u5668\"\"\"\n    informant = None\n    constraints = []\n    def set_value(source, value):\n        nonlocal informant\n        val = connector['val']\n        if val is None:\n            informant, connector['val'] = source, value\n            if name is not None:\n                print(name, '=', value)\n            inform_all_except(source, 'new_val', constraints)\n        else:\n            if val != value:\n                print('Contradiction detected:', val, 'vs', value)\n    def forget_value(source):\n        nonlocal informant\n        if informant == source:\n            informant, connector['val'] = None, None\n            if name is not None:\n                print(name, 'is forgotten')\n            inform_all_except(source, 'forget', constraints)\n    connector = {'val': None,\n                 'set_val': set_value,\n                 'forget': forget_value,\n                 'has_val': lambda: connector['val'] is not None,\n                 'connect': lambda source: constraints.append(source)}\n    return connector\n\n&gt;&gt;&gt; def inform_all_except(source, message, constraints):\n    \"\"\"\u544a\u77e5\u4fe1\u606f\u9664\u4e86 source \u5916\u7684\u6240\u6709\u7ea6\u675f\u6761\u4ef6\"\"\"\n    for c in constraints:\n        if c != source:\n            c[message]()\n</code></pre></p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#25","title":"2.5 \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b","text":"<ul> <li>object</li> <li>dot notation</li> <li>class</li> </ul>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#251","title":"2.5.1 \u5bf9\u8c61\u548c\u7c7b","text":""},{"location":"cs61a/COMPOSING%20PROGRAMS/#252","title":"2.5.2 \u7c7b\u7684\u5b9a\u4e49","text":"<p>__init__\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff08constructor\uff09 <pre><code>&gt;&gt;&gt; class Account:\n        def __init__(self, account_holder):\n            self.balance = 0\n            self.holder = account_holder\n        def deposit(self, amount):\n            self.balance = self.balance + amount\n            return self.balance\n        def withdraw(self, amount):\n            if amount &gt; self.balance:\n                return 'Insufficient funds'\n            self.balance = self.balance - amount\n            return self.balance\n</code></pre></p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#253","title":"2.5.3 \u6d88\u606f\u4f20\u9012\u548c\u70b9\u8868\u8fbe\u5f0f","text":"<p><pre><code>&gt;&gt;&gt; getattr(spock_account, 'balance')\n10\n&gt;&gt;&gt; hasattr(spock_account, 'deposit')\nTrue\n\n\n&gt;&gt;&gt; type(Account.deposit)\n&lt;class 'Function'&gt;\n&gt;&gt;&gt; type(spock_account.deposit)\n&lt;class 'method'&gt;\n# \u4e3a\u7c7b\u7684\u5c5e\u6027\uff0c\u65b9\u6cd5\u53ea\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u4f46\u4f5c\u4e3a\u5b9e\u4f8b\u7684\u5c5e\u6027\uff0c\u5b83\u662f\u4e00\u4e2a\u7ed1\u5b9a\u65b9\u6cd5\n\n&gt;&gt;&gt; Account.deposit(spock_account, 1001)    # \u51fd\u6570 deposit \u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\n1011\n&gt;&gt;&gt; spock_account.deposit(1000)             # \u65b9\u6cd5 deposit \u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\n2011\n</code></pre> \u547d\u540d\u7ea6\u5b9a\uff1a\u7c7b\u540d\u901a\u5e38\u4f7f\u7528 CapWords \u7ea6\u5b9a\uff08\u4e5f\u79f0\u4e3a CamelCase\uff0c\u56e0\u4e3a\u540d\u79f0\u4e2d\u95f4\u7684\u5927\u5199\u5b57\u6bcd\u770b\u8d77\u6765\u50cf\u9a7c\u5cf0\uff09\u7f16\u5199\u3002\u65b9\u6cd5\u540d\u79f0\u9075\u5faa\u4f7f\u7528\u4e0b\u5212\u7ebf\u5206\u9694\u7684\u5c0f\u5199\u5355\u8bcd\u547d\u540d\u51fd\u6570\u7684\u6807\u51c6\u7ea6\u5b9a\u3002</p> <p>\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6709\u4e00\u4e9b\u5b9e\u4f8b\u53d8\u91cf\u548c\u65b9\u6cd5\u4e0e\u5bf9\u8c61\u7684\u7ef4\u62a4\u548c\u4e00\u81f4\u6027\u76f8\u5173\uff0c\u6211\u4eec\u4e0d\u5e0c\u671b\u5bf9\u8c61\u7684\u7528\u6237\u770b\u5230\u6216\u4f7f\u7528\u3002\u5b83\u4eec\u4e0d\u662f\u7c7b\u5b9a\u4e49\u7684\u62bd\u8c61\u7684\u4e00\u90e8\u5206\uff0c\u800c\u662f\u5b9e\u73b0\u7684\u4e00\u90e8\u5206\u3002Python \u7684\u7ea6\u5b9a\u89c4\u5b9a\uff0c\u5982\u679c\u5c5e\u6027\u540d\u79f0\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u5219\u53ea\u80fd\u5728\u7c7b\u672c\u8eab\u7684\u65b9\u6cd5\u4e2d\u8bbf\u95ee\u5b83\uff0c\u800c\u4e0d\u662f\u7528\u6237\u8bbf\u95ee\u3002</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#254","title":"2.5.4 \u7c7b\u5c5e\u6027","text":"<p>\u611f\u89c9\u6ca1\u4ec0\u4e48\u7528: <pre><code>&gt;&gt;&gt; Account.interest = 0.05     # \u6539\u53d8\u7c7b\u5c5e\u6027\n&gt;&gt;&gt; spock_account.interest      # \u5b9e\u4f8b\u5c5e\u6027\u53d1\u751f\u53d8\u5316\uff08\u8be5\u5b9e\u4f8b\u4e2d\u6ca1\u6709\u548c\u7c7b\u5c5e\u6027\u540c\u540d\u79f0\u7684\u5b9e\u4f8b\u5c5e\u6027\uff09\n0.05\n&gt;&gt;&gt; kirk_account.interest       # \u5982\u679c\u5b9e\u4f8b\u4e2d\u5b58\u5728\u548c\u7c7b\u5c5e\u6027\u540c\u540d\u7684\u5b9e\u4f8b\u5c5e\u6027\uff0c\u5219\u6539\u53d8\u7c7b\u5c5e\u6027\uff0c\u4e0d\u4f1a\u5f71\u54cd\u5b9e\u4f8b\u5c5e\u6027\n0.08\n</code></pre></p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#255","title":"2.5.5 \u7ee7\u627f","text":"<ul> <li>base class<ul> <li>parent class</li> <li>super class</li> </ul> </li> <li>subcladd<ul> <li>child class</li> </ul> </li> </ul>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#256","title":"2.5.6 \u4f7f\u7528\u7ee7\u627f","text":"<p><pre><code>&gt;&gt;&gt; class Account:\n        \"\"\"\u4e00\u4e2a\u4f59\u989d\u975e\u96f6\u7684\u8d26\u6237\u3002\"\"\"\n        interest = 0.02\n        def __init__(self, account_holder):\n            self.balance = 0\n            self.holder = account_holder\n        def deposit(self, amount):\n            \"\"\"\u5b58\u5165\u8d26\u6237 amount\uff0c\u5e76\u8fd4\u56de\u53d8\u5316\u540e\u7684\u4f59\u989d\"\"\"\n            self.balance = self.balance + amount\n            return self.balance\n        def withdraw(self, amount):\n            \"\"\"\u4ece\u8d26\u53f7\u4e2d\u53d6\u51fa amount\uff0c\u5e76\u8fd4\u56de\u53d8\u5316\u540e\u7684\u4f59\u989d\"\"\"\n            if amount &gt; self.balance:\n                return 'Insufficient funds'\n            self.balance = self.balance - amount\n            return self.balance\n\n&gt;&gt;&gt; class CheckingAccount(Account):\n        \"\"\"\u4ece\u8d26\u53f7\u53d6\u94b1\u4f1a\u6263\u51fa\u624b\u7eed\u8d39\u7684\u8d26\u53f7\"\"\"\n           withdraw_charge = 1\n           interest = 0.01\n           def withdraw(self, amount):\n                 return Account.withdraw(self, amount + self.withdraw_charge)\n</code></pre> \u63a5\u53e3 <pre><code>&gt;&gt;&gt; def deposit_all(winners, amount=5):\n        for account in winners:\n            account.deposit(amount)         # \u8fd9\u91cc\u8c03\u7528\u7684\u662f\u5b9e\u4f8b account \u7684 deposit \u65b9\u6cd5\n            # \u5bf9\u4e8e\u4e0d\u540c\u5b9e\u4f8b\u6765\u8bf4\uff0c\u5b83\u4eec\u7684 deposit \u65b9\u6cd5\u53ef\u80fd\u4e0d\u540c\u3002\u8fd9\u4e2a\u4f8b\u5b50\u76f8\u5bf9\u4e8e\u4e0b\u9762\u6765\u8bb2\uff0c\u66f4\u52a0\u5177\u6709\u5065\u58ee\u6027\n</code></pre></p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#257","title":"2.5.7 \u591a\u7ee7\u627f","text":"<p>\u7ee7\u627f\u6392\u5e8f\u95ee\u9898\u6ca1\u6709\u6b63\u786e\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u56e0\u4e3a\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u80fd\u66f4\u613f\u610f\u5c06\u67d0\u4e9b\u7ee7\u627f\u7c7b\u7f6e\u4e8e\u5176\u4ed6\u7c7b\u4e4b\u4e0a\u3002\u4f46\u662f\uff0c\u4efb\u4f55\u652f\u6301\u591a\u91cd\u7ee7\u627f\u7684\u7f16\u7a0b\u8bed\u8a00\u90fd\u5fc5\u987b\u4ee5\u4e00\u81f4\u7684\u65b9\u5f0f\u9009\u62e9\u67d0\u4e9b\u6392\u5e8f\uff0c\u4ee5\u4fbf\u8be5\u8bed\u8a00\u7684\u7528\u6237\u53ef\u4ee5\u9884\u6d4b\u5176\u7a0b\u5e8f\u7684\u884c\u4e3a\u3002</p> <p>\u8fdb\u4e00\u6b65\u9605\u8bfb\u3002Python \u4f7f\u7528\u79f0\u4e3a C3 \u65b9\u6cd5\u89e3\u6790\u6392\u5e8f\u7684\u9012\u5f52\u7b97\u6cd5\u89e3\u6790\u6b64\u540d\u79f0\u3002\u53ef\u4ee5\u5728\u6240\u6709\u7c7b\u4e0a\u4f7f\u7528\u00a0<code>mro</code>\u00a0\u65b9\u6cd5\u67e5\u8be2\u4efb\u4f55\u7c7b\u7684\u65b9\u6cd5\u89e3\u6790\u987a\u5e8f\u3002 <pre><code>&gt;&gt;&gt; [c.__name__ for c in AsSeenOnTVAccount.mro()]\n['AsSeenOnTVAccount', 'CheckingAccount', 'SavingsAccount', 'Account', 'object']\n</code></pre></p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#258","title":"2.5.8 \u5bf9\u8c61\u7684\u4f5c\u7528","text":"<p>\u53e6\u4e00\u65b9\u9762\uff0c\u7c7b\u53ef\u80fd\u4e0d\u662f\u5b9e\u73b0\u67d0\u4e9b\u62bd\u8c61\u7684\u6700\u4f73\u673a\u5236\u3002\u51fd\u6570\u5f0f\u62bd\u8c61\u63d0\u4f9b\u4e86\u4e00\u4e2a\u66f4\u81ea\u7136\u7684\u9690\u55bb\u6765\u8868\u793a\u8f93\u5165\u548c\u8f93\u51fa\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u6211\u4eec\u4e0d\u5e94\u8be5\u89c9\u5f97\u5fc5\u987b\u5c06\u7a0b\u5e8f\u4e2d\u7684\u6bcf\u4e00\u70b9\u903b\u8f91\u90fd\u585e\u8fdb\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u5c24\u5176\u662f\u5728\u5b9a\u4e49\u72ec\u7acb\u51fd\u6570\u6765\u64cd\u4f5c\u6570\u636e\u66f4\u81ea\u7136\u7684\u60c5\u51b5\u4e0b\u3002\u51fd\u6570\u8fd8\u53ef\u4ee5\u5f3a\u5236\u5b9e\u73b0\u5173\u6ce8\u70b9\u7684\u5206\u79bb\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u51fd\u6570\u5f0f\u7f16\u7a0b\u63d0\u4f9b\u4e86\u53e6\u4e00\u79cd\u6709\u6548\u5730\u7ec4\u7ec7\u7a0b\u5e8f\u903b\u8f91\u7684\u65b9\u6cd5\uff0c\u4f7f\u5f97\u7a0b\u5e8f\u5458\u80fd\u591f\u66f4\u597d\u5730\u5904\u7406\u548c\u7ef4\u62a4\u7a0b\u5e8f\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u51fd\u6570\u5f0f\u7f16\u7a0b\u65b9\u6cd5\u53ef\u80fd\u6bd4\u4f7f\u7528\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u66f4\u81ea\u7136\u548c\u6709\u6548\u3002</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#26","title":"2.6 \u5b9e\u73b0\u7c7b\u548c\u5bf9\u8c61","text":"<p>object-oriented programming paradigm \u5373\u4f7f\u5728\u6ca1\u6709\u5185\u7f6e\u5bf9\u8c61\u7cfb\u7edf\u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u662f\u9762\u5411\u5bf9\u8c61\u7684\u3002 \u653e\u5f03\u70b9\u8868\u793a\u6cd5-&gt;\u8c03\u5ea6\u5b57\u5178\u5b9e\u73b0\u6d88\u606f\u4f20\u9012</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#261","title":"2.6.1 \u5b9e\u4f8b","text":"<pre><code>&gt;&gt;&gt; def make_instance(cls):\n    \"\"\"Return a new object instance, which is a dispatch dictionary.\"\"\"\n    def get_value(name):\n        if name in attributes:\n            return attributes[name]\n        else:\n            value = cls['get'](name)\n            return bind_method(value, instance)\n    def set_value(name, value):\n        attributes[name] = value\n    attributes = {}\n    instance = {'get': get_value, 'set': set_value}\n    return instance\n\n&gt;&gt;&gt; def bind_method(value, instance):\n    \"\"\"Return a bound method if value is callable, or value otherwise.\"\"\"\n    if callable(value):\n        def method(*args):\n            return value(instance, *args)\n        return method\n    else:\n        return value\n</code></pre>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#262","title":"2.6.2 \u7c7b","text":"<pre><code>&gt;&gt;&gt; def make_class(attributes, base_class=None):\n    \"\"\"Return a new class, which is a dispatch dictionary.\"\"\"\n    def get_value(name):\n        if name in attributes:\n            return attributes[name]\n        elif base_class is not None:\n            return base_class['get'](name)\n    def set_value(name, value):\n        attributes[name] = value\n    def new(*args):\n        return init_instance(cls, *args)\n    cls = {'get': get_value, 'set': set_value, 'new': new}\n    return cls\n\n&gt;&gt;&gt; def init_instance(cls, *args):\n    \"\"\"Return a new object with type cls, initialized with args.\"\"\"\n    instance = make_instance(cls)\n    init = cls['get']('__init__')\n    if init:\n        init(instance, *args)\n    return instance\n</code></pre>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#3","title":"3 \u8ba1\u7b97\u673a\u7a0b\u5e8f\u7684\u89e3\u91ca","text":""},{"location":"cs61a/COMPOSING%20PROGRAMS/#31","title":"3.1 \u5f15\u8a00","text":"<p>\u8bb8\u591a\u89e3\u91ca\u5668\u90fd\u6709\u4e00\u4e2a\u4f18\u96c5\u7684\u7ed3\u6784\uff0c\u5373\u4e24\u4e2a\u4e92\u9012\u5f52\u51fd\u6570\uff1a * \u7b2c\u4e00\u4e2a\u51fd\u6570\u6c42\u89e3\u73af\u5883\u4e2d\u7684\u8868\u8fbe\u5f0f * \u7b2c\u4e8c\u4e2a\u51fd\u6570\u5c06\u51fd\u6570\u5e94\u7528\u4e8e\u53c2\u6570</p>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#32","title":"3.2 \u51fd\u6570\u5f0f\u7f16\u7a0b","text":"<ul> <li>\u53ea\u4f7f\u7528\u8868\u8fbe\u5f0f\u800c\u4e0d\u4f7f\u7528\u8bed\u53e5\uff0c\u7279\u522b\u9002\u5408\u7b26\u53f7\u8ba1\u7b97</li> <li>\u5904\u7406\u7684\u6570\u636e\u90fd\u662f\u4e0d\u53ef\u53d8\u7684\uff08immutable\uff09</li> </ul> <pre><code>(if &lt;predicate&gt; &lt;consequent&gt; &lt;alternative&gt;)\n\n(define pi 3.14)\n(* pi 3.14)\n\n(define (&lt;name&gt; &lt;formal parameters&gt;) &lt;body&gt;)\neg1:\n    (define (average x y)\n      (/ (+ x y) 2))\neg2:\n    (define (abs x)\n    (if (&lt; x 0)\n        (- x)\n        x))\neg3:\n    (define (sqrt x)\n      (define (good-enough? guess)\n        (&lt; (abs (- (square guess) x)) 0.001))\n      (define (improve guess)\n        (average guess (/ x guess)))\n      (define (sqrt-iter guess)\n        (if (good-enough? guess)\n            guess\n            (sqrt-iter (improve guess))))\n      (sqrt-iter 1.0))\n    (sqrt 9)\n\n(lambda (&lt;formal-parameters&gt;) &lt;body&gt;)\neg1:\n    (define (plus4 x) (+ x 4))\n    (define plus4 (lambda (x) (+ x 4))) # both are OK\n\n# \u7279\u6b8a\u7684\u503c\u00a0nil\u00a0\u6216\u00a0'()\u00a0\u8868\u793a\u7a7a\u5217\u8868\n\n# null? \u8c13\u8bcd\u7684\u4f7f\u7528:\n    (define (length items)\n      (if (null? items)\n          0\n          (+ 1 (length (cdr items)))))\n    (define (getitem items n)\n      (if (= n 0)\n          (car items)\n          (getitem (cdr items) (- n 1))))\n    (define squares (list 1 4 9 16 25))\n\n    (length squares)\n\n    (getitem squares 3)\n\n# \u4efb\u4f55\u4e0d\u88ab\u6c42\u503c\u7684\u8868\u8fbe\u5f0f\u90fd\u88ab\u79f0\u4e3a\u88ab\u5f15\u7528\n    (list 'define 'list)\n\n# turtle\u4f7f\u7528+\u9012\u5f52\u753b\u56fe\n</code></pre>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#33","title":"3.3 \u5f02\u5e38","text":"<ul> <li>raise</li> <li>assert <pre><code>&gt;&gt;&gt; raise Exception(' An error occurred')\nTraceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nException: an error occurred\n</code></pre></li> <li>raising an exception<ul> <li>read-eval-print-loop \u5373 REPL</li> <li>stack backtrace</li> </ul> </li> <li>handling exceptions <pre><code>try\n    &lt;try suite&gt;\nexcept &lt;exception class&gt; as &lt;name&gt;:\n    &lt;except suite&gt;\n</code></pre> \u5f02\u5e38\u662f\u4e2a\u7c7b\uff0c\u53ef\u4ee5\u6709\u989d\u5916\u7684\u5c5e\u6027\uff0c\u53ef\u4ee5\u907f\u514d\u62a5\u9519\uff0c\u8ba9\u7a0b\u5e8f\u7ed9\u51fa\u4e00\u4e2a\u8f83\u4e3a\u7c97\u7cd9\u7684\u503c\uff1a <pre><code>&gt;&gt;&gt; class IterImproveError(Exception):\n\u00a0\u00a0\u00a0     def __init__(self, last_guess):\n\u00a0\u00a0\u00a0         self.last_guess = last_guess\n&gt;&gt;&gt; def improve(update, done, guess=1, max_updates=1000):\n\u00a0\u00a0\u00a0     k = 0\n\u00a0\u00a0\u00a0     try:\n\u00a0\u00a0\u00a0         while not done(guess) and k &lt; max_updates:\n\u00a0\u00a0\u00a0             guess = update(guess)\n\u00a0\u00a0\u00a0             k = k + 1\n\u00a0\u00a0\u00a0         return guess\n\u00a0\u00a0\u00a0     except ValueError:\n\u00a0\u00a0\u00a0         raise IterImproveError(guess)\n&gt;&gt;&gt; def find_zero(f, guess=1):\n\u00a0\u00a0\u00a0     def done(x):\n\u00a0\u00a0\u00a0         return f(x) == 0\n\u00a0\u00a0\u00a0     try:\n\u00a0\u00a0\u00a0         return improve(newton_update(f), done, guess)\n\u00a0\u00a0\u00a0     except IterImproveError as e:\n\u00a0\u00a0\u00a0         return e.last_guess\n&gt;&gt;&gt; from math import sqrt\n&gt;&gt;&gt; find_zero(lambda x: 2*x*x + sqrt(x))\n-0.030211203830201594\n</code></pre></li> </ul>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#34","title":"3.4 \u7ec4\u5408\u8bed\u8a00\u7684\u89e3\u91ca\u5668","text":"<ul> <li>\u8ba1\u7b97\u5668\u8bed\u8a00 -&gt; \u7b80\u7565\u89e3\u91ca\u5668</li> <li>scheme \u5bf9<ul> <li>pair</li> <li>nil</li> </ul> </li> <li>\u8868\u8fbe\u5f0f\u6811</li> <li>\u89e3\u6790\u8868\u8fbe\u5f0f\u6811<ul> <li>\u8bcd\u6cd5\u5206\u6790\u5668\uff08lexical analyzer\uff09/ \u5206\u8bcd\u5668\uff08tokenizer\uff09<ul> <li>\u6807\u8bb0\uff08token\uff09</li> </ul> </li> <li>\u8bed\u6cd5\u5206\u6790\u5668\uff08syntactic analyzer\uff09<ul> <li>\u6570\u5b57\u548c\u8c03\u7528\u8868\u8fbe\u5f0f \u8bb2\u4e86\u4e00\u4e0b\u8ba1\u7b97\u5668\u89e3\u91ca\u5668\u4ea4\u4e92\u5f0f\u9875\u9762\u7684\u8868\u8fbe\u5f0f\u5982\u4f55\u8ba1\u7b97\u548c\u5f02\u5e38\u5904\u7406</li> </ul> </li> </ul> </li> </ul>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#35","title":"3.5 \u62bd\u8c61\u8bed\u8a00\u7684\u89e3\u91ca\u5668","text":"<ul> <li>\u6269\u5c55 scheme_reader \u89e3\u6790\u70b9\u5217\u8868\u548c\u5f15\u53f7</li> <li>\u6c42\u503c\uff08Evaluation\uff09</li> <li>\u51fd\u6570\u5e94\u7528\uff08Procedure application\uff09</li> <li>\u6c42\u503c/\u5e94\u7528\u9012\u5f52</li> <li>\u6570\u636e\u5373\u7a0b\u5e8f</li> </ul>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#4","title":"4 \u6570\u636e\u5904\u7406","text":""},{"location":"cs61a/COMPOSING%20PROGRAMS/#41","title":"4.1 \u5f15\u8a00","text":"<ul> <li>pipelines</li> <li>sequence interface</li> <li>unbounded</li> </ul>"},{"location":"cs61a/COMPOSING%20PROGRAMS/#42","title":"4.2 \u9690\u5f0f\u5e8f\u5217","text":"<ul> <li>\u6211\u4eec\u53ea\u5728\u6709\u9700\u8981\u7684\u65f6\u5019\u624d\u8ba1\u7b97\u5143\u7d20</li> </ul>"},{"location":"cs61a/cs61a/","title":"Cs61a","text":"<ul> <li>\u4ed6\u4eba\u603b\u7ed3</li> <li>https://github.com/HobbitQia/CS61A-Fall-2020/tree/main</li> <li>\u6559\u6750\u7ffb\u8bd1\u7248</li> <li>\u539f\u6559\u6750</li> <li>\u8bfe\u7a0b\u7f51\u7ad9\u5b58\u6863</li> <li>https://github.com/shuo-liu16/CS61A<ul> <li>scheme\u624b\u518c</li> </ul> </li> </ul>"},{"location":"cs61b/note_en/01.%20Intro%2C%20Hello%20World%20Java/","title":"01. Intro, Hello World Java","text":""},{"location":"cs61b/note_en/01.%20Intro%2C%20Hello%20World%20Java/#hellow-world","title":"Hellow World","text":"<pre><code>public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello world!\");\n    }\n}\n</code></pre> <ol> <li>In Java, all code must be part a class. Every Java file must contain a class declaration*.</li> <li>Classes are defined with \"public class CLASSNAME\"</li> <li>We use {} to delineate the beginning nad ending of things.</li> <li>We must end lines with a semicolon.</li> <li>The code we want to run must be inside public static void main(String [] args).</li> </ol>"},{"location":"cs61b/note_en/01.%20Intro%2C%20Hello%20World%20Java/#static-typing","title":"Static Typing","text":"<ul> <li>Variables have declared types, also called their \u201cstatic type\u201d.</li> <li>Variables must be declared before use.</li> <li>The compiler ensures type consistency. If types are inconsistent, the program will not compile.</li> <li>Types are checked before the program is even run, allowing developers to catch type errors with ease.</li> </ul>"},{"location":"cs61b/note_en/01.%20Intro%2C%20Hello%20World%20Java/#declaring-functions","title":"Declaring Functions","text":"<ul> <li>Functions must be declared as part of a class in Java.</li> <li>A function that is part of a class is called a \"method\".</li> <li>So in Java, all functions are methods.</li> <li>To define a function in Java, we use \"public static\".</li> <li>We will see alternate ways of defining functions later.</li> <li>All parameters of a function must have a declared type.</li> <li>And the return value of the function must have a declared type.</li> <li>Functions in Java return only one value.</li> </ul>"},{"location":"cs61b/note_en/01.%20Intro%2C%20Hello%20World%20Java/#reflections-on-static-typing","title":"Reflections on Static Typing","text":"<p>The Good: - Catches certain types of errors, making it easier on the programmer to debug their code. - Type errors can (almost) never occur on the end user's computer. - Makes it easier to read and reason about code. - Code can run more efficiently, e.g. no need to do expensive runtime type checks.</p> <p>The bad: - Code is more verbose. - Code is less general. There is a way around this in Java (generics).</p>"},{"location":"cs61b/note_en/01.%20Intro%2C%20Hello%20World%20Java/#1-introduction-to-java","title":"1. Introduction to Java","text":""},{"location":"cs61b/note_en/01.%20Intro%2C%20Hello%20World%20Java/#11-essentials","title":"1.1 Essentials","text":""},{"location":"cs61b/note_en/01.%20Intro%2C%20Hello%20World%20Java/#running-a-java-program","title":"Running a Java Program","text":"<p>The most common way to execute a Java program is to run it through a sequence of two programs. The first is the Java compiler, or javac. The second is the Java interpreter, or java.</p> <p></p> <p><pre><code>$ javac HelloWorld.java\n$ java HelloWorld\nHello World! \n</code></pre> You may notice that we include the '.java' when compiling, but we don't include the '.class' when interpreting. This is just the way it is (TIJTWII).</p> <p>Why make a class file at all? - .class file has been type checked. Distributed code is safer. - .class files are 'simpler' for machine to execute. Distributed code is faster. - No need to give out source. (Reverse is always possible)</p>"},{"location":"cs61b/note_en/01.%20Intro%2C%20Hello%20World%20Java/#code-style-comments-javadoc","title":"Code Style, Comments, Javadoc","text":"<ul> <li>Size (lines that are not too wide, source files that are not too long)</li> <li>Descriptive naming (variables, functions, classes), e.g. variables or functions with names like <code>year</code> or <code>getUserName</code> instead of <code>x</code> or <code>f</code>.</li> <li>Avoidance of repetitive code: You should almost never have two significant blocks of code that are nearly identical except for a few changes.</li> <li>Comments where appropriate. Line comments in Java use the <code>//</code> delimiter. Block (a.k.a. multi-line comments) comments use <code>/*</code> and <code>*/</code>.</li> <li>official style guide</li> <li>Often, we are willing to incur slight performance penalties, just so that our code is simpler to grok. We will highlight examples in later chapters.</li> <li>all of your methods and almost all of your classes should be described in a comment using the so-called Javadoc format. In a Javadoc comment:</li> <li>the block comment starts with an extra asterisk, e.g. <code>/**</code>.</li> <li>the comment often (but not always) contains descriptive tags.</li> </ul>"},{"location":"cs61b/note_en/02.%20Defining%20and%20Using%20Classes/","title":"02. Defining and Using Classes","text":""},{"location":"cs61b/note_en/02.%20Defining%20and%20Using%20Classes/#defining-a-typical-class-terminology","title":"Defining a Typical Class (Terminology)","text":"<pre><code>public class Dog {\n    public int weightInPounds;\n    public static String binomen = \"Canis familiaris\";\n\n    /** One integer constructor for dogs. */\n    public Dog(int w) {\n        weightInPounds = w;\n    }\n\n    public void makeNoise() { // Non-static method, a.k.a. Instance Method. Method with a self pointer.\n        if (weightInPounds &lt; 10) {\n            System.out.println(\"yip!\");\n        } else if (weightInPounds &lt; 30) {\n            System.out.println(\"bark.\");\n        } else {\n            System.out.println(\"woooof!\");\n        }\n    }\n}\n</code></pre>"},{"location":"cs61b/note_en/02.%20Defining%20and%20Using%20Classes/#instantiating-a-class-terminology","title":"Instantiating a Class Terminology","text":"<pre><code>public class DogLauncher {\n    public static void main(String[] args) {\n        Dog smallDog;               // *Declaration* of a Dog variable\n        new Dog(20);                // *Instantiation* of the Dog class as a Dog Object\n        smallDog = new Dog(5);      // *Instantiation* and *Assignment*\n        Dog hugeDog = new Dog(150); // D, I and A\n        hugeDog.makeNoise();        // *Invocation* of the 150 lb Dog's makeNoise method.\n    }\n}\n</code></pre>"},{"location":"cs61b/note_en/02.%20Defining%20and%20Using%20Classes/#static-vs-non-static","title":"Static vs. Non-static","text":"<p>Key differences between static and non-static (a.k.a. instance) methods: - Static methods are invoked using the class name, e.g. <code>Dog.makeNoise()</code>; - Instance methods are invoked using an instance name, e.g. <code>maya.makeNoise()</code>; - Static methods can\u2019t access \u201cmy\u201d instance variables, because there is no \u201cme\u201d.</p>"},{"location":"cs61b/note_en/02.%20Defining%20and%20Using%20Classes/#public-static-void-mainstring-args","title":"<code>public static void main(String[] args)</code>","text":"<p><pre><code>public class ArgsDemo {\n    public static void main(String[] args) {\n        System.out.println(args[0]);\n    }\n}\n</code></pre> <pre><code>$ java ArgsDemo hello some args\nhello\n</code></pre></p> <ul> <li><code>public</code>: So far, all of our methods start with this keyword.</li> <li><code>static</code>: It is a static method, not associated with any particular instance.</li> <li><code>void</code>: It has no return type.</li> <li><code>main</code>: This is the name of the method.</li> <li><code>String[] args</code>: This is a parameter that is passed to the main method.</li> </ul>"},{"location":"cs61b/note_en/02.%20Defining%20and%20Using%20Classes/#using-libraries","title":"Using Libraries","text":"<p>There are tons of Java libraries out there. - In 61B, we will provide all needed libraries. These include (but are not limited to):   - The built-in Java libraries (e.g. Math, String, Integer, List, Map)   - The Princeton standard library (e.g. StdDraw, StdAudio, In)</p> <p>As a programmer, you\u2019ll want to leverage existing libraries whenever possible. - Saves you the trouble of writing code. - Existing widely used libraries are (probably) will probably be less buggy. - \u2026 but you\u2019ll have to spend some time getting acquainted with the library.</p> <p>Best ways to learn how to use an unfamiliar library: - Find a tutorial (on the web, youtube, etc.) for the library. - Read the documentation for the library (Java docs often very good). - Look at example code snippets that use the library.</p>"},{"location":"cs61b/note_en/02.%20Defining%20and%20Using%20Classes/#the-princeton-standard-library","title":"The Princeton Standard Library","text":"<p>Makes various things much easier: - Getting user input. - Reading from files. - Making sounds. - Drawing to the screen. - Getting random numbers.</p>"},{"location":"cs61b/note_en/02.%20Defining%20and%20Using%20Classes/#1-introduction-to-java","title":"1. Introduction to Java","text":""},{"location":"cs61b/note_en/02.%20Defining%20and%20Using%20Classes/#12-objects","title":"1.2 Objects","text":""},{"location":"cs61b/note_en/02.%20Defining%20and%20Using%20Classes/#statics","title":"Statics","text":"<p>The code we want to run must be inside <code>public static void main(String [] args)</code>.</p> <p>A class that uses another class is sometimes called a \"client\" of that class, i.e. <code>DogLauncher</code> is a client of <code>Dog</code>. Neither of the two techniques is better: Adding a main method to Dog may be better in some situations, and creating a client class like DogLauncher may be better in others.</p>"},{"location":"cs61b/note_en/02.%20Defining%20and%20Using%20Classes/#instance-variables-and-object-instantiation","title":"Instance Variables and Object Instantiation","text":"<p>Some key observations and terminology:</p> <ul> <li>An <code>Object</code> in Java is an instance of any class.</li> <li>The <code>Dog</code> class has its own variables, also known as instance variables or non-static variables. These must be declared inside the class, unlike languages like Python or Matlab, where new variables can be added at runtime.</li> <li>The method that we created in the <code>Dog</code> class did not have the <code>static</code> keyword. We call such methods instance methods or non-static methods.</li> <li>To call the <code>makeNoise</code> method, we had to first instantiate a <code>Dog</code> using the <code>new</code> keyword, and then make a specific <code>Dog</code> bark. In other words, we called <code>d.makeNoise()</code> instead of <code>Dog.makeNoise()</code>.</li> <li>Once an object has been instantiated, it can be assigned to a declared variable of the appropriate type, e.g. <code>d = new Dog()</code>;</li> <li>Variables and methods of a class are also called members of a class.</li> <li>Members of a class are accessed using dot notation.</li> </ul>"},{"location":"cs61b/note_en/02.%20Defining%20and%20Using%20Classes/#constructors-in-java","title":"Constructors in Java","text":"<p><pre><code>public class Dog {\n    ...\n    public Dog(int w) {\n        weightInPounds = w;\n    }\n    ...\n}\n</code></pre> The constructor with signature <code>public Dog(int w)</code> will be invoked anytime that we try to create a <code>Dog</code> using <code>new Dog(w)</code>.</p>"},{"location":"cs61b/note_en/02.%20Defining%20and%20Using%20Classes/#class-methods-vs-instance-methods","title":"Class Methods vs. Instance Methods","text":"<p>Java allows us to define two types of methods:</p> <ul> <li>Class methods, a.k.a. static methods.</li> <li>Instance methods, a.k.a. non-static methods.</li> </ul> <pre><code>public static Dog maxDog(Dog d1, Dog d2) {\n    if (d1.weightInPounds &gt; d2.weightInPounds) {\n        return d1;\n    }\n    return d2;\n}\n\npublic Dog maxDog(Dog d2) {\n    if (this.weightInPounds &gt; d2.weightInPounds) {\n        return this;\n    }\n    return d2;\n}\n\n/** Exercise 1.2.1 */\npublic static Dog maxDog(Dog d1, Dog d2) {\n    if (weightInPounds &gt; d2.weightInPounds) { \n    // weightInPounds -&gt; cannot make a static reference to the  non-static field weightInpounds.\n        return this; // cannnot use this in a static context.\n    }\n    return d2;\n}\n</code></pre>"},{"location":"cs61b/note_en/02.%20Defining%20and%20Using%20Classes/#static-variables","title":"Static Variables","text":"<p>While Java technically allows you to access a static variable using an instance name, it is bad style, confusing, and in my opinion an error by the Java designers.</p>"},{"location":"cs61b/note_en/02.%20Defining%20and%20Using%20Classes/#qa","title":"Q&amp;A","text":"<ul> <li>Initialize variable with a value</li> <li>There is not a universial answer. It's ok to rely on default (no value specificed). It depends on your program's organization.</li> <li>How to conceptualize the data type of a class's constructors.</li> <li>We will talk about this topic 3 weeks later. But you cannot change <code>object</code> class to make below code compile. <pre><code>...\n    public Dog(int w) { // Behold there is no data type specification\n        weightInPounds = w;\n    }\n...\n    public static void main(String[] args){\n        Dog d2;\n        System.out.println(d2); // variable 'd2' might not have been initialized.\n    }\n</code></pre></li> <li>Nulls in Array</li> <li>Nulls in an Array is nothing.</li> <li> <p>You can have a null dog in the middle.</p> </li> <li> <p>Confirme understanding about instance attribute</p> </li> <li><code>new Dog(25)</code> will return a pointer</li> <li>Class in different folders</li> <li><code>package</code> and <code>import</code></li> <li>Use <code>this</code> to call other constructor</li> <li>Lecture video problem</li> <li>Java funtions are 'pass-by-value' or 'pass-by-reference'?</li> <li>If pass-by-reference, the change should persist after the call.</li> <li>If pass-by-value, the cahnge will not persist.</li> <li>Java is pass-by-value. Lecture 4</li> <li>Implicit notation</li> <li>Java assumes methods without dot notation are in the same class you call it.</li> <li>Declaration without <code>public</code> keyword</li> <li><code>public</code> means ANY CLASS can use this variable.</li> <li>Without it, other classes cannot access it.</li> <li><code>Dog d3</code>, just like <code>int x</code>, creates nothing but an alias</li> <li>An instance's attributes are default to be <code>Null</code> if you don't assign it. <pre><code>    ...\n    public String name;\n    ...\n    System.out.print(name); // you will get Null\n</code></pre></li> <li>(Lanugage usage)[https://youtu.be/M5LUOLo4k3Y?t=3110]</li> <li>In Java, everything is a class.</li> <li>Never use <code>go to</code> in any language. It results what people called Spaghetti Code (unstructured and difficult-to-maintain source code).</li> </ul>"},{"location":"cs61b/note_en/02.%20Defining%20and%20Using%20Classes/#overview","title":"Overview","text":"<ul> <li>Client Programs and Main Methods. A Java program without a main method cannot be run directly using the <code>java</code> command. However, its methods can still be invoked using the <code>main</code> method of another class.</li> <li>Class Declaration. </li> <li>Java classes can contain methods and/or variables. </li> <li>We say that such methods and variables are \u201cmembers\u201d of the class. </li> <li>Members can be instance members or static members. </li> <li>Static members are declared with the static keyword. Instance members are any members without the static keyword.</li> <li>Class Instantiation. Instantiating a class is almost always done using the <code>new</code> keyword, e.g. <code>Dog d = new Dog()</code>. An instance of a class in Java is also called an \u201cObject\u201d.</li> <li>Array Instantiation. Arrays are also instantiated using the <code>new</code> keyword. For example <code>int[] arr = new int[10]</code> If we have an array of Objects, e.g. <code>Dog[] dogarray</code>, then each element of the array must also be instantiated separately.</li> <li>Static vs. Instance methods. The distinction between static and instance methods is incredibly important. </li> <li>Instance methods are actions that can only be taken by an instance of the class (i.e. a specific object), </li> <li>whereas static methods are taken by the class itself. </li> <li>An instance method is invoked using a reference to a specific instance, e.g. <code>d.bark()</code>, </li> <li>whereas static methods should be invoked using the class name, e.g. Math.sqrt(). Know when to use each.</li> <li>Static variables. Variables can also be static. Static variables should be accessed using the class name, e.g. <code>Dog.binomen</code> as opposed to <code>d.binomen</code>. Technically Java allows you to access using a specific instance, but we strongly encourage you not to do this to avoid confusion.</li> <li>The <code>this</code> keyword. Inside a method, we can use the <code>this</code> keyword to refer to the current instance. This is equivalent to <code>self</code> in Python.</li> </ul>"},{"location":"cs61b/note_en/02.%20Defining%20and%20Using%20Classes/#exercises","title":"Exercises","text":""},{"location":"cs61b/note_en/02.%20Defining%20and%20Using%20Classes/#c-level","title":"C Level","text":"<ol> <li>Complete the exercises from the online textbook.</li> <li>In the below code what would the blank variable name have to be in order for the code to compile</li> </ol> <pre><code> public class Human{\n   int eyes;\n   public Human(int num){\n     eyes = num;\n   }\n  }\n</code></pre>"},{"location":"cs61b/note_en/02.%20Defining%20and%20Using%20Classes/#b-level","title":"B Level","text":"<ol> <li>Below is the Dog class.</li> </ol> <p><pre><code> public class Dog{\n   public void bark(){\n     System.out.println(\"Moo\");\n   }\n   public static void runFast(){\n     System.out.println(\"Ruff Run\");\n   }\n }\n</code></pre> Which of the following lines, if any, would cause an error. <pre><code> Dog poppa = new Dog();\n poppa.bark();\n Dog.bark();            // x\n poppa.runFast();       // x\n Dog.runFast();\n</code></pre></p>"},{"location":"cs61b/note_en/03.%20Testing/","title":"03. TestingTesting and Selection Sort","text":""},{"location":"cs61b/note_en/03.%20Testing/#ad-hoc-this-testing","title":"Ad Hoc ('This') Testing","text":"<p>Why are you looping through the entire array? Why don't you just check if the arrays are equal using <code>==</code>? </p> <p>The reason is, when we test for equality of two objects, we cannot simply use the <code>==</code> operator. The <code>==</code> operator compares the literal bits in the memory boxes, e.g. <code>input == expected</code> would test whether or not the addresses of <code>input</code> and <code>expected</code> are the same, not whether the values in the arrays are the same. You could also use the built-in method <code>java.util.Arrays.equals</code> instead of a loop.</p>"},{"location":"cs61b/note_en/03.%20Testing/#junit-testing","title":"JUnit Testing","text":"<p>Instead of wrtting your own array comparision, the <code>org.junit</code> library provides a number of helpful methods and useful capabilities for simplifying the writing of tests. <pre><code>public static void testSort() {\n    String[] input = {\"i\", \"have\", \"an\", \"egg\"};\n    String[] expected = {\"an\", \"egg\", \"have\", \"i\"};\n    Sort.sort(input);\n    org.junit.Assert.assertArrayEquals(expected, input);\n}\n</code></pre></p>"},{"location":"cs61b/note_en/03.%20Testing/#selection-sort","title":"Selection Sort","text":"<ol> <li>Find the smallest item.</li> <li>Move it to the front.</li> <li>Selection sort the remaining N-1 items (without touching the front item).</li> </ol> <p>We could mathematically prove the correctness of this sorting algorithm on any arrays by using the concept of invariants that was originally introduced in chapter 2.4.</p> <ul> <li>tag and string compare</li> <li>function with the same name <pre><code>/** Returns the smallest string in x. \n  * @source Got help with string compares from https://goo.gl/a7yBU5. */\npublic static String findSmallest(String[] x) {\n    String smallest = x[0];\n    for (int i = 0; i &lt; x.length; i += 1) {\n        int cmp = x[i].compareTo(smallest); //\n        if (cmp &lt; 0) {                      // -1 0 1\n            smallest = x[i];\n        }\n    }\n    return smallest;\n}\n\n/** Sorts strings destructively starting from item start. */\nprivate static void sort(String[] x, int start) {   // helper function can have the same name with more (or less) parameters.\n   int smallestIndex = findSmallest(x);\n   swap(x, start, smallestIndex);\n   sort(x, start + 1);\n}\n</code></pre></li> </ul> <p>Of note is the fact that I debugged the code at a higher level of abstraction than you might have otherwise, which I achieve by using <code>Step Over</code> more than <code>Step Into</code>. As discussed in lab 3, debugging at a higher level of abstraction saves you a lot of time and energy, by allowing you to compare the results of entire function calls with your expectation.</p>"},{"location":"cs61b/note_en/03.%20Testing/#reflections-on-the-development-process","title":"Reflections on the Development Process","text":"<ul> <li>Trying to hold too much in your brain at once is a recipe for disaster at worst, and slow progress at best.</li> <li>Having a set of automated tests and dividving and conquer helps reduce this cognitive load.</li> <li>Lastly, tests make it easier to refactor your code.</li> </ul>"},{"location":"cs61b/note_en/03.%20Testing/#better-junit","title":"Better JUnit","text":"<ul> <li>JUnit has many more such methods other than <code>assertEquals</code>, such as <code>assertFalse</code>, <code>assertNotNull</code>, <code>fail</code>, and so forth, and they can be found in the official JUnit documentation.</li> <li>\"test annotation\". To do this, we:</li> <li>Precede each method with <code>@org.junit.Test</code> (no semi-colon).</li> <li>Change each test method to be non-static.</li> <li>Remove our <code>main</code> method from the <code>TestSort</code> class.</li> <li>This annotation based approach has several advantages:</li> <li>No need to manually invoke tests.</li> <li>All tests are run, not just the ones we specify.</li> <li>If one test fails, the others still run.</li> <li>A count of how many tests were run and how many passed is provided.</li> <li>The error messages on a test failure are much nicer looking.</li> <li>If all tests pass, we get a nice message and a green bar appears, rather than simply getting no output.</li> <li>\"import statement\"</li> <li>We first add the import statement import <code>org.junit.Test</code>; to the top of our file. After doing this, we can replace all instances of <code>@org.junit.Test</code> with simply <code>@Test</code>.</li> <li>We then add our second import statement <code>import static org.junit.Assert.*</code>. After doing this, anywhere we can omit anywhere we had <code>org.junit.Assert</code>. <code>org.junit.Assert.assertEquals(expected2, actual2);</code> -&gt; <code>assertEquals(expected2, actual2);</code></li> </ul>"},{"location":"cs61b/note_en/03.%20Testing/#tdd-is-dead-long-live-testing","title":"TDD is dead. Long live testing.","text":"<p>Maybe it was necessary to use test-first as the counterintuitive ram for breaking down the industry's sorry lack of automated, regression testing. Maybe it was a parable that just wasn't intended to be a literal description of the day-to-day workings of software writing. But whatever it started out as, it was soon since corrupted. Used as a hammer to beat down the nonbelievers, declare them unprofessional and unfit for writing software. A litmus test.</p> <p>I think that's the direction we're heading. Less emphasis on unit tests, because we're no longer doing test-first as a design practice, and more emphasis on, yes, slow, system tests. (Which btw do not need to be so slow any more, thanks to advances in parallelization and cloud runner infrastructure).</p> <p>Rails can help with this transition. Today we do nothing to encourage full system tests. There's no default answer in the stack. That's a mistake we're going to fix. But you don't have to wait until that's happening. Give Capybara a spin today, and you'll have a good idea of where we're heading tomorrow.</p> <p>But first of all take a deep breath. We're herding some sacred cows to the slaughter right now. That's painful and bloody. TDD has been so successful that it's interwoven in a lot of programmer identities. TDD is not just what they do, it's who they are. We have some serious deprogramming ahead of us as a community to get out from under that, and it's going to take some time.</p> <p>The worst thing we can do is just rush into another testing religion. I can just imagine the golden calf of \"system tests only!\" right now. Please don't go there.</p> <p>Yes, test-first is dead to me. But rather than dance on its grave, I'd rather honor its contributions than linger on the travesties. It marked an important phase in our history, yet it's time to move on.</p> <p>Long live testing.</p>"},{"location":"cs61b/note_en/03.%20Testing/#qa","title":"Q&amp;A","text":"<ul> <li><code>==</code></li> <li><code>is</code> in python equivalent to <code>==</code> in Java<ul> <li>These check memory addresses.</li> </ul> </li> <li><code>==</code> in python equivalent to <code>.equals</code> in Java<ul> <li>In python we write a <code>__eq__</code> function.</li> <li>In Java we write a equals() function.</li> <li>These check the boolean return value of a special function written by a class author.</li> </ul> </li> <li>Functions with the same name and arguments but diferent types</li> <li>Types here are arguments types</li> <li>Invariants</li> <li>Lecture 5</li> <li>Something is always true.</li> <li>Helper function should be private/public</li> <li>In general it's private.</li> <li>System.out.println(5 + 6 + \"hi\" + 5 + 6)</li> <li><code>11hi56</code> evaluate from left to right</li> <li>where you put helper function</li> <li>right above it.</li> <li>static class in java visualizer</li> <li>We will discuss this later. You need do this in java visualizer.</li> <li><code>import static</code> used for import static function.</li> <li>equal</li> <li>If a class doesn't define <code>equals</code>, and you call equals, what will happen?</li> <li><code>this == obj</code></li> <li>define a varible as a test class varible</li> <li>You can do this so you can use it in every function in the test class.</li> <li><code>final</code> means this can never change.</li> <li>why the col, row like this in proj0</li> <li>x,y convention. It's arbitary.</li> <li>It's a i,j vs x,y order. (Matrix vs Cartesian)</li> <li>string class</li> <li>The <code>equals</code> method will compare every character in two strings.</li> </ul>"},{"location":"cs61b/note_en/04.%20References%2C%20Recursion%2C%20and%20Lists/","title":"Overview","text":"<p>Primitives Primitives are representations of information. There are 8 primitive types in Java: byte, short, int, long, float, double, boolean, and char. Each primitive is represented by a certain number of bits. For example, ints are 32 bit primitives, while bytes are 8 bit primitives.</p> <p>Declaring Primitives When we declare a variable to be a primitive (i.e. <code>int x;</code>), we set aside enough memory space to hold the bits (in this case, 32). We can think of this as a box holding the bits. Java then maps the variable name to this box. Say we have a line of code <code>int y = x;</code> where <code>x</code> was defined before. Java will copy the bits inside the <code>x</code> box into the bits in the <code>y</code> box.</p> <p>Creating Objects When we create an instance of a class using the <code>new</code> keyword, Java creates boxes of bits for each field, where the size of each box is defined by the type of each field. For example,  - if a Walrus object has an int variable and a double variable, then Java will allocate two boxes totaling 96 bits (32 + 64) to hold both variables.  - These will be set to a default value like 0.  - The constructor then comes in and fills in these bits to their appropriate values.  - The return value of the constructor will return the location in memory where the boxes live, usually an address of 64 bits.  - This address can then be stored in a variable with a \u201creference type.\u201d</p> <p>Reference Types If a variable is not a primitive type, then it is a reference type. When we declare object variables, we use reference type variables to store the location in memory of where an object is located. Remember this is what the constructor returns. A reference type is always a box of size 64 bits. Note that the variable does not store the entire object itself!</p> <p>Golden Rule of Equals For primitives, the line <code>int y = x</code> copies the bits inside the <code>x</code> box into the <code>y</code> box. For reference types, we do the exact same thing. In the line <code>Walrus newWalrus = oldWalrus;</code>, we copy the 64 bit address in the <code>oldWalrus</code> box into the <code>newWalrus</code> box. So we can think of this golden rule of equals (GroE) as: when we assign a value with equals, we are just copying the bits from one memory box to another!</p> <p>Parameter Passing Say we have a method <code>average(double a, double b)</code>. This method takes two doubles as parameters. Parameter passing also follows the GRoE, i.e. when we call this method and pass in two doubles, we copy the bits from those variables into the parameter variables.</p> <p>Array Instantiation. Arrays are also Objects, and are also instantiated using the new keyword. This means declaring an array variable (i.e. <code>int[] x;</code>) will create a 64-bit reference type variable that will hold the location of this array. Of course, right now, this box contains the value null, as we have not created the array yet. The <code>new</code> keyword for arrays will create the array and return the location of this array in memory. So by saying <code>int[] x = new int[]{0, 1, 2, 3, 4};</code>, we set the location of this newly created array to the variable x. Note that the size of the array was specified when the array was created, and cannot be changed!</p> <p>IntLists. Using references, we recursively defined the <code>IntList</code> class. <code>IntLists</code> are lists of integers that can change size (unlike arrays), and store an arbitrarily large number of integers. Writing a <code>size</code> helper method can be done with either recursion or iteration.</p>"},{"location":"cs61b/note_en/04.%20References%2C%20Recursion%2C%20and%20Lists/#mystery-of-the-walrus-java-internal-mechanism","title":"Mystery of the Walrus (Java internal mechanism)","text":""},{"location":"cs61b/note_en/04.%20References%2C%20Recursion%2C%20and%20Lists/#declaring-a-variable","title":"Declaring a Variable","text":"<p>The Java language provides no way for you to know the location of a variable. This feature of Java is a tradeoff: - Hiding memory locations from the programmer gives you less control, which prevents you from doing certain types of optimizations. - However, it also avoids a large class of very tricky programming errors. - In the modern era of very low cost computing, this tradeoff is usually well worth it. As an analogy, you do not have direct control over your heartbeat. While this restricts your ability to optimize for certain situations, it also avoids the possibility of making stupid errors like accidentally turning it off.</p> <p>As the wise Donald Knuth once said: \"We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil\".</p> <p>Java does not write anything into the reserved box when a variable is declared. In other words, there are no default values. As a result, the Java compiler prevents you from using a variable until after the box has been filled with bits using the <code>=</code> operator.</p>"},{"location":"cs61b/note_en/04.%20References%2C%20Recursion%2C%20and%20Lists/#the-golden-rule-of-equals-groe","title":"The Golden Rule of Equals (GRoE)","text":"<p>When you write y = x, you are telling the Java interpreter to copy the bits from <code>x</code> into <code>y</code>. This simple idea of copying the bits is true for ANY assignment using <code>=</code> in Java.</p>"},{"location":"cs61b/note_en/04.%20References%2C%20Recursion%2C%20and%20Lists/#reference-types","title":"Reference Types","text":"<p>There are 8 primitive types: byte, short, int, long, float, double, boolean, char. Everything else, including arrays, is not a primitive type but rather a <code>reference type</code>.</p> <p>When we instantiate an Object using <code>new</code> (e.g. Dog, Walrus, Planet), Java first allocates a box for each instance variable of the class, and fills them with a default value. The constructor then usually (but not always) fills every box with some other value.</p>"},{"location":"cs61b/note_en/04.%20References%2C%20Recursion%2C%20and%20Lists/#reference-variable-declaration","title":"Reference Variable Declaration","text":"<p>When we declare a variable of any reference type (Walrus, Dog, Planet, array, etc.), Java allocates a box of 64 bits, no matter what type of object.</p> <p>As an example, suppose we call: <pre><code>Walrus someWalrus;\nsomeWalrus = new Walrus(1000, 8.3);\n</code></pre></p> <p>The first line creates a box of 64 bits. The second line creates a new Walrus, and the address is returned by the <code>new</code> operator. These bits are then copied into the <code>someWalrus</code> box according to the GRoE.</p>"},{"location":"cs61b/note_en/04.%20References%2C%20Recursion%2C%20and%20Lists/#parameter-passing","title":"Parameter Passing","text":"<p>When you pass parameters to a function, you are also simply copying the bits. In other words, the GRoE also applies to parameter passing. Copying the bits is usually called \"pass by value\". In Java, we always pass by value.</p>"},{"location":"cs61b/note_en/04.%20References%2C%20Recursion%2C%20and%20Lists/#the-law-of-the-broken-futon-why-we-need-to-understand-javas-internal-mechanism-in-advance","title":"The Law of the Broken Futon (why we need to understand Java's internal mechanism IN ADVANCE)","text":"<p>This, I believe, is the ceiling so many students experience. It\u2019s not some inherent limitation of their neurology. It\u2019s something we create. We create it by saying, in word or in deed, \u201cIt\u2019s okay that you don\u2019t understand. Just follow these steps and check your answer in the back.\u201d We create it by saying, \u201cOnly the clever ones will get it; for the rest, I just want to make sure they can do it.\u201d We create it by saying, \u201cWell, they don\u2019t understand it now, but they\u2019ll figure it out on their own eventually.\u201d</p> <p>A student who can answer questions without understanding them is a student with an expiration date.</p>"},{"location":"cs61b/note_en/04.%20References%2C%20Recursion%2C%20and%20Lists/#qa","title":"Q&amp;A","text":"<ul> <li>Why string is a reference type?</li> <li>Java visualizer will represent string as a primary type by default. But it's reference type.</li> <li>Why you cannot do <code>int[] a; \\n a = {1, 2, 3, 4}</code>.</li> <li>No idea.</li> <li><code>setVariable</code> method</li> <li>Maybe this exists because there is an extra value check in the method.</li> <li>Otherwise I don't see the meaning here. YAGNI (You ain't gonna need it.)</li> <li>pass by reference example</li> <li>cpp has <code>int &amp;x</code> to pass by reference.</li> <li>When you edit the <code>x</code> in another scope (like in a function call), it will change x in the environment where you call the function.</li> <li>And you can use <code>*(x+1)</code> to get the variable you define after <code>x</code>. (pointer arithmetics)</li> <li>opinion about recursion</li> <li>Recursion in a linear data structure in Java is not good. (<code>this</code> pointer will take a lot space)</li> <li>Dealing tree like shape data structure is where recursion really shine in Java.</li> <li>Java doesn't have tail optimization.</li> <li>Functional languages</li> <li>Functional language would have no state in its objects, functions would have no side effects.</li> <li>static function call</li> <li>When you call a static method in main method, like in the <code>public class Filename</code>,</li> <li>what you actually do is <code>Filename.function()</code>.</li> <li>String in Java is immutable</li> <li>When you manipulate a string, you got a new string.</li> <li>Are functions with the same name but different parameters overloading</li> <li>Yes.</li> <li>Ternary Operator</li> <li><code>case.equals(\"uppercase\") ? \"JOHN\" : \"john\";</code></li> <li>This is a language feature, so I will not teach much.</li> <li>If you find it interesting, you can also us <code>streams</code>, <code>anonymouse class</code>.</li> <li>Can we consider <code>main</code> as the global environment</li> <li>Yes. But in the sub-environment you cannot access the parameters in the <code>main</code> environment.</li> <li>This is not like in Python's environment diagram, if you find something is not in the current frame, you will find the thing in the parent frames.</li> <li>If you want the global variable, you can make it a class variable.</li> <li>But you still cannot invoke a class instance variable in a <code>static method</code>,</li> <li>you need invoke it with the classname like: <pre><code>...\n    public static void function(){\n        Classname pq = new Classname();\n        System.out.println(pq.Varible);\n    }\n</code></pre></li> <li>a class variable is a short-hand instructor</li> <li>You don't get it in the environment untill you create it.</li> <li>how we can get a true global variable</li> <li><code>public static Type VariableName = &lt;variable&gt;</code></li> <li>Now you don't need instantiate the class anymore.</li> <li>static variable is generally a bad practice in Java.</li> </ul>"},{"location":"cs61b/note_en/05.%20SLLists%2C%20Nested%20Classes%2C%20Sentinel%20Nodes/","title":"Overview","text":"<p>Naked Data Structures <code>IntLists</code> are hard to use. In order to use an <code>IntList</code> correctly, the programmer must understand and utilize recursion even for simple list related tasks.</p> <p>Adding Clothes First, we will turn the <code>IntList</code> class into an <code>IntNode</code> class. Then, we will delete any methods in the <code>IntNode</code> class. Next, we will create a new class called <code>SLList</code>, which contains the instance variable <code>first</code>, and this variable should be of type <code>IntNode</code>. In essence, we have \u201cwrapped\u201d our <code>IntNode</code> with an <code>SLList</code>.</p> <p>Using SLList As a user, to create a list, I call the constructor for <code>SLList</code>, and pass in the number I wish to fill my list with. The <code>SLList</code> constructor will then call the <code>IntList</code> constructor with that number, and set first to point to the <code>IntList</code> it just created.</p> <p>Public vs. Private We want users to modify our list via <code>SLList</code> methods only, and not by directly modifying <code>first</code>. We can prevent other users from doing so by setting our variable access to <code>private</code>. Writing <code>private IntNode first;</code> prevents code in other classes from accessing and modifying <code>first</code> (while the code inside the class can still do so).</p> <p>Nested Classes We can also move classes into classes to make nested classes! You can also declare the nested classes to be private as well; this way, other classes can never use this nested class.</p> <p>Static Nested Classes If the <code>IntNode</code> class never uses any variable or method of the <code>SLList</code> class, we can turn this class static by adding the \u201cstatic\u201d keyword.</p> <p>Recursive Helper Methods If we want to write a recursive method in <code>SLList</code>, how would we go about doing that? After all, the <code>SLList</code> is not a naturally recursive data structure like the <code>IntNode</code>. A common idea is to write an outer method that users can call. This method calls a private helper method that takes <code>IntNode</code> as a parameter. This helper method will then perform the recursion, and return the answer back to the outer method.</p> <p>Caching Previously, we calculated the size of our <code>IntList</code> recursively by returning 1 + the size of the rest of our list. This becomes really slow if our list becomes really big, and we repeatedly call our size method. Now that we have an <code>SLList</code>, lets simply cache the size of our list as an instance variable! Note that we could not do this before with out <code>IntList</code>.</p> <p>Empty Lists With an <code>SLList</code>, we can now represent an empty list. We simply set <code>first</code> to null and <code>size</code> to 0. However, we have introduced some bugs; namely, because <code>first</code> is now null, any method that tries to access a property of <code>first</code> (like <code>first.item</code>) will return a <code>NullPointerException</code>. Of course, we can fix this bug by writing code that handles this special case. But there may be many special cases. Is there a better solution?</p> <p>Sentinel Nodes Lets make all <code>SLList</code> objects, even empty lists, the same. To do this, lets give each <code>SLList</code> a sentinel node, a node that is always there. Actual elements go after the sentinel node, and all of our methods should respect the idea that sentinel is always the first element in our list.</p> <p>Invariants An invariant is a fact about a data structure that is guaranteed to be true (assuming there are no bugs in your code). This gives us a convenient checklist every time we add a feature to our data structure. Users are also guaranteed certain properties that they trust will be maintained. For example, an <code>SLList</code> with a sentinel node has at least the following invariants:</p> <ul> <li>The sentinel reference always points to a sentinel node.</li> <li>The front item (if it exists), is always at <code>sentinel.next.item</code>.</li> <li>The size variable is always the total number of items that have been added.</li> </ul>"},{"location":"cs61b/note_en/05.%20SLLists%2C%20Nested%20Classes%2C%20Sentinel%20Nodes/#sllists","title":"SLLists","text":"<p><pre><code>public class SLList {\n    public IntNode first; //then We change it to a sentinel\n\n    public SLList(int x) {\n        first = new IntNode(x, null);\n    }\n\n    public void addFirst(int x) {\n        first = new IntNode(x, first);\n    }\n}\n</code></pre> </p>"},{"location":"cs61b/note_en/05.%20SLLists%2C%20Nested%20Classes%2C%20Sentinel%20Nodes/#addfirst-and-getfirst","title":"addFirst and getFirst","text":"<p>The curious reader might object and say that the <code>IntList</code> would be just as easy to use if we simply wrote an <code>addFirst</code> method. Try to write an <code>addFirst</code> method to the <code>IntList</code> class. You'll find that the resulting method is tricky as well as inefficient. <pre><code>public class IntList {\n    public int first;\n    public IntList rest;\n\n    public IntList(int f, IntList r) {\n        first = f;\n        rest = r;\n    }\n\n    public void addFirst(int x) {\n        tmp = new IntNode(first, rest);\n        first = x;\n        rest = tmp;\n    }\n}\n</code></pre></p>"},{"location":"cs61b/note_en/05.%20SLLists%2C%20Nested%20Classes%2C%20Sentinel%20Nodes/#public-vs-private","title":"Public vs. Private","text":"<p>Here you don't want others to mess up around the implementation details. To prevent and most importantly indicate they cross the abstraction barrier, we can modify the <code>SLList</code> class so that the <code>first</code> variable is declared with the <code>private</code> keyword.</p> <ul> <li>Private variables and methods can only be accessed by code inside the same <code>.java</code> file, e.g. in this case <code>SLList.java</code>.</li> <li>It may seem a little silly to restrict access. After all, the only thing that the <code>private</code> keyword does is break programs that otherwise compile.</li> <li>However, in large software engineering projects, the <code>private</code> keyword is an invaluable signal that certain pieces of code should be ignored (and thus need not be understood) by the end user.</li> <li>Likewise, the <code>public</code> keyword should be thought of as a declaration that a method is available and will work forever exactly as it does now.</li> </ul> <p>When you create a <code>public</code> member (i.e. method or variable), be careful, because you're effectively committing to supporting that member's behavior exactly as it is now, forever.</p>"},{"location":"cs61b/note_en/05.%20SLLists%2C%20Nested%20Classes%2C%20Sentinel%20Nodes/#nested-classes","title":"Nested Classes","text":"<ul> <li>Having a nested class has no meaningful effect on code performance, and is simply a tool for keeping code organized.</li> <li>Declaring a nested class as <code>static</code> means that methods inside the static class can not access any of the members of the enclosing class. </li> <li>In this case, it means that no method in <code>IntNode</code> would be able to access <code>first</code>, <code>addFirst</code>, or <code>getFirst</code>. <pre><code>public class SLList {\n       public static class IntNode {\n            public int item;\n            public IntNode next;\n            public IntNode(int i, IntNode n) {\n                item = i;\n                next = n;\n            }\n       }\n\n       private IntNode first;\n...\n</code></pre></li> <li>This saves a bit of memory, because each IntNode no longer needs to keep track of how to access its enclosing SLList.</li> <li>If you don't use any instance members of the outer class, make the nested class static.</li> </ul>"},{"location":"cs61b/note_en/05.%20SLLists%2C%20Nested%20Classes%2C%20Sentinel%20Nodes/#addlast-and-size","title":"addLast() and size()","text":"<pre><code>/** Returns the size of the list starting at IntNode p. */\nprivate static int size(IntNode p) {\n    if (p.next == null) {\n        return 1;\n    }\n\n    return 1 + size(p.next);\n}\n\npublic int size() {\n    return size(first);\n}\n</code></pre> <p>Here, we have two methods, both named <code>size</code>. This is allowed in Java, since they have different parameters. We say that two methods with the same name but different signatures are overloaded.</p>"},{"location":"cs61b/note_en/05.%20SLLists%2C%20Nested%20Classes%2C%20Sentinel%20Nodes/#sentinel-nodes","title":"Sentinel Nodes","text":"<p>In order to implement empty list and avoid special cases (Human beings only have so much working memory), a cleaner, though less obvious solution, is to make it so that all <code>SLLists</code> are the \"same\", even if they are empty. We can do this by creating a special node that is always there, which we will call a sentinel node. The sentinel node will hold a value, which we won't care about.</p> <p></p> <pre><code>public void addLast(int x) {\n    size += 1;\n    IntNode p = sentinel;\n    while (p.next != null) {\n        p = p.next;\n    }\n\n    p.next = new IntNode(x, null);\n}\n// tho you have to change get first too.\n</code></pre>"},{"location":"cs61b/note_en/05.%20SLLists%2C%20Nested%20Classes%2C%20Sentinel%20Nodes/#invariant","title":"Invariant","text":"<p>An invariant is a fact about a data structure that is guaranteed to be true (assuming there are no bugs in your code).</p> <p>A <code>SLList</code> with a sentinel node has at least the following invariants:</p> <ul> <li>The <code>sentinel</code> reference always points to a sentinel node.</li> <li>The front item (if it exists), is always at <code>sentinel.next.item</code>.</li> <li>The <code>size</code> variable is always the total number of items that have been added.</li> </ul> <p>Invariants make it easier to reason about code, and also give you specific goals to strive for in making sure your code works.</p> <p>A true understanding of how convenient sentinels are will require you to really dig in and do some implementation of your own. You'll get plenty of practice in project 1. However, I recommend that you wait until after you've finished the next section of this book before beginning project 1.</p>"},{"location":"cs61b/note_en/05.%20SLLists%2C%20Nested%20Classes%2C%20Sentinel%20Nodes/#qa","title":"Q&amp;A","text":"<ul> <li>In SLList, why you use <code>size(p)</code> not <code>size(this)</code></li> <li><code>this</code> here is a SLList.</li> <li>SLList only stores a sentinel and it has no <code>next</code>.</li> <li>Only sentinel, a <code>IntNode</code>, has a next.</li> <li>You can do <code>size(this)</code> in the nested IntNode class.</li> <li>make import implicit/impossible</li> <li>You cannot implicit import.</li> <li>If you have a class and don't want others import it, delete the <code>public</code> keyword.</li> <li><code>size += 1</code> or <code>addToSize()</code></li> <li>I prefer the first, I will do the later one only I want to hide some details so that I don't need to always think about it.</li> <li>why <code>while (p != null)</code> in <code>addLast</code> don't work</li> <li>You just assign a local variable, without linking the node.</li> <li>use static variable to cache size in <code>IntList</code></li> <li>We will run into some problems:</li> <li>1.When we should update size, you need manually add it by <code>globalSize += 1</code> after every new IntList added.</li> <li>2.You only have one <code>globalSize</code>, but ideally you will have multiple IntLists (not linked).</li> <li>3.Add a size for every instance is a pain in the xxx to maintain the list.</li> </ul>"},{"location":"cs61b/note_en/06.%20DLLists%2C%20Arrays/","title":"Lecture","text":"<ul> <li><code>.last</code> sometimes points at the sentinel is annoying</li> <li>reflection is not a good style</li> </ul>"},{"location":"cs61b/note_en/06.%20DLLists%2C%20Arrays/#overview","title":"Overview","text":"<p>SLList Drawbacks - <code>addLast()</code> is slow. - A naive solution: cache the <code>last</code> element. - But <code>removeLast()</code> is slow.</p> <p>DLList The solution is to give each <code>IntNode</code> a <code>prev</code> pointer, pointing to the previous item. This creates a doubly-linked list, or <code>DLList</code>. With this modification, adding and removing from the front and back of our list becomes fast (although adding/removing from the middle remains slow).</p> <p>Incorporating the Sentinel Recall that we added a sentinel node to our <code>SLList</code>. For <code>DLList</code>, we can either have two sentinels (one for the front, and one for the back), or we can use a circular sentinel. A <code>DLList</code> using a circular sentinel has one sentinel. The sentinel points to the first element of the list with <code>next</code> and the last element of the list with <code>prev</code>. In addition, the last element of the list\u2019s <code>next</code> points to the sentinel and the first element of the list\u2019s <code>prev</code> points to the sentinel. For an empty list, the sentinel points to itself in both directions.</p> <p>Generic DLList How can we modify our <code>DLList</code> so that it can be a list of whatever objects we choose? Recall that our class definition looks like this: <pre><code>public class DLList { ... }\n</code></pre> We will change this to <pre><code>public class DLList&lt;T&gt; { ... }\n</code></pre> where <code>T</code> is a placeholder object type. Notice the angle bracket syntax. Also note that we don\u2019t have to use <code>T</code>; any variable name is fine. In our <code>DLList</code>, our item is now of type T, and our methods now take <code>T</code> instances as parameters. We can also rename our <code>IntNode</code> class to <code>TNode</code> for accuracy.</p> <p>Using Generic DLList Recall that to create a DLList, we typed: <pre><code>DLList list = new DLList(10);\n</code></pre> If we now want to create a DLList holding String objects, then we must say: <pre><code>DLList&lt;String&gt; list = new DLList&lt;&gt;(\"bone\");\n</code></pre> On list creation, the compiler replaces all instances of T with String! We will cover generic typing in more detail in later lectures.</p> <p>Arrays Recall that variables are just boxes of bits. For example, <code>int x;</code> gives us a memory box of 32 bits. Arrays are a special object which consists of a numbered sequence of memory boxes! - The length of an array cannot change. - All the elements of the array must be of the same type. ((this is different from a Python list)) - Unlike regular classes, arrays do not have methods!  - Arrays do have a length variable though.</p> <p>Instantiating Arrays There are three valid notations for creating arrays. The first way specifies the size of the array, and fills the array with default values: <pre><code>int[] y = new int[3];\n</code></pre> The second and third ways fill up the array with specific values. <pre><code>int[] x = new int[]{1, 2, 3, 4, 5};\nint[] w = {1, 2, 3, 4, 5};\n</code></pre></p> <p>Arraycopy In order to make a copy of an array, we can use <code>System.arraycopy</code>. It takes 5 parameters; the syntax is hard to memorize, so we suggest using various references online such as this.</p> <p>2D Arrays We can declare multidimensional arrays. For 2D integer arrays, we use the syntax: <pre><code>int[][] array = new int[4][];\n</code></pre> This creates an array that holds integer arrays. Note that we have to manually create the inner arrays like follows: <pre><code>array[0] = new int[]{0, 1, 2, 3};\n</code></pre> Java can also create multidemensional arrays with the inner arrays created automatically. To do this, use the syntax: <pre><code>int[][] array = new int[4][4];\n</code></pre> We can also use the notation: <pre><code>int[][] array = new int[][]{{1}, {1, 2}, {1, 2, 3}}\n</code></pre> to get arrays with specific values.</p> <p>Arrays vs. Classes - Both are used to organize a bunch of memory. - Both have a fixed number of \u201cboxes\u201d. - Arrays are accessed via square bracket notation. Classes are accessed via dot notation. - Elements in the array must be all be the same type. Elements in a class may be of different types. - Array indices are computed at runtime. We cannot compute class member variable names.</p>"},{"location":"cs61b/note_en/06.%20DLLists%2C%20Arrays/#dllists","title":"DLLists","text":""},{"location":"cs61b/note_en/06.%20DLLists%2C%20Arrays/#secondtolast","title":"SecondToLast","text":"<p>Adding a <code>secondToLast</code> pointer will not help either, because then we'd need to find the third to last item in the list in order to make sure that <code>secondToLast</code> and <code>last</code> obey the appropriate invariants after removing the last item.</p>"},{"location":"cs61b/note_en/06.%20DLLists%2C%20Arrays/#improvement-8-sentinel-upgrade","title":"Improvement #8: Sentinel Upgrade","text":"<p>Back pointers allow a list to support adding, getting, and removing the front and back of a list in constant time. There is a subtle issue with this design where the <code>last</code> pointer sometimes points at the sentinel node, and sometimes at a real node.</p> <p>Both the two-sentinel and circular sentinel approaches work and result in code that is free of ugly special cases, though I personally find the circular approach to be cleaner and more aesthetically beautiful. (You get the last node throught <code>sentinel.prev</code> or <code>sentB.prev</code>)</p>"},{"location":"cs61b/note_en/06.%20DLLists%2C%20Arrays/#generic-dllists","title":"Generic DLLists","text":"<p>Since generics only work with reference types, we cannot put primitives like <code>int</code> or <code>double</code> inside of angle brackets, e.g. <code>&lt;int&gt;</code>. Instead, we use the reference version of the primitive type, which in the case of <code>int</code> case is <code>Integer</code>, e.g. <pre><code>DLList&lt;Integer&gt; d1 = new DLList&lt;&gt;(5);\nd1.insertFront(10);\n</code></pre></p> <p>There are additional nuances about working with generic types, but we will defer them to a later chapter of this book, when you've had more of a chance to experiment with them on your own. For now, use the following rules of thumb: - In the .java file implementing a data structure, specify your generic type name only once at the very top of the file after the class name. - In other .java files, which use your data structure, specify the specific desired type during declaration, and use the empty diamond operator during instantiation. - If you need to instantiate a generic over a primitive type, use <code>Integer</code>, <code>Double</code>, <code>Character</code>, <code>Boolean</code>, <code>Long</code>, <code>Short</code>, <code>Byte</code>, or <code>Float</code> instead of their primitive equivalents.</p>"},{"location":"cs61b/note_en/06.%20DLLists%2C%20Arrays/#arrays-vs-classes","title":"Arrays vs. Classes","text":"<p>The key differences between memory boxes in arrays and classes: - Array boxes are numbered and accessed using <code>[]</code> notation, and class boxes are named and accessed using dot notation. - Array boxes must all be the same type. Class boxes can be different types.</p> <p>One particularly notable impact of these difference is that [] notation allows us to specify which index we'd like at runtime. By contrast, specifying fields in a class is not something we do at runtime. (In python, dot notation will also only use the word literally. Thus, it acts like Java.)</p> <p>This isn't a limitation you'll face often, but it's worth pointing out, just for the sake of good scholarship. For what it's worth, there is a way to specify desired fields at runtime called reflection, but it is considered very bad coding style for typical programs. You can read more about reflection here. You should never use reflection in any 61B program, and we won't discuss it in our course.</p> <p>In general, programming languages are partially designed to limit the choices of programmers to make code simpler to reason about. By restricting these sorts of features to the special Reflections API, we make typical Java programs easier to read and interpret.</p>"},{"location":"cs61b/note_en/06.%20DLLists%2C%20Arrays/#appendix-java-arrays-vs-other-languages","title":"Appendix: Java Arrays vs. Other Languages","text":"<p>Compared to arrays in other languages, Java arrays: - Have no special syntax for \"slicing\" (such as in Python). - Cannot be shrunk or expanded (such as in Ruby). - Do not have member methods (such as in Javascript). - Must contain values only of the same type (unlike Python).</p>"},{"location":"cs61b/note_en/06.%20DLLists%2C%20Arrays/#qa","title":"Q&amp;A","text":"<ul> <li>What should we put into sentinel's item in GList</li> <li>We will cover in later lectures. The boring answer is <code>null</code>.</li> <li>Is <code>int[] z = null;</code> useless?</li> <li>Yes. </li> <li>But it actually initialize with null. <code>int[] x,y</code> creates nothing.</li> <li><code>System.out.println(z)</code> will compile  but x,y won't.</li> <li>Are array types covariant?</li> <li>Yes.</li> <li>Should we concern about rely too much on debugger?</li> <li>No. The habits you built will also serve you even in an environment what you can do is only print statement debugging.</li> <li>Fast way to copy an object instance</li> <li>There once was Java Cloneable interface and it was broken.</li> <li>Josh was so happy about incorporating JUnit into data structure class</li> <li>\"Maybe you guys ever go to teach in princeton, I recommand you get their data structure class use JUnit.\"</li> <li>What does test code coverage in Intellij do</li> <li>To test how much of code is exercised by your tests.</li> <li>The tool will tell you the function you never call in your test code.</li> <li>What does maven do</li> <li>It can auto-configure the meta of your project (java version).</li> </ul>"},{"location":"cs61b/note_en/07.%20ALists%2C%20Resizing%2C%20vs.%20SLists/","title":"Lecture","text":"<ul> <li>Loitering</li> </ul>"},{"location":"cs61b/note_en/07.%20ALists%2C%20Resizing%2C%20vs.%20SLists/#overview","title":"Overview","text":"<p>Lists vs. Arrays Our <code>DLList</code> has a drawback. Getting the i\u2019th item is slow; we have to scan through each item in the list, starting from the beginning or the end, until we reach the i\u2019th item. For an array named <code>A</code>, however, we can quickly access the i\u2019th item using bracket notation, <code>A[i]</code>. Thus, our goal is to implement a list with an array.</p> <p>AList The <code>AList</code> will have the same API as our <code>DLList</code>, meaning it will have the same methods as <code>DLList</code> (<code>addLast()</code>, <code>getLast()</code>, <code>removeLast()</code>, and <code>get(int i)</code>). The <code>AList</code> will also have a <code>size</code> variable that tracks its size.</p> <p>AList Invariants There are a few invariants for our <code>AList</code>. - <code>addLast</code>: The next item we want to add, will go into position <code>size</code>. - <code>getLast</code>: The item we want to return is in position <code>size - 1</code>. (offset) - <code>size</code>: The number of items in the list should be <code>size</code>.</p> <p>Implementing AList Each AList has an <code>int[]</code> called items.</p> <ul> <li>For <code>addLast</code>, we place our item in <code>items[size]</code>.</li> <li>For <code>getLast</code>, we simply return <code>items[size - 1]</code>.</li> <li>For <code>removeLast</code>, we simply decrement <code>size</code> (we don\u2019t need to change items). Thus, if addLast is called next, it simply overwrites the old value, because size was decremented. </li> <li>However, it is good practice to null out objects when they are removed, as this will save memory. Notice how closely these methods were related to the invariants.</li> </ul> <p>Array Resizing When the array gets too full, we can resize the array. However, we have learned that array size cannot change. The solution is, instead, to create a new array of a larger size, then copy our old array values to the new array. Now, we have all of our old values, but we have more space to add items.</p> <p>Improving Resize Performance Instead of adding by an extra box, we can instead create a new array with <code>size * FACTOR</code> items, where <code>FACTOR</code> could be any number, like 2 for example. We will discuss why this is fast later in the course. (This is how Python works)</p> <p>Downsizing Array Size What happens if we have a 1 million length array, but we remove 990,000 elements of the array? Well, similarly, we can downsize our array by creating an array of half the size, if we reach 250,000 elements, for example. Again, we will discuss this more rigorously later in the course.</p> <p>Aside: Breaking Code Up Sometimes, we write large methods that do multiple things. A better way is to break our large methods up into many smaller methods. One advantage of this is that we can test our code in parts.</p> <p>Generic AList Last time, we discussed how to make a generic <code>DLList</code>. We can do something similar for <code>AList</code>. But we find that we error out on array creation. Our problem is that generic arrays are not allowed in Java. Instead, we will change the line: <pre><code>items = new Item[100];\n</code></pre> to: <pre><code>items = (Item[]) new Object[100];\n</code></pre> This is called a cast, and we will learn about it in the future.</p>"},{"location":"cs61b/note_en/07.%20ALists%2C%20Resizing%2C%20vs.%20SLists/#the-alist","title":"The AList","text":""},{"location":"cs61b/note_en/07.%20ALists%2C%20Resizing%2C%20vs.%20SLists/#memory-performance","title":"Memory Performance","text":"<p>Our <code>AList</code> is almost done, but we have one major issue. Suppose we insert 1,000,000,000 items, then later remove 990,000,000 items. In this case, we'll be using only 10,000,000 of our memory boxes, leaving 99% completely unused.</p> <p>To fix this issue, we can also downsize our array when it starts looking empty. Specifically, we define a \"usage ratio\" R which is equal to the size of the list divided by the length of the items array.</p> <p>In a typical implementation, we halve the size of the array when R falls to less than 0.25.</p>"},{"location":"cs61b/note_en/07.%20ALists%2C%20Resizing%2C%20vs.%20SLists/#generic-alists","title":"Generic ALists","text":"<p>The other change we make is that we null out any items that we \"delete\". Whereas before, we had no reason to zero out elements that were deleted, with generic objects, we do want to null out references to the objects that we're storing. This is to avoid \"loitering\". Recall that Java only destroys objects when the last reference has been lost. If we fail to null out the reference, then Java will not garbage collect the objects that have been added to the list.</p>"},{"location":"cs61b/note_en/07.%20ALists%2C%20Resizing%2C%20vs.%20SLists/#exercises","title":"Exercises","text":"<ul> <li>We did not touch upon the method <code>addFirst</code> for an <code>AList</code>. Think of some of the problems you would experience in writing an <code>addFirst</code> method, and think of some potential solutions. If you think you\u2019ve got a good one, write it out.</li> </ul> <p>This is actually a proj1 intro question. The real question here is: implement an O(1) <code>addFirst</code> method.</p>"},{"location":"cs61b/note_en/07.%20ALists%2C%20Resizing%2C%20vs.%20SLists/#qa","title":"Q&amp;A","text":"<ul> <li><code>//</code> vs <code>/* comments */</code></li> <li><code>//</code> is used at the end of a line.</li> <li><code>/* */</code> can be separate into multiple lines.</li> <li>resize is really hard</li> <li>Why <code>nextFirst</code> and <code>nextLast</code> are different at initializing</li> <li>You don't have to do that way. </li> <li>If you want to make them the same, I think it will work.</li> <li>Why creating a generic array in Java is not allowed</li> <li>Java compiler needs to be back-compatible. (sb. complied a file in Java4, the file should also be compiled in Java5)</li> <li>At the time of introducing, they couldn't make generic a real feature of the language.</li> <li>When a <code>.java</code> compiles to a <code>.class</code> file, all that information about types is lost. (type erasure)</li> <li>This is somewhat controverial to how the Java generic system works.</li> <li><code>AList&lt;Interger&gt; a = new Alist&lt;&gt;();</code> is an array of 64 bit references that point at objects with 32 bit <code>int</code> instance variables.</li> <li>This makes generic types less efficient than hard codes types.</li> <li>There is a HUGE project underway called Project Valhalla to remedy this issue. They've been working it for 5+ years. Maybe more.</li> <li>Take cs164 if you are interested in it.</li> <li><code>LinkedListDeque</code> vs <code>ArrayListDeque</code></li> <li><code>ALD</code> has constant random item access.</li> <li>In real world, a deque shouldn't have get method.</li> <li><code>LLD</code> are more memory efficient (no extra array entries) but heavier (<code>prev</code>, <code>next</code> pointers). It's hard to say you can get a memory saving with it.</li> <li><code>LLD</code> you don't have to worry about resize. Code is simpler.</li> <li>If the size of a deque is really huge, <code>ALD</code> can occasionally have lag. (resize)</li> <li>People tend to use <code>ALD</code> by default because it's generally better.</li> <li>Josh's teaching experience</li> </ul>"},{"location":"cs61b/note_en/07.%20ALists%2C%20Resizing%2C%20vs.%20SLists/#lab3-timing-tests-and-randomized-comparison-tests","title":"Lab3: Timing Tests and Randomized Comparison Tests","text":"<ul> <li>Timing (profiling)</li> <li>Comparison Test</li> <li>Randomized Function Calls</li> <li>Conditional Breakpoints</li> </ul>"},{"location":"cs61b/note_en/07.%20ALists%2C%20Resizing%2C%20vs.%20SLists/#notes","title":"Notes","text":""},{"location":"cs61b/note_en/07.%20ALists%2C%20Resizing%2C%20vs.%20SLists/#use-well-designed-unit-tests","title":"Use well-designed unit tests","text":"<p>Randomized tests should not be used as a replacement for well-designed unit tests! I personally generally lean towards non-random tests where possible, and think of randomized tests as a supplemental testing approach. See this thread for a debate on this issue.</p>"},{"location":"cs61b/note_en/07.%20ALists%2C%20Resizing%2C%20vs.%20SLists/#make-sure-you-filled-the-condition","title":"Make sure you filled the condition","text":"<p>If you use the debug feature without specifying a condition, your code will stop in some various mysterious places. Make sure you never have \u201cAny Exception\u201d checked without having a specified condition.</p>"},{"location":"cs61b/note_en/07.%20ALists%2C%20Resizing%2C%20vs.%20SLists/#project-1","title":"Project 1","text":"<ul> <li>ArrayDeque is implemented by a circular array data structure.</li> <li>position after increase / clockwise by 1: <code>(pos + 1) % array.length</code></li> <li>... decrease / anticlockwise by 1: <code>(pos + array.length - 1) % array.length</code></li> </ul>"},{"location":"cs61b/note_en/08.%20Inheritance%2C%20Implements/","title":"Lecture","text":"<ul> <li> <p>WordNet</p> </li> <li> <p>DMS as a Two Step process</p> </li> <li>At compile time: We determine the signature S of the method to be called.<ul> <li>S is decided using ONLY static types.</li> <li>The static type of <code>a</code> is an Animal, <code>d</code> is a Dog.</li> <li><code>a.praise(d)</code> at compile time will only look at <code>interface Animal</code>.</li> <li><code>d.praise(d)</code> will only look at <code>Dog class</code> and <code>void praise(Dog a)</code> is invoked instead of <code>default void praise(Animal a)</code> because its signature. (If you forgot why there is a <code>default</code> here, just go to watch the whole lecture.)</li> </ul> </li> <li> <p>At runtime: The dynamic type of the invoking object uses its method with this exact signature S.</p> <ul> <li>By \u201cinvoking object\u201d, we mean the object whose method is invoked.</li> <li><code>a.sniff(d)</code>, the dynamic type of <code>a</code> is a dog, is invoked by a Dog instance,</li> <li>Override happens, the method under <code>Dog class</code> is used.</li> <li>If only <code>Dog</code> class has the <code>sniff</code> method, this code won't compile because again \"S is decided using ONLY static types.\"</li> </ul> </li> <li> <p><code>java.util.List&lt;Integer&gt; L = new java.util.ArrayList&lt;&gt;();</code></p> </li> <li>immortal!!!</li> <li>In both cases (Interface Inheritance and Implementation Inheritance), we specify \u201cis-a\u201d relationships, not \u201chas-a\u201d.</li> <li>Good: Dog implements Animal, SLList implements List61B.</li> <li>Bad: Cat implements Claw, Set implements SLList.</li> </ul>"},{"location":"cs61b/note_en/08.%20Inheritance%2C%20Implements/#overview","title":"Overview","text":"<p>Method Overloading In Java, methods in a class can have the same name, but different parameters. For example, a <code>Math</code> class can have an <code>add(int a, int b)</code> method and an <code>add(float a, float b)</code> method as well. The Java compiler is smart enough to choose the correct method depending on the parameters that you pass in. Methods with the same name but different parameters are said to be overloaded.</p> <p>Interfaces We will use the keyword interface instead of class to create our List. More explicitly, we write: <pre><code>public interface List&lt;Item&gt; { ... }\n</code></pre> The key idea is that interfaces specify what this List can do, not how to do it. Since all lists have a get method, we add the following method signature to the interface class: <pre><code>public Item get(int i);\n</code></pre> Notice we did not define this method. We simply stated that this method should exist as long as we are working with a List interface.</p> <p>Now, we want to specify that an <code>AList</code> is a <code>List</code>. We will change our class declaration of <code>AList</code> to: <pre><code>public AList&lt;Item&gt; implements List&lt;Item&gt; { ... }\n</code></pre> We can do the same for <code>SLList</code>. Now, going back to our <code>largestNumber</code> method, instead of creating one method for each type of list, we can simply create one method that takes in a List. As long as our actual object implements the <code>List</code> interface, then this method will work properly!</p> <p>Overriding For each method in <code>AList</code> that we also defined in <code>List</code>, we will add an <code>@Override</code> right above the method signature. As an example: <pre><code>@Override\npublic Item get(int i) { ... }\n</code></pre> This is not technically necessary, but is good style and thus we will require it. Also, it allows us to check against typos. If we mistype our method name, the compiler will prevent our compilation if we have the <code>@Override</code> tag.</p> <p>Interface Inheritance Formally, we say that subclasses inherit from the superclass. Interfaces contain all the method signatures, and each subclass must implement every single signature; think of it as a contract. In addition, relationships can span multiple generations. For example, C can inherit from B, which can inherit from A.</p> <p>Default Methods Interfaces can have default methods. We define this via: <pre><code>default public void method() { ... }\n</code></pre> We can actually implement these methods inside the interface. Note that there are no instance variables to use, but we can freely use the methods that are defined in the interface, without worrying about the implementation. Default methods should work for any type of object that implements the interface! The subclasses do not have to re-implement the default method anywhere; they can simply call it for free. However, we can still override default methods, and re-define the method in our subclass.</p> <p>Static vs. Dynamic Type Every variable in Java has a static type. This is the type specified when the variable is declared, and is checked at compile time. Every variable also has a dynamic type; this type is specified when the variable is instantiated, and is checked at runtime. As an example: <pre><code>Thing a;\na = new Fox();\n</code></pre> Here, Thing is the static type, and Fox is the dynamic type. This is fine because all foxes are things. We can also do: <pre><code>Animal b = (Animal) a;\n</code></pre> This is fine, because all foxes are animals too. We can do: <pre><code>Fox c = (Fox) b;\n</code></pre> This is fine, because b points to a Fox. Finally, we can do: <pre><code>a = new Squid();\n</code></pre> This is fine, because the static type of a is a Thing, and Squid is a thing.</p> <p>Dynamic Method Selection The rule is, if we have a static type <code>X</code>, and a dynamic type <code>Y</code>, then if <code>Y</code> overrides the method from <code>X</code>, then on runtime, we use the method in Y instead. Student often confuse overloading and overriding.</p> <p>Overloading and Dynamic Method Selection Dynamic method selection plays no role when it comes to overloaded methods. Consider the following piece of code, where Fox extends Animal. <pre><code>1  Fox f = new Fox();\n2  Animal a = f;\n3  define(f);\n4  define(a);\n</code></pre> Let\u2019s assume we have the following overloaded methods in the same class: <pre><code>public static void define(Fox f) { ... }\npublic static void define(Animal a) { ... }\n</code></pre> Line 3 will execute define(Fox f), while line 4 will execute define(Animal a). Dynamic method selection only applies when we have overridden methods. There is no overriding here, and therefore dynamic method selection does not apply.</p>"},{"location":"cs61b/note_en/08.%20Inheritance%2C%20Implements/#exercise","title":"Exercise","text":"<p>a)  F1 F2; F1; F1 F2 F3; <code>bird</code> as a parameter is always a <code>Bird</code> not <code>Falcon</code>.</p> <p>b)  F1 F2 F3 F4;  F1; You got the scope from a instance, so only dynamic type matters.  F1 F2 F3; If you missed F3, shout out loudly \"overloaded! overloaded! overloaded so it did get called\". F1 F3; F1 F2 F3 F4;</p> <p>Conclusion: 1. We define a set of methods to be called, which have the same name, in compile time with and only with Static Types of their parameters. 2. For subclasses, it will inherit all the methods from its superclass and override those methods with identical signatures. 3. Overload will happen when parameters are not identical. Even they are in a is-a relationship. 4. For a) <code>Falcon:gulgate(Bird)</code>, the set of methods will be F1 and F3, but because <code>bird</code>'s dynamic type is <code>Falcon</code>, overload happened, thus F3 would be called. 5. If the set of methods is empty, the code won't compile. 6. Use demo code if you have trouble recurring to it.</p>"},{"location":"cs61b/note_en/08.%20Inheritance%2C%20Implements/#intro-and-interfaces","title":"Intro and interfaces","text":""},{"location":"cs61b/note_en/08.%20Inheritance%2C%20Implements/#the-problem","title":"The Problem","text":"<p>It's nice that Java is smart enough to know how to deal with two of the same methods for different types, but overloading has several downsides:</p> <ul> <li>It's super repetitive and ugly, because you now have two virtually identical blocks of code.</li> <li>It's more code to maintain, meaning if you want to make a small change to the longest method such as correcting a bug, you need to change it in the method for each type of list.</li> <li>If we want to make more list types, we would have to copy the method for every new list class.</li> </ul>"},{"location":"cs61b/note_en/08.%20Inheritance%2C%20Implements/#hypernyms-hyponyms-and-interface-inheritance","title":"Hypernyms, Hyponyms, and Interface Inheritance","text":"<p>Dog is what is called a hypernym of poodle, malamute, husky, etc. In the reverse direction, poodle, malamute, and husky, are hyponyms of dog.</p> <p>In Java, in order to express this hierarchy, we need to do two things: - Step 1: Define a type for the general list hypernym -- we will choose the name List61B. <code>public interface List61B&lt;Item&gt; {...}</code> - Step 2: Specify that SLList and AList are hyponyms of that type. <code>public class AList&lt;Item&gt; implements List61B&lt;Item&gt;{...}</code></p> <p><code>implements List61B&lt;Item&gt;</code> is essentially a promise. AList is saying \"I promise I will have and define all the attributes and behaviors specified in the List61B interface\"</p>"},{"location":"cs61b/note_en/08.%20Inheritance%2C%20Implements/#dynamic-type","title":"Dynamic Type","text":"<p>Aside: the name \u201cdynamic type\u201d is actually quite semantic in its origin! Should lst be reassigned to point to an object of another type, say a AList object, lst\u2019s dynamic type would now be AList and not SLList! It\u2019s dynamic because it changes based on the type of the object it\u2019s currently referring to.</p> <p>When Java runs a method that is overriden, it searches for the appropriate method signature in it's dynamic type and runs it.</p>"},{"location":"cs61b/note_en/08.%20Inheritance%2C%20Implements/#overload-caveat","title":"Overload Caveat","text":"<p>Say there are two methods in the same class <pre><code>public static void peek(List61B&lt;String&gt; list) {\n    System.out.println(list.getLast());\n}\npublic static void peek(SLList&lt;String&gt; list) {\n    System.out.println(list.getFirst());\n}\n</code></pre> and you run this code <pre><code>SLList&lt;String&gt; SP = new SLList&lt;String&gt;();\nList61B&lt;String&gt; LP = SP;\nSP.addLast(\"elk\");\nSP.addLast(\"are\");\nSP.addLast(\"cool\");\npeek(SP);\npeek(LP);\n</code></pre> The first call to <code>peek()</code> will use the second peek method that takes in an <code>SLList</code>. The second call to <code>peek()</code> will use the first peek method which takes in a <code>List61B</code>. This is because the only distinction between two overloaded methods is the types of the parameters. When Java checks to see which method to call, it checks the static type and calls the method with the parameter of the same type.</p>"},{"location":"cs61b/note_en/08.%20Inheritance%2C%20Implements/#implementation-inheritance-drawbacks","title":"Implementation Inheritance Drawbacks","text":"<ul> <li>We are fallible humans, and we can't keep track of everything, so it's possible that you overrode a method but forgot you did.</li> <li>It may be hard to resolve conflicts in case two interfaces give conflicting default methods.</li> <li>It encourages overly complex code</li> </ul>"},{"location":"cs61b/note_en/08.%20Inheritance%2C%20Implements/#qa","title":"Q&amp;A","text":"<ul> <li>Casting</li> <li><code>Bird bird = (Bird) new Falcon();</code> <code>bird</code> will still a falcon,<ul> <li>because we create it with <code>Falcon()</code>.</li> <li><code>bird</code> is a instance variable, you cast it as a bird won't make the instance varible go away.</li> <li>This doesn't change any type. It makes the compiler think its a <code>Bird</code>.</li> </ul> </li> <li><code>Falcon falcon = bird;</code> will fail because not all birds are falcons.</li> <li>The declaration is for static types and the instantiation is for dynamic type.</li> <li>Casting is to tell the compiler:\"don't do your normal type checking, I know what I am doing.\"</li> <li>Casting doesn't change anything.</li> <li>Be lazy, don't think too much, because thinking means you gonna make mistakes</li> <li>why you should be smart when you could be lazy?</li> <li>Here destructively and non-destructively, </li> <li>I guess there is a way you can kind of practice that way of thinking, but</li> <li>I don't think they are so fundamentally different.</li> </ul>"},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/","title":"Lecture","text":"<ul> <li>Subclasses cannot access private memebers of their superclass.</li> <li>Interface doesn't extend <code>Object</code> class.</li> <li>Managing complexity</li> <li>Implementation inheritance breaks Encapsulation</li> </ul>"},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/#overview","title":"Overview","text":"<p>The Interface and implements Lets first note some differences between inheritence of a parent class and interfaces (Note that a class can do both, even at the same time! Here is the syntax for implemeting an interface: <pre><code>SLList&lt;Blorp&gt; implements List61B&lt;Blorp&gt;\n</code></pre> Similarly, the way for a class to extend the qualities of another class the syntax is as follows: <pre><code>Class_Name extends Class_Name\n</code></pre></p> <p>What is Inherited? We have a powerful tool in Inheritance now; however, we will define a few rules. For now, we will say that we can inherit: - instance and static variables - all methods - all nested classes </p> <p>This changes a little bit with the introduction of private variables but don\u2019t worry about that right now. The one item that is not inherited is a class\u2019s constructor.</p> <p>The Special Case of the Constructor? Even though constructor\u2019s are not inherited, we still use them. We can call the constructor explicitly by using the keyword super(). At the start of every constructor, there is already an implicit call to its super class<code>s constructor. As a result <pre><code>public VengefulSLList() {\n  deletedItems = new SLList&lt;Item&gt;();\n}\n</code></pre> is equivalent to <pre><code>public VengefulSLList() {\n  super();\n  deletedItems = new SLList&lt;Item&gt;();\n}\n</code></pre> However, constructor</code>s with arguments are not implicitly called. This means that. <pre><code>public VengefulSLList() {\n    super(x);\n    deletedItems = new SLList&lt;Item&gt;();\n  }\n</code></pre> is not equivalent to <pre><code>public VengefulSLList() {\n    deletedItems = new SLList&lt;Item&gt;();\n  }\n</code></pre> This is because only the empty argument super() is called.</p> <p>Is A. When a class inherits from another, we know that it must have all the qualities of it. This means that <code>VengefulSLList</code> is a <code>SLList</code> because it has all the qualities of an <code>SLList</code>- it just has a few additional ones too.</p> <p>Every single class is a descendent on the Object class, meaning they are all Objects.</p> <p>Casting This statement would be valid <pre><code>Dog largerDog = maxDog(frank, frankJr);\n</code></pre> But this one would not be <pre><code>Poodle largerPoodle = maxDog(frank, frankJr);\n</code></pre> Instead of being happy with just having a generic <code>Dog</code>, we can be a bit risky and use a technique called casting. Casting allows us to force the static type of a variable, basically tricking the compiler into letting us force the static type of an expression. To make <code>largerPoodle</code> into a static type Poodle we will use the following: <pre><code>Poodle largerPoodle = (Poodle) maxDog(frank, frankJr);\n</code></pre></p> <p>Casting, while powerful is also quite dangerous. You need to ensure that what you are casting to can and will actually happen. There are a few rules that can be used:</p> <ul> <li> <p>You can always cast up (to a more generic version of a class) without fear of ruining anything because we know the more specific version is a version of the generic class. For example you can always cast a Poodle to a Dog because all Poodles are Dog\u2019s.</p> </li> <li> <p>You can also cast down (to a more specific version of a class) with caution as you need to make sure that, during runtime, nothing is passed in that violates your cast. For example, sometimes Dog\u2019s are Poodle\u2019s but not always.</p> </li> <li> <p>Finally, you cannot ever cast to a class that is neither above or below the class being cast. For an example, you cannot cast a <code>Dog</code> to a <code>Monkey</code> because a <code>Monkey</code> is not in the direct lineage of a <code>Dog</code> -- it is a child of <code>Animal</code> so a bit more distant. You can think of this as \u201cside casting\u201d and it will result in a compile time error since the compiler knows this cast cannot possibly work.</p> </li> </ul> <p>Inheritance Cheatsheet <code>VengefulSLList</code> extends <code>SLList</code> means <code>VengefulSLList</code> \"is-an\" <code>SLList</code>, and inherits all of <code>SLList</code>'s members: - Variables, methods nested classes - Not constructors Subclass constructors must invoke superclass constructor first.  - The super keyword can be used to invoke overridden superclass methods and constructors. Invocation of overridden methods follows two simple rules: - Compiler plays it safe and only allows us to do things according to the static type. - For overridden methods (not overloaded methods), the actual method invoked is based on the dynamic type of the invoking expression - Can use casting to overrule compiler type checking.</p>"},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/#exercise","title":"Exercise","text":""},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/#1","title":"1","text":""},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/#q","title":"Q","text":"<p>Say there is a class Poodle that inherits from Dog. The Dog class looks like this <pre><code> public class Dog{\n     int weight;\n     public Dog(int weight_in_pounds) {\n       weight = weight_in_pounds;\n     }\n   }\n</code></pre> And the Poodle class looks like this. <pre><code> public class Poodle extends Dog{\n   public Poodle() {}\n }\n</code></pre> Is this valid? If so explain why Poodle is a Dog if Dog has no constructor with no argument. If it is not valid then explain how we can make it valid.</p>"},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/#a","title":"A","text":"<p>This is not valid. Because there is no default constructor for the Dog class. And it won't compile. But you can do this: <pre><code> public class Poodle extends Dog{\n   public Poodle(int weight_in_pounds) {super(weight_in_pounds);}\n }\n</code></pre></p>"},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/#2","title":"2","text":""},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/#q_1","title":"Q","text":"<p>The <code>Monkey</code> class is a subclass of the <code>Animal</code> class and the <code>Dog</code> class is a subclass of the <code>Animal</code> class. However a Dog is not a Monkey nor is a Monkey a Dog. What will happen for the following code? Assume that the constructors are all formatted properly. <pre><code> Monkey jimmy = new Monkey(\"Jimmy\");\n Dog limmy = (Dog) jimmy;\n</code></pre></p>"},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/#a_1","title":"A","text":"<p>The compiler is smart enough to detect you did a impossible casting. And it's stupid enough to not let you compile even the <code>Monkey</code> and <code>Dog</code> have identical codes.</p>"},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/#3","title":"3","text":""},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/#q_2","title":"Q","text":"<p>How about for this code? <pre><code> Monkey orangutan = new Monkey(\"fruitful\");\n Dog mangotan = (Dog)(Animal) orangutan;\n</code></pre> Provide brief explanation as to why you believe your answers to be correct.</p>"},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/#a_2","title":"A","text":"<p>You are smart enought to trick the IntelliJ, but once you compile it will throw you an Exception.</p>"},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/#extends-casting-higher-order-functions","title":"Extends, Casting, Higher Order Functions","text":""},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/#extends","title":"Extends","text":"<p>We can set up this inheritance relationship in the class header, using the extends keyword like so: <pre><code>public class RotatingSLList&lt;Item&gt; extends SLList&lt;Item&gt;\n</code></pre> Note that constructors are not inherited, and private members cannot be directly accessed by subclasses.</p>"},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/#reuse-code-with-super","title":"Reuse code with <code>super</code>","text":"<p><pre><code>public class VengefulSLList&lt;Item&gt; extends SLList&lt;Item&gt; {\n    SLList&lt;Item&gt; deletedItems;\n\n    public void printLostItems() {\n        deletedItems.print();\n    }\n}\n</code></pre> VengefulSLList's <code>removeLast</code> should do exactly the same thing that <code>SLList</code>'s does, except with one additional operation - adding the removed item to the <code>deletedItems</code> list. In an effort to reuse code, we can override the <code>removeLast</code> method to modify it to fit our needs, and call the removeLast method defined in the parent class, SLList, using the super keyword. <pre><code>    @Override\n    public Item removeLast() {\n        Item x = super.removeLast();\n        deletedItems.addLast(x);\n        return x;\n    }\n</code></pre></p>"},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/#constructors-are-not-inherited","title":"Constructors Are Not Inherited","text":"<p>While constructors are not inherited, Java requires that all constructors must start with a call to one of its superclass's constructors.</p> <p>To gain some intuition on why that it is, recall that the extends keywords defines an \"is-a\" relationship between a subclass and a parent class. If a VengefulSLList \"is-an\" SLList, then it follows that every VengefulSLList must be set up like an SLList.</p> <p>Here's a more in-depth explanation. Let's say we have two classes: <pre><code>public class Human {...}\npublic class TA extends Human {...}\n</code></pre> It is logical for TA to extend Human, because all TA's are Human. Thus, we want TA's to inherit the attributes and behaviors of Humans.</p> <p>If we run the code below: <pre><code>TA Christine = new TA();\n</code></pre> Then first, a Human must be created. Then, that Human can be given the qualities of a TA. It doesn't make sense for a TA to be constructed without first creating a Human first.</p> <p>Thus, we can either explicitly make a call to the superclass's constructor, using the super keyword: <pre><code>public VengefulSLList() {\n    super();\n    deletedItems = new SLList&lt;Item&gt;();\n}\n</code></pre> Or, if we choose not to, Java will automatically make a call to the superclass's no-argument constructor for us.</p> <p>In this case, adding super() has no difference from the constructor we wrote before. It just makes explicit what was done implicitly by Java before.</p>"},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/#the-object-class","title":"The Object Class","text":"<p>Every class in Java is a descendant of the Object class, or <code>extends</code> the Object class. Even classes that do not have an explicit <code>extends</code> in their class still implicitly extend the Object class.</p> <p>For example, - VengefulSLList extends SLList explicitly in its class declaration - SLList extends Object implicitly</p> <p>This means that since SLList inherits all members of Object, VengefulSLList inherits all members of SLList and Object, transitively. So, what is to be inherited from Object?</p> <p>As seen in the documentation for the Object class, the Object class provides operations that every Object should be able to do - like <code>.equals(Object obj)</code>, <code>.hashCode()</code>, and <code>toString()</code>.</p>"},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/#encapsulation","title":"Encapsulation","text":"<p>Encapsulation is one of the fundamental principles of object oriented programming, and is one of the approaches that we take as programmers to resist our biggest enemy: complexity. Managing complexity is one of the major challenges we must face when writing large programs.</p> <p>Some of the tools we can use to fight complexity include hierarchical abstraction (abstraction barriers!) and a concept known as \"Design for change\". This revolves around the idea that programs should be built into modular, interchangeable pieces that can be swapped around without breaking the system. Additionally, hiding information that others don't need is another fundamental approach when managing a large system.</p> <p>In computer science terms, a module can be defined as a set of methods that work together as a whole to perform a task or set of related tasks. This could be something like a class that represents a list. Now, if the implementation details of a module are kept internally hidden and the only way to interact with it is through a documented interface, then that module is said to be encapsulated.</p>"},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/#casting","title":"Casting","text":"<p><pre><code>Poodle largerPoodle = (Poodle) maxDog(frank, frankSr); // runtime exception!\n</code></pre> Casting allows this code to pass, and when <code>maxDog</code> returns the <code>Malamute</code> at runtime, and we try casting a <code>Malamute</code> as a <code>Poodle</code>, we run into a runtime exception - a <code>ClassCastException</code>.</p>"},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/#higher-order-functions","title":"Higher Order Functions","text":"<p>In old school Java (Java 7 and earlier), memory boxes (variables) could not contain pointers to functions. What that means is that we could not write a function that has a \"Function\" type, as there was simply no type for functions.</p> <p>To get around this we can take advantage of interface inheritance. Let's write an interface that defines any function that takes in an integer and returns an integer - an <code>IntUnaryFunction</code>. <pre><code>public interface IntUnaryFunction {\n    int apply(int x);\n}\n</code></pre> Now we can write a class which <code>implements IntUnaryFunction</code> to represent a concrete function. Let's make a function that takes in an integer and returns 10 times that integer. <pre><code>public class TenX implements IntUnaryFunction {\n    /* Returns ten times the argument. */\n    public int apply(int x) {\n        return 10 * x;\n    }\n}\n</code></pre> At this point, we've written in Java the Python equivalent of the tenX function. Let's write <code>do_twice</code> now. <pre><code>public static int do_twice(IntUnaryFunction f, int x) {\n    return f.apply(f.apply(x));\n}\n</code></pre> A call to <code>print(do_twice(tenX, 2))</code> in Java would look like this: <pre><code>System.out.println(do_twice(new TenX(), 2));\n</code></pre></p>"},{"location":"cs61b/note_en/09.%20Extends%2C%20Casting%2C%20Higher%20Order%20Functions/#qa","title":"Q&amp;A","text":"<ul> <li>Why you use <code>i += 1</code></li> <li>Because I want to discourage ppl use <code>x[i++]</code>.</li> <li>Call two functions in a line</li> <li><code>f(3), g(3);</code></li> <li>You do this not <code>f(3) &amp;&amp; g(3)</code> because maybe the return type of <code>f</code> is <code>void</code>.</li> <li>What is a has-a relationship</li> <li>A FebruarySet has-a SLList to store its data.</li> <li>If you implemente this by Extends inheritance, you are using it in a not recommended way.</li> <li>Because has-a relationship can be easily done by make it a class meber.</li> <li>\"has-a\" means composition.</li> <li>It is possible that API is not sufficient to do the job</li> <li>What's the different between <code>extends</code> and <code>implements</code></li> <li>If the thing afterward is a class, you use <code>extends</code>, otherwise (interface) <code>implements</code>.</li> <li><code>implements</code> takes a thing that is abstract to concret.</li> <li>The advantages of signaitures in interface</li> <li>You let the compiler know whether a variable has the thing you need.</li> <li>Concisely and formally specify the behavior of the class.</li> <li>Runtime type checker</li> <li>You have two identical classes: FridayCat and ThursdayCat.</li> <li>They are the same only differ in name.</li> <li><code>FridayCat c = (FridayCat) new ThursdayCat();</code> will still crash.</li> <li><code>int c = (int) new Double(3.3);</code> is allowed because of special rules for primitives.</li> <li>The keyword for <code>package private</code> is no keyword</li> <li>If you forget put <code>public</code>/<code>private</code>, you are actually doing this.</li> <li>abstract in java</li> <li>It's a keyword in between an interface and a class.</li> <li><code>abstract</code> class can have instance variables.</li> <li>I once had <code>abstract</code> in the class, but they introduced the <code>default</code>. I didn't need it anymore.</li> <li>A case for <code>abstract</code></li> <li>Say you want to write your own <code>List</code> class.</li> <li>You use <code>MyClass implements java.util.List</code>.</li> <li>You need provide all of methods <code>java.util.List</code> provides. It will take a long time.</li> <li>So you can use the Abstract List,</li> <li>You only need to implement <code>get</code> method and have all the features (of Abstract List).</li> <li>Maybe it's legacy reason they don't have default methods for <code>java.util.List</code>.</li> <li>You cannot instantiate interface</li> <li>Josh won't tell you how to do dynamic type tricks (get the dynamic type of the instance which calls the method)</li> </ul>"},{"location":"cs61b/note_en/10.%20Subtype%20Polymorphism%20vs.%20HoFs/","title":"Overview","text":"<p>Review: Typing Rules - Compiler allows the memory box to hold any subtype. - Compiler allows calls based on static type. - Overriden non-static methods are selected at runtime based on dynamic type. - For overloaded methods, the method is selected at compile time.</p> <p>Subtype Polymorphism Consider a variable of static type <code>Deque</code>. The behavior of calling <code>deque.method()</code> depends on the dynamic type. Thus, we could have many subclasses that implement the <code>Deque</code> interface, all of which will be able to be called from <code>deque.method()</code>.</p> <p>Subtype Polymorphism Example Java doesn't support operator overloading. Some objects cannot be compared by <code>&gt;</code> or other operators. Alternatively, we could write a <code>maxDog()</code> function inside the <code>Dog</code> class, but now we have to write a <code>max()</code> function for each class (<code>maxPenguin()</code>, <code>maxCat()</code> ...) that we want to compare! Remember, our goal is to write a \u201cone true max method\u201d that works for all comparable objects.</p> <p>Solution: OurComparable Interface The solution is to create an interface that contains a <code>compareTo(Object)</code> method; let\u2019s call this interface <code>OurComparable</code>. Now, our <code>max()</code> method can take an <code>OurComparable[]</code> parameter, and since we guarantee that any object which extends the interface has all the methods inside the interface, we guarantee that we will always be able to call a <code>compareTo</code> method, and that this method will correctly return some ordering of the objects.</p> <p>Now, we can specify a \u201cone true max method\u201d. Of course, any object that needs to be compared must implement the <code>compareTo</code> method. However, instead of re-implementing the <code>max</code> logic in every class, we only need to implement the logic for picking the ordering of the objects, given two objects.</p> <p>The core idea here is you achieve a generic <code>max</code> method for all <code>OurComparable</code> objects. You still need to write a <code>compareTo</code> method in every class that implements the <code>OurComparable</code> interface. You save your work for <code>max</code> not how to compare two objects -- <code>compareTo</code>.</p> <p>Even Better: Java\u2019s In-Built Comparable Java has an in-built <code>Comparable</code> interface that uses generics to avoid any weird casting issues. Plus, <code>Comparable</code> already works for things like <code>Integer</code>, <code>Character</code>, and <code>String</code>; moreover, these objects have already implemented a <code>max</code>, <code>min</code>, etc. method for you. Thus you do not need to re-do work that\u2019s already been done!</p> <p>Comparators The term \u201cNatural Order\u201d is used to refer to the ordering implied by a <code>Comparable\u2019s</code> <code>compareTo</code> method. However, what if we want to order our Dog objects by something other than <code>size</code>? We will instead pass in a <code>Comparator&lt;T&gt;</code> interface, which demands a compare() method. We can then implement the <code>compare()</code> method anyway we want to achieve our ordering.</p>"},{"location":"cs61b/note_en/10.%20Subtype%20Polymorphism%20vs.%20HoFs/#lecture","title":"Lecture","text":"<ul> <li>Casting doesn't have any lasting effect</li> <li>It only works on the line that cast was happened.</li> <li>It doesn't change the static type of a variable, just for the casting line.</li> <li>Overriding only applies to non-static methods</li> <li>What if a subclass has variables with the same name as a superclass?</li> <li>What if subclass has a staic method with the same signature as a superclass method?</li> <li>These two practives above are called \"hideing\".</li> <li>It's bad style.</li> <li>There is no good reason to ever do this.</li> <li>The rules for resolving the conflict are a bit confusing to learn.</li> <li>Rules deal with hiding</li> <li>Josh said this should have been a syntax error.</li> <li>Subtype Polymorphism vs. Explicit Higher Order Functions</li> <li><code>return this.size - other.size;</code></li> <li><code>Collection.max(dogs)</code></li> <li><code>callbacks</code></li> <li>Sometimes a function needs the help of another function that might not have been written yet.</li> <li>The helping function is sometimes called a \"callback\".</li> <li>Difference between comparable and comparator</li> <li>A comparable wants to compare itself to another object.</li> <li>A comparator wants to compare the other two object.</li> <li>If you want to compare in multiple ways, in Java, you can only use the comparator idea.</li> </ul>"},{"location":"cs61b/note_en/10.%20Subtype%20Polymorphism%20vs.%20HoFs/#subtype-polymorphism-vs-hofs","title":"Subtype Polymorphism vs. HOFs","text":""},{"location":"cs61b/note_en/10.%20Subtype%20Polymorphism%20vs.%20HoFs/#subtype-polymorphism","title":"Subtype Polymorphism","text":"<p>Polymorphism, at its core, means 'many forms'. In Java, polymorphism refers to how objects can have many forms or types. In object-oriented programming, polymorphism relates to how an object can be regarded as an instance of its own class, an instance of its superclass, an instance of its superclass's superclass, and so on.</p> <p>Suppose we want to write a python program that prints a string representation of the larger of two objects. There are two approaches to this.</p> <p>Explicit HoF Approach <pre><code>def print_larger(x, y, compare, stringify):\n    if compare(x, y):\n        return stringify(x)\n    return stringify(y)\n</code></pre></p> <p>Subtype Polymorphism Approach <pre><code>def print_larger(x, y):\n    if x.largerThan(y):\n        return x.str()\n    return y.str()\n</code></pre> Using the explicit higher order function approach, you have a common way to print out the larger of two objects. In contrast, in the subtype polymorphism approach, the object itself makes the choices. The <code>largerFunction</code> that is called is dependent on what <code>x</code> and <code>y</code> actually are.</p>"},{"location":"cs61b/note_en/10.%20Subtype%20Polymorphism%20vs.%20HoFs/#max-function","title":"Max Function","text":"<p>Java doesn't support operator overloading. We can create an interface that guarantees that any implementing class, like <code>Dog</code>, contains a comparison method, which we'll call <code>compareTo</code>.</p> <p>Let's write our interface. We'll specify one method <code>compareTo</code>. <pre><code>public interface OurComparable {\n    public int compareTo(Object o);\n}\n</code></pre></p> <p>We will define its behavior like so: - Return -1 if <code>this</code> &lt; <code>o</code>. - Return 0 if <code>this</code> == <code>o</code>. - Return 1 if <code>this</code> &gt; <code>o</code>.</p> <p>This code is admittedly quite long, so we can make it much more succinct by modifying our <code>compareTo</code> method's behavior: - Return negative number if <code>this</code> &lt; <code>o</code>. - Return 0 if <code>this</code> == <code>o</code>. - Return positive number if <code>this</code> &gt; <code>o</code>. <pre><code>public int compareTo(Object o) {\n    Dog uddaDog = (Dog) o;\n    return this.size - uddaDog.size;\n}\n</code></pre></p> <p>And the <code>max</code> method would be like: <pre><code>public static OurComparable max(OurComparable[] items) {\n    int maxDex = 0;\n    for (int i = 0; i &lt; items.length; i += 1) {\n        int cmp = items[i].compareTo(items[maxDex]);\n        if (cmp &gt; 0) {\n            maxDex = i;\n        }\n    }\n    return items[maxDex];\n}\n</code></pre></p> <ul> <li>No need for maximization code in every class(i.e. no <code>Dog.maxDog(Dog[])</code>) function required</li> <li>We have code that operates on multiple types (mostly) gracefully</li> </ul> <p>Josh put the <code>max</code> method in another class <code>Maximizer</code>.</p>"},{"location":"cs61b/note_en/10.%20Subtype%20Polymorphism%20vs.%20HoFs/#comparables","title":"Comparables","text":"<p>Instead of using our own OurComparable, we'll take advantage of an interface that already exists called <code>Comparable</code>. <code>Comparable</code> is already defined by Java and is used by countless libraries. <pre><code>public interface Comparable&lt;T&gt; {\n    public int compareTo(T obj);\n}\n</code></pre> By using a generic type, this will help us avoid having to cast an object to a specific type! Now, we will rewrite the Dog class to implement the Comparable interface, being sure to update the generic type <code>T</code> to Dog: <pre><code>public class Dog implements Comparable&lt;Dog&gt; {\n    ...\n    public int compareTo(Dog uddaDog) {\n        return this.size - uddaDog.size;\n    }\n}\n</code></pre></p>"},{"location":"cs61b/note_en/10.%20Subtype%20Polymorphism%20vs.%20HoFs/#comparator","title":"Comparator","text":"<p>Java's way of dealing with different types of ordering is by using <code>Comparator</code>'s. Since a comparator is an object, the way we'll use <code>Comparator</code> is by writing a nested class inside <code>Dog</code> that implements the <code>Comparator</code> interface.</p> <p>But first, what's inside this interface? <pre><code>public interface Comparator&lt;T&gt; {\n    int compare(T o1, T o2);\n}\n</code></pre> This shows that the <code>Comparator</code> interface requires that any implementing class implements the <code>compare</code> method. The rule for <code>compare</code> is just like <code>compareTo</code>: - Return negative number if o1 &lt; o2. - Return 0 if o1 equals o2. - Return positive number if o1 &gt; o2.</p> <p>Let's give <code>Dog</code> a <code>NameComparator</code>. To do this, we can simply defer to <code>String</code>'s already defined <code>compareTo</code> method. <pre><code>import java.util.Comparator;\n\npublic class Dog implements Comparable&lt;Dog&gt; {\n    ...\n    public int compareTo(Dog uddaDog) {\n        return this.size - uddaDog.size;\n    }\n\n    private static class NameComparator implements Comparator&lt;Dog&gt; {\n        public int compare(Dog a, Dog b) {\n            return a.name.compareTo(b.name);\n        }\n    }\n\n    public static Comparator&lt;Dog&gt; getNameComparator() {\n        return new NameComparator();\n    }\n}\n</code></pre> We can retrieve our NameComparator like so: <pre><code>Comparator&lt;Dog&gt; nc = Dog.getNameComparator();\n</code></pre></p> <p>All in all, we have a Dog class that has a private NameComparator class and a method that returns a NameComparator we can use to compare dogs alphabetically by name.</p> <p></p> <p>To summarize, interfaces in Java provide us with the ability to make callbacks. Sometimes, a function needs the help of another function that might not have been written yet (e.g. <code>max</code> needs <code>compareTo</code>). A callback function is the helping function (in the scenario, <code>compareTo</code>). In some languages, this is accomplished using explicit function passing; in Java, we wrap the needed function in an interface.</p> <p>A Comparable says, \"I want to compare myself to another object\". It is imbedded within the object itself, and it defines the natural ordering of a type. A Comparator, on the other hand, is more like a third party machine that compares two objects to each other. Since there's only room for one <code>compareTo</code> method, if we want multiple ways to compare, we must turn to Comparator.</p>"},{"location":"cs61b/note_en/10.%20Subtype%20Polymorphism%20vs.%20HoFs/#qa","title":"Q&amp;A","text":"<ul> <li>you cannot ever cast to a class that is neither above or below the class being cast.</li> <li>Weird things about implicit number type convertion in Java</li> <li>A bad class will teach you this.</li> <li>Discontinuity, circullar array and code golf</li> <li>code golf is writing code in the absolute minimum numberw of characters or lines of code.</li> <li>I believe the code Josh wrote is the correct answer. I mean <code>messageIndex = ms + banned.length();</code> achieved the \"start from back\" solution.</li> <li>He took <code>banned.length()</code> as <code>numToCopy</code>.</li> </ul>"},{"location":"cs61b/note_en/10.%20Subtype%20Polymorphism%20vs.%20HoFs/#lab4-git-and-debugging","title":"Lab4 Git and Debugging","text":"<ul> <li><code>git checkout &lt;pointerToCommit&gt; (&lt;file&gt;)</code></li> <li>Conceive <code>git checkout</code>'s default argument is <code>.</code></li> <li>Branches, Remote branches (<code>git remote show</code>) and hashcode are all pointers to a commit.</li> <li>Use this to quickly regress.</li> </ul> <pre><code>    public static boolean isSameNumber(Integer a, Integer b) {\n        return a == b;  // this would fail when a = b &gt; 127 or &lt; -128\n                        // use a.equals(b) instead.\n    }\n</code></pre>"},{"location":"cs61b/note_en/11.%20Exceptions%2C%20Iterators%2C%20Object%20Methods/","title":"Lecture","text":"<ul> <li>Java will implicitly call <code>.toString()</code></li> <li>StringBuilder <pre><code>@Override\npublic String toString() {\n    StringBuilder returnSB = new StringBuilder(\"{\");\n    for (int i = 0; i &lt; size - 1; ++i) {\n        returnSB.append(items[i].toString());\n        returnSB.append(\", \");\n    }\n    returnSB.append(items[size - 1]);\n    returnSB.append(\"}\");\n    return returnSB.toString();\n}\n</code></pre></li> <li>Again <code>==</code> and <code>.equal</code></li> <li>Classic taking overload as override mistake</li> <li>Better <code>.toString()</code></li> <li>This is slower than StringBuilder.</li> <li>But you won't call it that much, so I will sacrifice a little efficiency. <pre><code>@Override\npublic String toString(){\n    List&lt;String&gt; listOfItems = new ArrayList&lt;&gt;();\n    for (T x : this) {\n        listOfItems.add(x.toString());\n    }\n    return \"{\" + String.join(\", \", listOfItems) + \"}\";\n}\n</code></pre></li> <li><code>.of</code> method</li> <li>Varargs: Variable (numble of) Arguments.</li> <li>The first <code>&lt;Glerp&gt;</code> declares it's a generic method.</li> <li>The second specify that it will return a <code>ArraySet&lt;Glerp&gt;</code></li> <li>The <code>Glerp... stuff</code> is how varargs declare. <pre><code>public static &lt;Glerp&gt; ArraySet&lt;Glerp&gt; of(Glerp... stuff) {\n    ArraySet&lt;Glerp&gt; returnSet = new ArraySet&lt;Glerp&gt;();\n    for (Glerp x : stuff) {\n        returnSet.add(x);\n    }\n    return returnSet;\n</code></pre></li> </ul>"},{"location":"cs61b/note_en/11.%20Exceptions%2C%20Iterators%2C%20Object%20Methods/#overview","title":"Overview","text":""},{"location":"cs61b/note_en/11.%20Exceptions%2C%20Iterators%2C%20Object%20Methods/#exceptions","title":"Exceptions","text":"<p>Most likely you have encountered an exception in your code such as a <code>NullPointerException</code> or an <code>IndexOutOfBoundsException</code>. Now we will learn about how we can \u201cthrow\u201d exceptions ourselves, and also handle thrown exceptions. Here is an example of an exception that we throw: <pre><code>throw new RuntimeException(\"For no reason.\");\n</code></pre></p> <p>Note: Try/Catch is out of scope for now!</p> <p>Throwing exceptions is useful to notify your user of something wrong they have done. On the other hand, we can also \u201ccatch\u201d exceptions that happen in our code! Here is an example: <pre><code>try {\n    dog.run()\n} catch (Exception e) {\n    System.out.println(\"Tried to run: \" + e);\n}\nSystem.out.println(\"Hello World!\");\n</code></pre> There are a few key things to note. Firstly, the entirety of the try section is run until/if there is an exception thrown. If there never is an exception, the entire catch block is skipped. If there is an exception, the code immediately jumps into the catch block with the corresponding exception, and executes from there.</p>"},{"location":"cs61b/note_en/11.%20Exceptions%2C%20Iterators%2C%20Object%20Methods/#iterators-and-iterables","title":"Iterators and Iterables","text":"<p>These two words are very closely related, but have two different meanings that are often easy to confuse. The first thing to know is that these are both Java interfaces, with different methods that need to be implemented. Here is a simplified interface for Iterator: <pre><code>public interface Iterator&lt;T&gt; {\n  boolean hasNext();\n  T next();\n}\n</code></pre> Here is a simplified interface for Iterable: <pre><code>public interface Iterable&lt;T&gt; {\n    Iterator&lt;T&gt; iterator();\n}\n</code></pre> Notice that in order for an object (for example an ArrayList or LinkedList) to be iterable, it must include a method that returns an iterator. The iterator is the object that iterates over an iterable object. Keep this relationship and distinction in mind as you work with these two interfaces.</p>"},{"location":"cs61b/note_en/11.%20Exceptions%2C%20Iterators%2C%20Object%20Methods/#vs-equals","title":"== vs .equals","text":"<p>We have two concepts of equality in Java -- \u201c<code>==</code>\u201d and the \u201c<code>.equals()</code>\u201d method. The key difference is that when using <code>==</code>, we are checking if two objects have the same address in memory (that they point to the same object). On the other hand, <code>.equals()</code> is a method that can be overridden by a class and can be used to define some custom way of determining equality.</p> <p>For example, say we wanted to check if two stones are equal: <pre><code>public class Stone{\n  public Stone(int weight){...}\n}\nStone s = new Stone(100);\nStone r = new Stone(100);\n</code></pre> If we want to consider <code>s</code> and <code>r</code> equal because they have the same weight. If we do check equality using <code>==</code>, these Stones would not be considered equal because they do not have the same memory address.</p> <p>On the other hand, if you override the equals method of Stone as follows <pre><code>public boolean equals(Object o){\n  return this.weight == ((Stone) o).weight\n}\n</code></pre> We would have that the stones would be considered equal because they have the same weight.</p>"},{"location":"cs61b/note_en/11.%20Exceptions%2C%20Iterators%2C%20Object%20Methods/#qa","title":"Q&amp;A","text":"<ul> <li>Different set implementations are the one of the most important part of CS61B</li> <li>Java assumes that a number which starts at 0 is based on 8</li> <li>My solution for proj1 uses <code>instanceof</code> but I forgot to put it on specs</li> <li><code>getting T, expected type T</code></li> <li>make sure your inner class looks like:</li> <li><code>private class DequeIterator implements Iterator&lt;T&gt;{</code></li> <li>not:</li> <li><code>private class DequeIterator&lt;T&gt; implements Iterator&lt;T&gt;{</code></li> <li>Java's python dictionary equivalent is <code>Map</code></li> <li>HashMaps have the feature that they fail spectacularly if the \"key\" overrides equals but not hascode.</li> <li>You still need to instantiate static class</li> <li>The only difference is that you don't have <code>this</code> in a static class.</li> <li>Static classes take less memory because they don't need to have a pointer back to their inclosing instances.</li> <li><code>this.getClass().getConstructor.instanceOf()</code></li> <li>LOL. This should be on an episode of some Netflix shows.</li> </ul>"},{"location":"cs61b/note_en/11.%20Exceptions%2C%20Iterators%2C%20Object%20Methods/#exceptions-iterators-object-methods","title":"Exceptions, Iterators, Object Methods","text":""},{"location":"cs61b/note_en/11.%20Exceptions%2C%20Iterators%2C%20Object%20Methods/#iteration","title":"Iteration","text":"<p>The List interface extends the Iterable interface, inheriting the abstract iterator() method. (Actually, List extends Collection which extends Iterable, but it's easier to codethink of this way to start.) <pre><code>public interface Iterable&lt;T&gt; {\n    Iterator&lt;T&gt; iterator();\n}\n</code></pre> <pre><code>public interface List&lt;T&gt; extends Iterable&lt;T&gt;{\n    ...\n}\n</code></pre> Next, the compiler checks that Iterators have <code>hasNext()</code> and <code>next()</code>. The Iterator interface specifies these abstract methods explicitly: <pre><code>public interface Iterator&lt;T&gt; {\n    boolean hasNext();\n    T next();\n}\n</code></pre></p> <p>What if someone calls <code>next</code> when <code>hasNext</code> returns false?</p> <p>This behavior is undefined. However, a common convention is to throw a <code>NoSuchElementException</code>. See Discussion 5 for examples.</p> <p>Will <code>hasNext</code> always be called before next?</p> <p>Not necessarily. This is sometimes the case when someone using the iterator knows exactly how many elements are in the sequence. Thus, we can't rely on the user calling <code>hasNext</code> before <code>next</code>. However, you can always call <code>hasNext</code> from within your <code>next</code> function.</p> <p>Specific classes will implement their own iteration behaviors for the interface methods. Let's look at an example. We are going to add iteration through keys to our ArrayMap class. First, we write a new class called ArraySetIterator, nested inside of ArraySet: <pre><code>private class ArraySetIterator implements Iterator&lt;T&gt; {\n    private int wizPos;\n\n    public ArraySetIterator() {\n        wizPos = 0;\n    }\n\n    public boolean hasNext() {\n        return wizPos &lt; size;\n    }\n\n    public T next() {\n        T returnItem = items[wizPos];\n        wizPos += 1;\n        return returnItem;\n    }\n}\n</code></pre> We still want to be able to support the enhanced for loop, though, to make our calls cleaner. So, we need to make ArrayMap implement the Iterable interface. The essential method of the Iterable interface is <code>iterator()</code>, which returns an Iterator object for that class. All we have to do is return an instance of our <code>ArraySetIterator</code> that we just wrote! <pre><code>public Iterator&lt;T&gt; iterator() {\n    return new ArraySetIterator();\n}\n</code></pre> <pre><code>Iterator&lt;Integer&gt; iter = aset.iterator();\nwhile(iter.hasNext()) {\n    System.out.println(iter.next());\n}\n/* ===== */\nfor (int i : aset) {\n    System.out.println(i);\n}\n</code></pre> Here we've seen Iterable, the interface that makes a class able to be iterated on, and requires the method <code>iterator()</code>, which returns an Iterator object. And we've seen Iterator, the interface that defines the object with methods to actually do that iteration. You can think of an Iterator as a machine that you put onto an iterable that facilitates the iteration. Any iterable is the object on which the iterator is performing.</p>"},{"location":"cs61b/note_en/11.%20Exceptions%2C%20Iterators%2C%20Object%20Methods/#object-methods","title":"Object Methods","text":""},{"location":"cs61b/note_en/11.%20Exceptions%2C%20Iterators%2C%20Object%20Methods/#tostring","title":"<code>toString()</code>","text":"<p>The <code>toString()</code> method provides a string representation of an object. The <code>System.out.println()</code> function implicitly calls this method on whatever object is passed to it and prints the string returned. When you run <code>System.out.println(dog)</code>, it's actually doing this: <pre><code>String s = dog.toString()\nSystem.out.println(s)\n</code></pre> The default Object class' <code>toString()</code> method prints the location of the object in memory. This is a hexidecimal string. Classes like Arraylist and java arrays have their own overridden versions of the <code>toString()</code> method. This is why, when you were working with and writing tests for Arraylist, errors would always return the list in a nice format like this (1, 2, 3, 4) instead of returning the memory location. <pre><code>public String toString() {\n    String returnString = \"{\";\n    for (int i = 0; i &lt; size; i += 1) {\n        returnString += keys[i];\n        returnString += \", \";\n    }\n    returnString += \"}\";\n    return returnString;\n}\n</code></pre> This solution, although seemingly simple and elegant, is actually very naive. This is because when you use string concatenation in Java like so: <code>returnString += keys[i];</code> you are actually not just appending to <code>returnString</code>, you are creating an entirely new string. This is incredibly inefficient because creating a new string object takes time too! Specifically, linear in the length of the string.</p>"},{"location":"cs61b/note_en/11.%20Exceptions%2C%20Iterators%2C%20Object%20Methods/#equals","title":"<code>equals()</code>","text":"<p><code>equals()</code> and <code>==</code> have different behaviors in Java. <code>==</code> Checks if two objects are actually the same object in memory. Remember, pass-by-value! <code>==</code> checks if two boxes hold the same thing. For primitives (Integer is a class, int is a primitive type.), this means checking if the values are equal. For objects, this means checking if the address/pointer is equal.</p>"},{"location":"cs61b/note_en/11.%20Exceptions%2C%20Iterators%2C%20Object%20Methods/#equalsobject-o","title":"<code>equals(Object o)</code>","text":"<pre><code>public boolean equals(Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (other == null) {\n            return false;\n        }\n        if (other.getClass() != this.getClass()) {\n            return false;\n        }\n        ArraySet&lt;T&gt; o = (ArraySet&lt;T&gt;) other;\n        if (o.size() != this.size()) {\n            return false;\n        }\n        for (T item : this) {\n            if (!o.contains(item)) {\n                return false;\n            }\n        }\n        return true;\n    }\n</code></pre> <p>Rules for Equals in Java: When overriding a .equals() method, it may sometimes be trickier than it seems. A couple of rules to adhere to while implementing your <code>.equals()</code> method are as follows:</p> <p>1.) equals must be an equivalence relation - reflexive: x.equals(x) is true - symmetric: x.equals(y) if and only if y.equals(x) - transitive: x.equals(y) and y.equals(z) implies x.equals(z)</p> <p>2.) It must take an Object argument, in order to override the original <code>.equals()</code> method (If it takes an argument other than Object, that would be overloading.)</p> <p>3.) It must be consistent if <code>x.equals(y)</code>, then as long as x and y remain unchanged: x must continue to equal y</p> <p>4.) It is never true for null <code>x.equals(null)</code> must be false</p>"},{"location":"cs61b/note_en/12.%20Command%20Line%20Programming%2C%20Git%2C%20Project%202%20Preview/","title":"Lecture","text":"<ul> <li>Perforce - git for large files</li> </ul>"},{"location":"cs61b/note_en/12.%20Command%20Line%20Programming%2C%20Git%2C%20Project%202%20Preview/#lab-5-code-review-alone","title":"Lab 5: Code Review Alone","text":"<p><code>self_reflection.txt</code> - What was the most annoying bug you had and how did you fix it? Did you use the debugger? Did you fix it by adding special cases? Did you do any change-and-pray (where you make a tiny change and hope the AG approves)? - Did you end up cutting anything out to make your code simpler? If so, what? - Do you have any special cases in your code? - Do you have any private helper methods? - Does your code repeat itself anywhere? Would private helper methods have helped? - Were you able to call or reuse code anywhere?</p>"},{"location":"cs61b/note_en/13.%20Asymptotics%20I/","title":"Lecture","text":"<ul> <li>Now we moved our focus from saving your time to saving computer's time</li> <li>Big Theta vs. big O</li> <li>Big O: order of growth is less than or equal to f(N). (upper bound)</li> </ul>"},{"location":"cs61b/note_en/13.%20Asymptotics%20I/#overview","title":"Overview","text":"<p>Runtime Measurement. Some natural techniques: - Measure the number of seconds that a program takes to complete using a stopwatch (either physical or in software). This tells you the actual runtime, but is dependent on the machine and inputs. - Count the number of operations needed for inputs of a given size. This is a machine independent analysis, but still depends on the input, and also doesn\u2019t actually tell you how long the code takes to run. - Derive an algebraic expression relating the number of operations to the size of an input. This tells you how the algorithm scales, but does not tell you how long the code takes to run.</p> <p>Algorithm Scaling. While we ultimately care about the runtime of an algorithm in seconds, we\u2019ll often say that one algorithm is better than another simply because of how it scales. By scaling, we mean how the runtime of a piece of code grows as a function of its input size. For example, inserting at the beginning of ArrayList on an old computer might take \\(R(N)=0.0001N\\) seconds (take resize into consideration), where N is the size of the list.</p> <p>For example, if the runtime of two algorithms is \\(R1(N)=N2\\), and \\(R2(N)=5000+N\\), we\u2019d say algorithm 2 is better, even though R1 is much faster for small N.</p> <p>A rough justification for this argument is that performance critical situations are exactly those for which N is \u201clarge\u201d, though this is not an obvious fact. In almost all cases we\u2019d prefer the linear algorithm. In some limited real-world situations like matrix multiplication, one might select one algorithm for small N, and another algorithm for large N. We won\u2019t do this in 61B.</p> <p>Simplfying Algebraic Runtime. We utilize four simplifications to make runtime analysis simpler.</p> <ul> <li>Pick the operation likely happens the most times to be our cost model, e.g. # of array accesses.</li> <li>Focus on the worst case, i.e. if the number of operations is between \\(1\\) and \\(2N+1\\), consider only the \\(2N+1\\).</li> <li>Ignore small inputs, e.g. treat \\(2N+1\\) just like \\(2N\\).</li> <li>Ignore constant scaling factor, e.g. treat \\(2N\\) just like \\(N\\).</li> </ul> <p>Order of Growth. The result of applying our last 3 simplifications gives us the order of growth of a function. So for example, suppose \\(R(N)=4N2+3N+6\\), we\u2019d say that the order of growth of \\(R(N)\\) is \\(N2\\).</p> <p>Simplified Analysis. Use intuition and inspection to find the order of growth of the number of operations. One common intuitive/inspection-based approach is use geometric intuition.</p> <p>Big Theta. See CS61A Lecture 22 Efficiency.</p>"},{"location":"cs61b/note_en/13.%20Asymptotics%20I/#exercise","title":"Exercise","text":"<p>Suppose we have a function bleepBlorp, and its runtime R(N) has order of growth \u0398(N2). Which of the following can we say? - \\(R(N)\u2208\u0398(N2)\\) true, this is what order of growth means! - \\(R(N)\u2208\u0398(N2)\\) for any inputs true, this statement is exactly the same as the one above - \\(R(N)\u2208\u0398(N2)\\) for worst case inputs true, since also true for ANY input - For large N, if we run bleepBlorp on an input of size \\(N\\), and an input of size \\(10N\\), we will have to wait roughly 100 times as long for the larger input. true, this is the nature of quadratics - If we run bleepBlorp on an input of size 1000, and an input of size 10000, we will have to wait roughly 100 times as long for the larger input. false, 1000 may not be a large enough N to exhibit quadratic behavior</p>"},{"location":"cs61b/note_en/13.%20Asymptotics%20I/#efficient-programming","title":"Efficient Programming","text":""},{"location":"cs61b/note_en/13.%20Asymptotics%20I/#encapsulation-apis-adts","title":"Encapsulation, API's, ADT's","text":"<p>\u201cAn engineer will do for a dime what any fool will do for a dollar\u201d -- Paul Hilfinger</p> <p>Efficiency comes in two flavors:</p> <p>1.) Programming cost. - How long does it take to develop your programs? - How easy is it to read, modify, and maintain your code?</p> <p>2.) Execution cost (starting next week). - How much time does your program take to execute? - How much memory does your program require?</p> <p>Today, we will be focusing on how to reduce programming cost. Of course, want to keep programming costs low, both so we can write code faster and so we can have less frustrated people which will also help us write code faster (people don't code very fast when they are frustrated).</p> <p>Some helpful Java features discussed in 61B: - Packages.   - Good: Organizing, making things package private   - Bad: Specific - Static type checking.   - Good: Checks for errors early , reads more like a story   - Bad: Not too flexible, (casting) - Inheritance.   - Good: Reuse of code   - Bad: \u201cIs a\u201d, the path of debugging gets annoying, can\u2019t instantiate, implement every method of an interface</p> <p>We will explore some new ways in this chapter!</p>"},{"location":"cs61b/note_en/13.%20Asymptotics%20I/#encapsulation","title":"Encapsulation","text":"<p>We will first define a few terms: - Module: A set of methods that work together as a whole to perform some task or set of related tasks. - Encapsulated: A module is said to be encapsulated if its implementation is completely hidden, and it can be accessed only through a documented interface.</p>"},{"location":"cs61b/note_en/13.%20Asymptotics%20I/#apis","title":"API's","text":"<p>An API(Application Programming Interface) of an ADT is the list of constructors and methods and a short description of each.</p> <p>API consists of syntactic and semantic specification. - Compiler verifies that syntax is met.   - AKA, everything specified in the API is present. - Tests help verify that semantics are correct.   - AKA everything actually works the way it should.   - Semantic specification usually written out in English (possibly including usage examples). Mathematically precise formal specifications are somewhat possible but not widespread.</p>"},{"location":"cs61b/note_en/13.%20Asymptotics%20I/#adts","title":"ADT's","text":"<p>ADT's (Abstract Data Structures) are high-level types that are defined by their behaviors, not their implementations.</p> <p>i.e.) Deque in Proj1 was an ADT that had certain behaviors (addFirst, addLast, etc.). But, the data structures we actually used to implement it was ArrayDeque and LinkedListDeque</p> <p>Some ADT's are actually special cases of other ADT's. For example, Stacks and Queues are just lists that have even more specific behavior.</p>"},{"location":"cs61b/note_en/13.%20Asymptotics%20I/#extention-vs-delegation","title":"Extention vs. Delegation","text":"<p><pre><code>public class ExtensionStack&lt;Item&gt; extends LinkedList&lt;Item&gt; {\n    public void push(Item x) {\n        add(x);\n    }\n}\n</code></pre> This solution uses extension. it simply borrow the methods from LinkedList and uses them as its own. <pre><code>public class DelegationStack&lt;Item&gt; {\n    private LinkedList&lt;Item&gt; L = new LinkedList&lt;Item&gt;();\n    public void push(Item x) {\n        L.add(x);\n    }\n}\n</code></pre> This approach uses Delegation. It creates a Linked List object and calls its methods to accomplish its goal. <pre><code>public class StackAdapter&lt;Item&gt; {\n    private List L;\n    public StackAdapter(List&lt;Item&gt; worker) {\n        L = worker;\n    }\n\n    public void push(Item x) {\n        L.add(x);\n    }\n}\n</code></pre> This approach is similar to the previous one, except it can use any class that implements the List interface (Linked List, ArrayList, etc). <p>Earlier in the section define that delegation is accomplished by passing in a class while extension is defined as inheriting (just because it may be hard to notice at first glance).</p> <p>Delegation vs Extension: Right now it may seem that Delegation and Extension are pretty much interchangeable; however, there are some important differences that must be remembered when using them.</p> <ul> <li>Extension tends to be used when you know what is going on in the parent class. In other words, you know how the methods are implemented. </li> <li>Additionally, with extension, you are basically saying that the class you are extending from acts similarly to the one that is doing the extending. </li> <li>On the other hand, Delegation is when you do not want to consider your current class to be a version of the class that you are pulling the method from.</li> </ul>"},{"location":"cs61b/note_en/13.%20Asymptotics%20I/#views","title":"Views","text":"<p>Views are an alternative representation of an existed object. Views essentially limit the access that the user has to the underlying object. However, changes done through the views will affect the actual object. <pre><code>/** Create an ArrayList. */\nList&lt;String&gt; L = new ArrayList&lt;&gt;();\n/** Add some items. */\nL.add(\u201cat\u201d); L.add(\u201cax\u201d); \u2026\n</code></pre> Say you only want a list from index 1 and 4. Then you can use a method called sublist do this by the following and you will <pre><code>/** subList me up fam. */\nList&lt;String&gt; SL = l.subList(1, 4);\n</code></pre> Now why is this useful? Well say we want to reverse only this part of the original list. For example in the below image, we would want to reverse <code>ax</code> <code>ban</code> <code>bat</code> in the above picture.</p> <p></p> <p>The most intuitive way is to create a method that takes in a list object and the indices which should be reversed. However, this can be a bit painful because we add some extraneous logic.</p> <p>To get around doing this, we can just create a general reverse function that takes in a list and reverses that list. Because views mutates the underlying object that it represents, we can create a sublist like earlier and reverse the sublist. The end result would actually mutate the actual list and not the copy.</p> <p>How do you return an actual List but still have it affect another List? is a bit confusing. Well the answer is access methods. <pre><code>List&lt;Item&gt; sublist(int start, int end){\n    Return new this.Sublist(start,end);\n}\n</code></pre> This first thing to notice from the above code is that subList returns a List type. (<code>List&lt;Item&gt;</code>) <pre><code>Private class Sublist extends AbstractList&lt;Item&gt;{\n    Private int start end;\n    Sublist(inst start, int end){...}\n}\n</code></pre> Now the reason the sublist function returns a List is because the class SubList extends AbstractList. Since AbstractList implements the List interface both it and Sublist are List Types.</p>"},{"location":"cs61b/note_en/13.%20Asymptotics%20I/#the-takeaway","title":"The Takeaway:","text":"<ul> <li>APIs are pretty hard to design; however, having a coherent design philosophy can make your code much cleaner and easier to deal with.</li> <li>Inheritance is tempting to use frequently, but it has problems and should be use sparingly, only when you are certain about attributes of your classes (both those being extended and doing the extending).</li> </ul>"},{"location":"cs61b/note_en/13.%20Asymptotics%20I/#asymptotics-i-an-introduction-to-asymptotic-analysis","title":"Asymptotics I: An Introduction to Asymptotic Analysis","text":""},{"location":"cs61b/note_en/13.%20Asymptotics%20I/#summary","title":"Summary","text":"<ul> <li>Given a piece of code, we can express its runtime as a function R(N)</li> <li>N is some property of the input of the function</li> <li>i.e. oftentimes, N represents the size of the input</li> <li>Rather than finding R(N) exactly, we instead usually only care about the order of growth of R(N).</li> <li>One approach (not universal):</li> <li>Choose a representative operation</li> <li>Let C(N) = count of how many times that operation occurs, as a function of N.</li> <li>Determine order of growth \\(f(N)\\) for \\(C(N)\\), i.e. \\(C(N) \\in \\Theta(f(N))\\)</li> <li>Often (but not always) we consider the worst case count.</li> <li>If operation takes constant time, then \\(R(N) \\in \\Theta(f(N))\\)</li> </ul>"},{"location":"cs61b/note_en/14.%20Disjoint%20Sets/","title":"Lecture","text":"<ul> <li>Meta goals</li> <li>Why ListOfSetsDS is complicated and slow</li> <li>Requires iteraring through all the sets to find anything.</li> <li>The choice of building blocks for high level DS will deeply affect the code's complexity and performance</li> <li>The connect operation of HightedQuickUnion is much more complex</li> <li>The hight of HightedQuickUnion is also \\(\\Theta(log N)\\)</li> <li>Why Weight Istead of Height?</li> <li>You get no asymptotic performance gain with more complex code.</li> <li>Path Compression: close to amortized (average) constant time</li> </ul>"},{"location":"cs61b/note_en/14.%20Disjoint%20Sets/#overview","title":"Overview","text":"<p>Algorthm Development. Developing a good algorithm is an iterative process. We create a model of the problem, develop an algorithm, and revise the performance of the algorithm until it meets our needs. This lecture serves as an example of this process.</p> <p>The Dynamic Connectivity Problem. The ultimate goal of this lecture was to develop a data type that support the following operations on a fixed number N of objects: - <code>connect(int p, int q)</code> (called union in our optional textbook) - <code>isConnected(int p, int q)</code> (called connected in our optional textbook)</p> <p>We do not care about finding the actual path between p and q. We care only about their connectedness. A third operation we can support is very closely related to connected():</p> <ul> <li><code>find(int p)</code>: The <code>find()</code> method is defined so that <code>find(p) == find(q)</code> iff <code>connected(p, q)</code>. We did not use this in class, but it\u2019s in our textbook.</li> </ul> <p>Key observation: Connectedness is an equivalence relation. Saying that two objects are connected is the same as saying they are in an equivalence class. This is just fancy math talk for saying \u201cevery object is in exactly one bucket, and we want to know if two objects are in the same bucket\u201d. When you connect two objects, you\u2019re basically just pouring everything from one bucket into another.</p> <p>Quick find. This is the most natural solution, where each object is given an explicit number. Uses an array <code>id[]</code> of length N, where <code>id[i]</code> is the bucket number of object i (which is returned by <code>find(i)</code>). To connect two objects <code>p</code> and <code>q</code>, we set every object in <code>p</code>\u2019s bucket to have <code>q</code>\u2019s number. - <code>connect</code>: May require many changes to id. Takes \u0398(N) time, as algorithm must iterate over the entire array. - <code>isConnected</code> (and <code>find</code>): take constant time.</p> <p>Quick union. An alternate approach is to change the meaning of our id array. In this strategy, <code>id[i]</code> is the parent object of object i. An object can be its own parent. The <code>find()</code> method climbs the ladder of parents until it reaches the root (an object whose parent is itself). To connect <code>p</code> and <code>q</code>, we set the root of <code>p</code> to point to the root of <code>q</code>. - <code>connect</code>: Requires only one change to <code>id[]</code>, but also requires root finding (worst case \u0398(N) time). - <code>isConnected</code> (and <code>find</code>): Requires root finding (worst case \\(\u0398(N)\\) time).</p> <p>Weighted quick union. Rather than <code>connect(p, q)</code> making the root of <code>p</code> point to the root of <code>q</code>, we instead make the root of the smaller tree point to the root of the larger one. The tree\u2019s size is the number of nodes, not the height of the tree. Results in tree heights of \\(lgN\\). - <code>connect</code>: Requires only one change to id, but also requires root finding (worst case \\(lgN\\) time). - <code>isConnected</code> (and find): Requires root finding (worst case \\(lgN\\) time).</p> <p>Warning: if the two trees have the same size, the book code has the opposite convention as quick union and sets the root of the second tree to point to the root of the first tree. This isn\u2019t terribly important.</p> <p>Weighted quick union with path compression. When find is called, every node along the way is made to point at the root. Results in nearly flat trees. Making \\(M\\) calls to union and find with \\(N\\) objects results in no more than \\(O(Mlog^\u2217N)\\) array accesses, not counting the creation of the arrays. For any reasonable values of N in this universe that we inhabit, \\(log^\u2217(N)\\) is at most 5. It is possible to derive an even tighter bound, mentioned briefly in class (known as the Ackerman function).</p> Implementation Constructor connect isConnected ListOfSetsDS \u0398(N) O(N) O(N) QuickFindDS \u0398(N) \u0398(N) \u0398(1) QuickUnionDS \u0398(N) O(N) O(N) WeightedQuickUnionDS \u0398(N) O(log N) O(log N) WQU with Path Compression \u0398(N) O(\u03b1(N))* O(\u03b1(N))*"},{"location":"cs61b/note_en/14.%20Disjoint%20Sets/#example-implementation","title":"Example Implementation","text":"<p>QuickFind</p> <p>QuickUnion</p> <p>WeightedQuickUnion</p> <p>Weighted Quick Union with Path Compression</p>"},{"location":"cs61b/note_en/14.%20Disjoint%20Sets/#qa","title":"Q&amp;A","text":"<ul> <li>If the best case is N=1 in a N times for loop, can we say the best case is \\(Theta(1)\\)?</li> <li>No!</li> <li>We don't think of a small N as a \"good case\".</li> <li>The whole point of asymptotics is we want to understand the large N behavior.</li> <li>You let the N be 1 doesn't mean the program won't take N related times of opeartions.</li> <li>Sometimes we use Big O notation is because in the best case, the number of operations becomes inrelavent to N.</li> <li>Two philosophies: closely related to class or create something new</li> <li>Use pointer to improve Quick Find</li> <li>There will be redundent objects for the same set id.</li> <li>It will also becomes a O(N) solution. (Imagine you want to union a lot different pairs, the total numer is N, you need to change N/2 - 1 objects' set IDs)</li> <li>If you changes the object to be a pointer to another set id object, that will lead you to the quick union.</li> <li>Optimazing data structure is heavily rely on throw away information we don't need</li> <li>Quick sort is a algorithm that has bad worst case performance but very good practical performance</li> </ul>"},{"location":"cs61b/note_en/14.%20Disjoint%20Sets/#disjoint-sets","title":"Disjoint Sets","text":""},{"location":"cs61b/note_en/14.%20Disjoint%20Sets/#introduction","title":"Introduction","text":"<p>As a reminder, an interface determines what behaviors a data structure should have (but not how to accomplish it).</p> <p>In addition to learning about how to implement a fascinating data structure, this chapter will be a chance to see how an implementation of a data structure evolves. We will discuss four iterations of a Disjoint Sets design before being satisfied: Quick Find \u2192 Quick Union \u2192 Weighted Quick Union (WQU) \u2192 WQU with Path Compression. We will see how design decisions greatly affect asymptotic runtime and code complexity.</p>"},{"location":"cs61b/note_en/14.%20Disjoint%20Sets/#listofsets","title":"ListOfSets","text":"<p>Intuitively, we might first consider representing Disjoint Sets as a list of sets, e.g, <code>List&lt;Set&lt;Integer&gt;&gt;</code>.</p> <p>For instance, if we have N=6 elements and nothing has been connected yet, our list of sets looks like: <code>[{0}, {1}, {2}, {3}, {4}, {5}, {6}]</code>. Looks good. However, consider how to complete an operation like <code>connect(5, 6)</code>. We'd have to iterate through up to N sets to find 5 and N sets to find 6. Our runtime becomes \\(O(N)\\). And, if you were to try and implement this, the code would be quite complex.</p> <p>The lesson to take away is that initial design decisions determine our code complexity and runtime.</p>"},{"location":"cs61b/note_en/14.%20Disjoint%20Sets/#quick-find","title":"Quick Find","text":"<p>Let's consider another approach using a single array of integers. - The indices of the array represent the elements of our set. - The value at an index is the set number it belongs to.</p> <p>For example, we represent <code>{0, 1, 2, 4}, {3, 5}, {6}</code> as:</p> <p></p> <p>The array indices (0...6) are the elements. The value at <code>id[i]</code> is the set it belongs to. </p> <ul> <li>The specific set number doesn't matter as long as all elements in the same set share the same id.</li> <li>You cannot make <code>id[i]</code> as a pointer to a SetID to improve its performance. See Q&amp;A.</li> <li>We call this implementation \"Quick Find\" because finding if elements are connected takes constant time.</li> </ul> <pre><code>    /* need to iterate through the array =&gt; \u0398(N) */\n    public void connect(int p, int q){\n        int pid = id[p];\n        int qid = id[q];\n        for (int i = 0; i &lt; id.length; i++){\n            if (id[i] == pid){\n                id[i] = qid;\n            }\n        }\n    }\n\n    /* \u0398(1) */\n    public boolean isConnected(int p, int q){\n        return (id[p] == id[q]);\n    }\n</code></pre>"},{"location":"cs61b/note_en/14.%20Disjoint%20Sets/#quick-union","title":"Quick Union","text":"<p>Suppose we prioritize making the <code>connect</code> operation fast. We will still represent our sets with an array. Instead of an id, we assign each item the index of its parent. If an item has no parent, then it is a 'root' and we assign it a negative value.</p> <p></p> <p>For QuickUnion we define a helper function <code>find(int item)</code> which returns the root of the tree item is in. For example, for the sets above, <code>find(4) == 0</code>, <code>find(1) == 0</code>, <code>find(5) == 3</code>, etc. Each element has a unique root.</p> <ul> <li>To connect two items, we find the set that each item belongs to (the roots of their respective trees), and make one the child of the other.</li> <li>In the best case, if <code>x</code> and <code>y</code> are both roots of their trees, then <code>connect(x, y)</code> just makes <code>x</code> point to <code>y</code>, a \\(\\Theta(1)\\) operation! (Hence the name QuickUnion)</li> <li>For <code>isConnected(x, y)</code> we simply check if find(x) == find(y).</li> <li>In the worst case, the tree appears to be a linked list. We have to traverse all the items to get to the root, which is a \\(\\Theta(N)\\) runtime.</li> <li>From the runtime chart, QuickUnion seems worse than QuickFind! Note however that \\(O(N)\\) as an upper bound.</li> </ul> <pre><code>public class QuickUnionDS implements DisjointSets {\n    private int[] parent;\n\n    public QuickUnionDS(int num) {\n        parent = new int[num];\n        for (int i = 0; i &lt; num; i++) {\n            parent[i] = i;\n        }\n    }\n\n    private int find(int p) {\n        while (parent[p] &gt;= 0) {\n            p = parent[p];\n        }\n        return p;\n    }\n\n    @Override\n    public void connect(int p, int q) {\n        int i = find(p);\n        int j= find(q);\n        parent[i] = j;\n    }\n\n    @Override\n    public boolean isConnected(int p, int q) {\n        return find(p) == find(q);\n    }\n}\n</code></pre>"},{"location":"cs61b/note_en/14.%20Disjoint%20Sets/#weighterd-quick-union-wqu","title":"Weighterd Quick Union (WQU)","text":"<ul> <li>New rule: whenever we call connect, we always link the root of the smaller tree to the larger tree.</li> <li>We determine smaller / larger by the number of items in a tree.</li> <li>Following this rule will give your trees a maximum height of \\(\\log N\\), where N is the number of elements in our Disjoint Sets.</li> <li>By extension, the runtimes of <code>connect</code> and <code>isConnected</code> are bounded by \\(O(\\log N)\\).</li> </ul> <p>Why logN?</p> <ul> <li>Imagine any element \\(x\\) in tree \\(T1\\). </li> <li>The depth of \\(x\\) increases by \\(1\\) only when \\(T1\\) is placed below another tree \\(T2\\). </li> <li>When that happens, the size of the resulting tree will be at least double the size of \\(T1\\) because \\(size(T2) \\ge size(T1)\\). </li> <li>The tree with \\(x\\) can double at most \\(\\log_2 N\\) times until we've reached a total of N items (\\(2^{\\log_2 N} = N\\)). </li> <li>So we can double up to \\(\\log_2 N\\) times and each time, our tree adds a level \\(\\rightarrow\\) maximum \\(\\log_2 N\\) levels.</li> </ul>"},{"location":"cs61b/note_en/14.%20Disjoint%20Sets/#weighted-quick-union-with-path-compression","title":"Weighted Quick Union with Path Compression","text":"<ul> <li>The clever insight is realizing that whenever we call <code>find(x)</code> we have to traverse the path from x to root.</li> <li>So, along the way we can connect all the items we visit to their root at no extra asymptotic cost.</li> <li>Recall that both <code>connect(x, y)</code> and <code>isConnected(x, y)</code> always call <code>find(x)</code> and <code>find(y)</code>. Thus, after calling <code>connect</code> or <code>isConnected</code> enough, essentially all elements will point directly to their root.</li> <li>By extension, the average runtime of <code>connect</code> and <code>isConnected</code> becomes almost constant in the long term! This is called the amortized runtime.</li> <li>Path compression is actually even better than iterated log (\\(lg^*\\)) - it's bounded by the inverse Ackermann function \u03b1</li> </ul>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/","title":"Lecture","text":"<ul> <li>\\(2^{floor(\\log_2 N) + 1} - 1\\)</li> <li>No magic shortcul for runtime problems</li> <li>Strategies: Find exact sum. Write out examples. Draw pictures.</li> <li>Recursion Exact Counting</li> <li>There was a subtle bug in Java's official binary search (2006)</li> <li>Binary Search Exact Count</li> <li>Handy Big Theta Properties</li> <li>The floor of f has the same order of growth as f</li> <li>The ceiling of f has the same order of growth as f</li> <li>Logarithm base does not affect order of growth (change of base \\(\\log_2 N = \\frac{log_{10}N}{log_{10}2}\\), \\(\\log_{10}2\\) is a constant)</li> <li>Arbitrary units of time (AU) is not rigorous but handy and intuitive</li> <li>The Merge Operation</li> <li>Given two sorted arrays, the merge operation combines them into a single sorted arrary by successively copying the smallest item from the two arrays into a target array.</li> <li>Why Merge Sort is \\(N\\log N\\) (Linearithmic)</li> <li>\\(N^2\\) vs. \\(N\\log N\\) is an enormous difference.</li> <li>Going from \\(N\\log N\\) to \\(N\\) is nice, but not a radical change.</li> <li>Understanding every pattern takes time, but what you need to know is in this lecture</li> </ul>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#overview","title":"Overview","text":"<p>Runtime Analysis. Understanding the runtime of code involves deep thought. It amounts to asking: \u201cHow long does it take to do stuff?\u201d, where stuff can be any conceivable computational process whatsoever. It simply cannot be done mechanically, at least for non-trivial problems. As an example, a pair of nested for loops does NOT mean \\(\\Theta(N^2)\\) runtime as we saw in lecture.</p> <p>Cost Model. As an anchor for your thinking, recall the idea of a \u201ccost model\u201d from last lecture. Pick an operation and count them. You want the one whose count has the highest order of growth as a function of the input size.</p> <p>Important Sums. This is not a math class so we\u2019ll be a bit sloppy, but the two key sums that you should know are that: - \\(1+2+3+\u2026+N \\in \\Theta(N2)\\) - \\(1+2+4+8+\u2026+N \\in \\Theta(N)\\) (\\(2^{floor(\\log_2 N) + 1} - 1\\) Don't take N as the nth item in the serie)</p> <p>Practice. The only way to learn this is through plenty of practice. Make sure to work through the problems in lecture and below when you have some time.</p>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#recommended-problems","title":"Recommended Problems","text":""},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#c-level","title":"C level","text":""},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#1","title":"1","text":"<p>Q: Prove that \\(O(N+\\frac{N}{2}+\\frac{N}{4}+\u2026.2+1)=O(N)\\) (hand wavy proof is okay as long as you gain the intuition)</p> <p>A: Use the sum of geometric series \\(a (\\frac{1-r^n}{1-r})\\) where \\(n = \\log_2 N + 1\\) and \\(r = 2\\) - n stands for the postion index (nth item),  - the nth item is \\(N\\),  - every item obeys \\(a(n) = 2^{n-1}\\), - \\(a(n) = N = 2^{n-1}\\) - \\(n = \\log_2 N + 1\\)</p>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#2","title":"2","text":"<p>Q: What would the runtime of <code>modified_fib</code> be. Assume that values is an array of size n. If a value in an int array is not initialized to a number, it is automatically set to 0. <pre><code> public void modified_fib(int n, int[] values){\n   if(n &lt;= 1){\n     values[n] = n;\n     return n;\n   }\n   else{\n     int val = values[n];\n     if(val == 0){\n       val = modified_fib(n-1, values) + modified_fib(n-2, values);\n       values[n] = val;\n     }\n     return val;\n   }\n }\n</code></pre> A: \\(\\Theta(N)\\). <code>val</code> would be calculated by N-2 times;</p>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#3","title":"3","text":"<p>Q: Prove to yourself that \\(\\Theta(\\log_2(n))=\\Theta(log_3(n))\\)</p>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#b-level","title":"B level","text":""},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#1_1","title":"1","text":"<p>Q: Find the runtime of running <code>print_fib</code> with for arbitrary large n. <pre><code> public void print_fib(int n){\n   for(int i = 0; i &lt; n; i++){  // I believe here is a typo.\n       System.out.println(fib(i));\n   }\n }\n\n public int fib(int n){\n   if(n &lt;= 0){\n     return 0;\n   }\n   elif(n == 1){\n     return 1;\n   }\n   else{\n     return fib(n-1) + fib(n-2);\n   }\n }\n</code></pre> A: \\(\\Theta(n 2^n)\\) by Arithmetico\u2013geometric sequence</p>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#2_1","title":"2","text":"<p>Q: Do problem 5 again, but change the body of the for loop in print_fib to be <pre><code> System.out.println(fib(n));\n</code></pre> A: The same.</p>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#3_1","title":"3","text":"<p>Q: Find the runtime of this function <pre><code> public void melo(int N){\n   for(int i = 0; i &lt; N*N; i++){\n     System.out.println(\"Gelo is fruit pudding\");\n   }\n   for(int i = 0; i &lt; N*N*N; i++){\n     System.out.println(\"Zo Two the Warriors\");\n   }\n }\n</code></pre> A: \\(\\Theta(N^3)\\)</p>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#4","title":"4","text":"<p>Q: Find the runtime of this function <pre><code> public void grigobreath(int N){\n     if(N==0){\n       return;\n     }\n     for(int i  = 0; i &lt; N; i++){\n       System.out.println(\"Gul-great\")\n     }\n     grigobreath(N * 1/2);\n     grigobreath(N * 1/4);\n     grigobreath(N * 1/4);\n }\n</code></pre> A: \\(\\Theta(N\\log N)\\). Note that the times of loop get halved ever recursive call.</p>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#5","title":"5","text":"<p>I don't need to take exam and I just give up lol.</p> <p>Q: Problem 8 from Spring 2018 midterm #2</p>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#6","title":"6","text":"<p>Q: Problem 4 from Spring 2017 midterm #2</p>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#qa","title":"Q&amp;A","text":"<ul> <li>Is DisjointedSet used every frequently</li> <li>It's a somewhat obscure data structure.</li> <li>Limited usage, because it only determines connectivity not how things are connected.</li> <li>It's a data structure to support a number of ther algorithms (minimum spanning tree of a graph).</li> <li>I put it in the lecture first because it's weird and you don't see it normally.</li> <li>Cardinal rule: don't try and step the recursive code in the visualizer</li> <li>Space useage about merge sort</li> <li>The most naive possible way it's not that much memory.</li> <li>The total memory useage would be the entire left half.</li> <li>There is a trick that each recursive call you swap the order of the front and two array arguments. It saves you time not memory.</li> <li>Quick Union with path compression you don't need weighted for it to work well</li> </ul>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#asymptotics-ii","title":"Asymptotics II","text":""},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#recursion","title":"Recursion","text":"<p>Consider the function f3: <pre><code>public static int f3(int n) {\n   if (n &lt;= 1) \n      return 1;\n   return f3(n-1) + f3(n-1);\n}\n</code></pre></p> <p></p> <p>Our general form then is:  \\(C(N) = 1 + 2 + 4 + ... + 2^{N-1}\\)</p> <p>And this should start to look a bit familiar. Above we saw the sum of the first powers of 2: \\(1 + 2 + 4 + 8 + ... + Q = 2Q - 1\\)</p> <p>In this case, \\(Q = 2^{N-1}\\).</p> <p>So, \\(C(N) = 2Q - 1 = 2(2^{N-1}) - 1 = 2^N - 1\\)</p>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#binary-search","title":"Binary Search","text":"<p>For an animation of binary search, see these slides.</p> <p>Example Proof: Prove \\(\\lfloor f(N) \\rfloor = \\Theta (f(N))\\)</p> <p>Solution: \\(f(N) - 1/2 &lt; f(N) \\leq \\lfloor f(N) + 1/2 \\rfloor \\leq f(N) + 1/2\\) Simplifying \\(f(N) + 1/2\\) and \\(f(N) - 1/2\\) according to our big theta rules by dropping the constants, we see that they are of order \\(f(N)\\). Therefore \\(\\lfloor f(N) + 1/2 \\rfloor\\) is bounded by two expressions of order \\(f(N)\\), and is therefore also \\(\\Theta ( f(N) )\\)</p> <p>Exercise: Prove \\(\\lceil f(N) \\rceil = \\Theta (f(N))\\) Exercise: Prove \\(\\log_p(N) = \\Theta (\\log_q(N))\\)</p> <p>One cool fact to wrap up with: Log time is super good! It's almost as fast as constant time, and way better than linear time. This is why we like binary search, rather than stepping one by one through our list and looking for the right thing.</p>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#merge-sort","title":"Merge Sort","text":"<p>The development logic: - Selection Sort is \\(\\Theta(N^2)\\) - Merging two arrays is \\(\\Theta(N)\\) - The runtime for split-in-half-then-merge-them sort is \\(O(2(\\frac{N}{2})^2 + N)\\), which cloud bring better performance. - Do it again and again. - Eventually we'll reach lists of size 1. At that point, we don't even have to use selection sort, because a list with one element is already sorted.</p> <p>This is the essence of merge sort: - If the list is size 1, return. Otherwise: - Mergesort the left half - Mergesort the right half - Merge the results</p> <p>Mergesort has worst case runtime = \\(\\Theta(N \\log N)\\). - The top level takes ~N AU. - Next level takes ~N/2 + ~N/2 = ~N. - One more level down: ~N/4 + ~N/4 + ~N/4 + ~N/4 = ~N.</p> <p>Thus, total runtime is ~Nk, where k is the number of levels.</p> <p>How many levels are there? We split the array until it is length 1, so \\(k = log_2(N)\\). Thus the overall runtime is \\(\\Theta (N log N)\\).</p>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#omega-and-amortized-analysis","title":"Omega and Amortized Analysis","text":"<p>This section expands on the concept of Big O and introduces Omega. We'll also explore the idea of amortized runtimes and their analysis. Finally, we'll end on empirical analysis of runtimes and a sneak preview of complexity theory.</p>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#runtime-analysis-subtleties","title":"Runtime Analysis Subtleties","text":"<p>Big Theta expresses the exact order of as a function of the input size. However, if the runtime depends on more than just the size of the input, then we must qualify our statements into different cases before using Big Theta. Big O does away with this annoyance. Rather than having to describe both the best and worse case, for the example above, we can simply say that the runtime of dup4 is \\(O(N^2)\\). Sometimes dup4 is faster, but it's at worst quadratic.</p>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#big-o-abuse","title":"Big O Abuse","text":"<p>Consider the following statements: 1. The most expensive room in the hotel is $639 per night. 2. Every room in the hotel is less than or equal to $639 per night.</p> <p>The first one provides an exact upper bound (not only the upper bound of room prices, but also that this upper bound is reached.). However, in the second statement, the most expensive room could be less than $639.</p> <p>Exercise: Which statement gives you more information about the runtime of a piece of code? 1. The worst case runtime is \u0398(N^2). 2. The runtime is O(N^2). </p> <p>Answer: Similar to the hotel problem, the first statement provides more information. Consider the following method: <pre><code>public static void printLength(int[] a) {\n    System.out.println(a.length);\n}\n</code></pre> Both this simple method and dup4 have runtime \\(O(N^2)\\), so knowing statement 2 would not be able to distinguish between these. But statement 1 is more precise, and is only true for dup4.</p> <p>Note: Big O is NOT the same as \"worst case\". But it is often used as such.</p> <p>To summarize the usefulness of Big O:</p> <ul> <li>It allows us to make simple statements without case qualifications, in cases where the runtime is different for different inputs.</li> <li>Sometimes, for particularly tricky problems, we (the computer science community) don't know the exact runtime, so we may only state an upper bound. (Find the shortest route is \\(O(2^n)\\))</li> <li>It's a lot easier to write proofs for Big O than Big Theta, like we saw in finding the runtime of mergesort in the previous chapter. This is beyond the scope of this course.</li> </ul>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#big-omega","title":"Big Omega","text":"<p>Big Omega describes lower bounds.</p> <p>There's two common uses for Big Omega:</p> <ul> <li>It's used to prove Big Theta runtime. If \\(R(N) = O(f(N))\\) and \\(R(N) = \\Omega(f(N))\\), then \\(R(N) = \\Theta(f(N))\\). Sometimes, it's easier to prove O and \\(\\Omega\\) separately. This is outside the scope of this course.</li> <li>It's used to prove the difficulty of a problem. For example, ANY duplicate-finding algorithm must be \\(\\Omega(N)\\), because the algorithm must at least look at each element.</li> </ul>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#amortized-analysis-rigorous-explanation","title":"Amortized Analysis (Rigorous Explanation)","text":"<p>A more rigorous examination of amortized analysis is done here, in three steps:</p> <ol> <li>Pick a cost model (like in regular runtime analysis)</li> <li>Compute the average cost of the i'th operation</li> <li>Show that this average (amortized) cost is bounded by a constant.</li> </ol> <p>We'll now introduce the idea of \"potential\" to aid us in solving this amortization mystery. For each operation i, eg. each add or Grigometh visit, let \\(c_i\\) be the true cost of the operation, while \\(a_i\\) be some arbitrary amortized cost of the operation. \\(a_i\\), a constant, must be the same for all i.</p> <p>Let \\(\\Phi_i\\) be the potential at operation i, which is the cumulative difference between amortized and true cost: \\(\\Phi_i = \\Phi_{i-1} + a_i - c_i\\)</p> <p>\\(a_i\\) is an arbitrary constant, meaning we can chose it. If we chose \\(a_i\\) such that \\(\\Phi_i\\) is never negative and \\(a_i\\) is constant for all ii, then the amortized cost is an upper bound on the true cost. And if the true cost is upper bounded by a constant, then we've shown that it is on average constant time!</p> <p>Exercise: What is the value of \\(c_i\\) for ArrayList add operations? If we let the amortized cost \\(a_i = 5\\), will the potential ever become negative? Is there a smaller amortized cost that works? Fill out a table like the one for Grigometh to help with this.</p> <p>Answer: \\(c_i\\) is the total cost for array resizing and adding the new element, where \\(c_i = 2^i + 1\\) if i is a power of 2, and \\(c_i = 1\\) otherwise.</p>"},{"location":"cs61b/note_en/15.%20Asymptotics%20II/#summary","title":"Summary","text":"<ul> <li>Big O is an upper bound (\"less than or equals\")</li> <li>Big Omega is a lower bound (\"greater than or equals\")</li> <li>Big Theta is both an upper and lower bound (\"equals\")</li> <li>Big O does NOT mean \"worst case\". We can still describe worst cases using Big Theta</li> <li>Big Omega does NOT mean \"best case\". We can still describe best cases using Big Theta</li> <li>Big O is sometimes colloquially used in cases where Big Theta would provide a more precise statement</li> <li>Amortized analysis provides a way to prove the average cost of operations.</li> <li>If we chose \\(a_i\\) such that \\(\\Phi_i\\) is never negative and \\(a_i\\)\u200b is constant for all \\(i\\), then the amortized cost is an upper bound on the true cost.</li> </ul>"},{"location":"cs61b/note_en/16.%20ADTs%2C%20Sets%2C%20Maps%2C%20BSTs/","title":"Lecture","text":"<ul> <li>Skip list can get good search performance.</li> <li>BST inventing</li> <li>A rookie mistake for recursion (arm length recursion)</li> <li>BST deleting doesn't need back pointer. No spoiler</li> <li>Hibbard deletion for deleting BST' root</li> </ul>"},{"location":"cs61b/note_en/16.%20ADTs%2C%20Sets%2C%20Maps%2C%20BSTs/#overview","title":"Overview","text":"<p>Abstract Data Type. An abstract data type (ADT) is similar to an interface in that it is defined by its operations rather than its implementation. It is a layer of abstraction not tied to a particular language. Some examples of ADT\u2019s you may have seen in class so far include Lists, Sets, and Maps. Notice that a List can be implemented in several different ways (i.e. LinkedList, ArrayList) and the idea of a List is not restricted to just Java.</p> <p>Trees. A tree consists of a set of nodes and a set of edges that connect these nodes. As there exists only one path between any two nodes, there are no cycles in a tree. If a tree is rooted, every node except the root has exactly one parent. The root has no parents, and a node with no children is considered a leaf.</p> <p>Binary Search Trees. A Binary Search Tree (BST) is a rooted binary tree that maintains several key conditions to help optimize search. For a node X, every key in the left subtree is less than X\u2019s key and every key in the right subtree is greater than X\u2019s key. This aids with operations such as search since when we look for the position of a key, we can move left or right within our tree starting from the root depending on how our key compares to the key of each node.</p> <p>Runtime. BST\u2019s help optimize our search so we do not always have to look at every single element in our tree when searching for a particular key. But how much does this optimize things? For a BST that is \u201cbushy\u201d (short and fat), we can search in O(log N) time where N is the number of nodes. For a BST that is \u201cspindly\u201d (tall and skinny), our search will take O(N) time. This is because search time depends on the height of our tree, where a bushy tree has a height of log N and a spindly tree has a height of N.</p>"},{"location":"cs61b/note_en/16.%20ADTs%2C%20Sets%2C%20Maps%2C%20BSTs/#adts","title":"ADTs","text":""},{"location":"cs61b/note_en/16.%20ADTs%2C%20Sets%2C%20Maps%2C%20BSTs/#intro-to-adts","title":"Intro to ADTs","text":"<p>An Abstract Data Type (ADT) is defined only by its operations, not by its implementation.</p> <p>Some commonly used ADT's are:  - Stacks: Structures that support last-in first-out retrieval of elements     - <code>push(int x)</code>: puts x on the top of the stack     - <code>int pop()</code>: takes the element on the top of the stack   - Lists: an ordered set of elements     - <code>add(int i)</code>: adds an element     - <code>int get(int i)</code>: gets element at index i   - Sets: an unordered set of unique elements (no repeats)     - <code>add(int i)</code>: adds an element     - <code>contains(int i)</code>: returns a boolean for whether or not the set contains the value   - Maps: set of key/value pairs     - <code>put(K key, V value)</code>: puts a key value pair into the map     - <code>V get(K key)</code>: gets the value corresponding to the key</p> <p>The bolded ADT's are a subinterfaces of a bigger overarching interface called <code>Collections</code></p>"},{"location":"cs61b/note_en/16.%20ADTs%2C%20Sets%2C%20Maps%2C%20BSTs/#binary-search-trees","title":"Binary Search Trees","text":"<p>TL;DR: In binary search, we know the list is sorted, so we can use this information to narrow our search. First, we look at the middle element. If it is bigger than the element we are searching for, we look to the left of it. If it is smaller than the element we are searching for, we look to the right. We then look at the middle element of the respective halves and repeat the process until we find the element we are looking for (or don't find it because the list doesn't contain it).</p> <p>But how do we run binary search for a linked list? 1. One optimization we can implement is to have a reference to the middle node. This way, we can get to the middle in constant time. 2. Then, if we flip the nodes' pointers, which allows us to traverse to both the left and right halves, we can decrease our runtime by half! 3. We can further optimize by adding pointers to the middle of each recursive half. 4. Now, if you stretch this structure vertically, you will see a tree! 5. This specific tree is called a binary tree because each juncture splits in 2.</p>"},{"location":"cs61b/note_en/16.%20ADTs%2C%20Sets%2C%20Maps%2C%20BSTs/#properties-of-trees","title":"Properties of trees","text":"<p>Trees are composed of: - nodes - edges that connect those nodes.   - Constraint: there is only one path between any two nodes.</p> <p>In some trees, we select a root node which is a node that has no parents.</p> <p>A tree also has leaves, which are nodes with no children.</p> <p>Relating this to the original tree structure we came up with earlier, we can now introduce new constraints to the already existing constraints. This creates more specific types of trees, two examples being Binary Trees and Binary Search Trees.</p> <ul> <li> <p>Binary Trees: in addition to the above requirements, also hold the binary property constraint. That is, each node has either 0, 1, or 2 children.</p> </li> <li> <p>Binary Search Trees: in addition to all of the above requirements, also hold the property that For every node X in the tree:</p> </li> <li>Every key in the left subtree is less than X\u2019s key.</li> <li>Every key in the right subtree is greater than X\u2019s key. **Remember this property!! We will reference it a lot throughout the duration of this module and 61B.</li> </ul> <p>Here is the BST class we will be using in this module: <pre><code>private class BST&lt;Key&gt; {\n    private Key key;\n    private BST left;\n    private BST right;\n\n    public BST(Key key, BST left, BST Right) {\n        this.key = key;\n        this.left = left;\n        this.right = right;\n    }\n\n    public BST(Key key) {\n        this.key = key;\n    }\n}\n</code></pre></p>"},{"location":"cs61b/note_en/16.%20ADTs%2C%20Sets%2C%20Maps%2C%20BSTs/#search","title":"Search","text":"<pre><code>static BST find(BST T, Key sk) {\n   if (T == null)\n      return null;\n   if (sk.equals(T.key))\n      return T;\n   else if (sk &lt; T.key)\n      return find(T.left, sk);\n   else\n      return find(T.right, sk);\n}\n</code></pre>"},{"location":"cs61b/note_en/16.%20ADTs%2C%20Sets%2C%20Maps%2C%20BSTs/#insert","title":"Insert","text":"<p>We always insert at a leaf node!</p> <p>First, we search in the tree for the node. If we find it, then we don't do anything. If we don't find it, we will be at a leaf node already. At this point, we can just add the new element to either the left or right of the leaf, preserving the BST property. <pre><code>static BST insert(BST T, Key ik) {\n    if (T == null)\n        return new BST(ik);\n    else if (ik &lt; T.key)\n        T.left = insert(T.left, ik);\n    else if\n        T.right = insert(T.right, ik);\n    return T;\n}\n</code></pre> Exercise 10.2.4: Think of an order of insertions that would result in differing heights of trees. Try to find the two extreme cases for the height of a tree. Hint: Your first insertion will determine much of the behavior for the following insertions.</p>"},{"location":"cs61b/note_en/16.%20ADTs%2C%20Sets%2C%20Maps%2C%20BSTs/#delete","title":"Delete","text":"<p>Deleting from a binary tree is a little bit more complicated because whenever we delete, we need to make sure we reconstruct the tree and still maintain its BST property.</p> <p>Let's break this problem down into three categories:</p> <ul> <li>the node we are trying to delete has no children</li> <li>has 1 child</li> <li>has 2 children</li> </ul> <p>No children</p> <p>If the node has no children, it is a leaf, and we can just delete its parent pointer and the node will eventually be swept away by the garbage collector.</p> <p>One child</p> <p>If the node only has one child, we know that the child maintains the BST property with the parent of the node because the property is recursive to the right and left subtrees. Therefore, we can just reassign the parent's child pointer to the node's child and the node will eventually be garbage collected.</p> <p>Two children (Delete the root)</p> <p>If the node has two children, the process becomes a little more complicated because we can't just assign one of the children to be the new root. This might break the BST property.</p> <p>Instead, we choose a new node to replace the deleted one. (Hibbard deletion)</p> <p>We know that the new node must: - be &gt; than everything in left subtree. - be &lt; than everything right subtree.</p> <p>To find these nodes, you can just take the right-most node in the left subtree or the left-most node in the right subtree.</p>"},{"location":"cs61b/note_en/16.%20ADTs%2C%20Sets%2C%20Maps%2C%20BSTs/#bsts-as-sets-and-maps","title":"BSTs as Sets and Maps","text":"<p>We can use a BST to implement the <code>Set</code> ADT! But its even better because in an <code>ArraySet</code>, we have worst-case \\(O(n)\\) runtime to run <code>contains</code> because we need to search the entire set. However, if we use a BST, we can decrease this runtime to \\(\\log (n)\\) because of the BST property which enables us to use binary search!</p> <p>We can also make a binary tree into a map by having each BST node hold <code>(key,value)</code> pairs instead of singular values. We will compare each element's key in order to determine where to place it within our tree.</p>"},{"location":"cs61b/note_en/16.%20ADTs%2C%20Sets%2C%20Maps%2C%20BSTs/#summary","title":"Summary","text":"<p>Abstract data types (ADTs) are defined in terms of operations, not implementation.</p> <p>Several useful ADTs:</p> <ul> <li>Disjoint Sets, Map, Set, List.</li> <li>Java provides Map, Set, List interfaces, along with several implementations.</li> </ul> <p>We\u2019ve seen two ways to implement a Set (or Map):</p> <ul> <li>ArraySet: \\(\\Theta(N)\\) operations in the worst case.</li> <li>BST: \\(\\Theta(\\log N)\\) operations if tree is balanced.</li> </ul> <p>BST Implementations:</p> <ul> <li>Search and insert are straightforward (but insert is a little tricky).</li> <li>Deletion is more challenging. Typical approach is \u201cHibbard deletion\u201d.</li> </ul>"},{"location":"cs61b/note_en/16.%20ADTs%2C%20Sets%2C%20Maps%2C%20BSTs/#qa","title":"Q&amp;A","text":"<ul> <li>[https://youtu.be/wTAFtYZ4wdY?t=414]</li> <li>a) \\(\\Theta(\\log N)\\)</li> <li>c) \\(\\Theta(N^2 + N^4) \\in \\Theta(N^4)\\) (The nestedSum took (x.length^2)^2 time --&gt; N^4)</li> <li><code>for (int i=0; i &lt;= N % 10; i++) {f(N/10)};</code><ul> <li>The worst case: 99999... -&gt; runtime: \\(\\Theta (10^{\\log_{10} (N+1)})\\) (N=9 then it will run 10 times)</li> <li>So it's just \\(O(N)\\)</li> </ul> </li> <li>Mergesort can be made \"adaptive\"</li> <li>If the largest item in one array is smaller than the smallest item in other, just copy everything and no neeed compare.</li> <li>If you make this tweak and many others, you end up with Timsort.</li> <li>A general binary search tree in which every node has either zero or two children but still \\(\\Theta (N)\\)</li> </ul>"},{"location":"cs61b/note_en/17.%20B-Trees%20%282-3%2C%202-3-4%20Trees%29/","title":"Lecture","text":"<ul> <li>The expected tree height proof for randomized trees came up in 2003</li> <li>The worst case runtime for contains operation is \\(\\Theta (\\log N)\\) on a tree built with random inserts.</li> <li>Random trees including deletion are still \\(\\Theta (\\log N)\\)</li> <li>Height of B-Tree is between \\(\\log_{L+1} (N)\\) and \\(\\log_2 (N)\\)</li> <li>L: Max number of itmes per nodes</li> <li>Princeton class was far easier</li> </ul>"},{"location":"cs61b/note_en/17.%20B-Trees%20%282-3%2C%202-3-4%20Trees%29/#overview","title":"Overview","text":""},{"location":"cs61b/note_en/17.%20B-Trees%20%282-3%2C%202-3-4%20Trees%29/#bsts","title":"BSTs","text":"<p>Depth We define the depth of a node as how far it is from the root. For consistency, we say the root has a depth of 0.</p> <p>Height We define the height of a tree as the depth of the deepest node.</p> <p>Notice that depending on how we insert into our BST, our height could vary drastically. We say a tree is \u201cspindly\u201d if it has height close to N and a tree is \u201cbushy\u201d if its height is closer to logN. For operations such as getting a node, we want to have the height to be as small as possible, thus favoring \u201cbushy\u201d BSTs</p>"},{"location":"cs61b/note_en/17.%20B-Trees%20%282-3%2C%202-3-4%20Trees%29/#b-tress","title":"B-Tress","text":"<p>Two specific B-Trees in this course are 2-3 Trees (A B-Tree where each node has 2 or 3 children), and 2-3-4/2-4 Trees (A B-Tree where each node has 2, 3, or 4 children). The key idea of a B-Tree is to over stuff the nodes at the bottom to prevent increaseing the height of the tree. This allows us to ensure a max height of logN.</p> <p>Make sure you know how to insert into a B-Tree. Refer back to lecture slides for examples.</p> <p>With our restriction on height, we get that the runtime for contains and add are both \\(\\Theta (\\log N)\\)</p>"},{"location":"cs61b/note_en/17.%20B-Trees%20%282-3%2C%202-3-4%20Trees%29/#b-tree-invariants","title":"B-Tree invariants","text":"<p>Because of how we add to our tree, we get two nice invariants for B-Trees: 1. All leaves must be the same distance from the source 2. A non-leaf node with k items mut has exactly k+1 children.</p>"},{"location":"cs61b/note_en/17.%20B-Trees%20%282-3%2C%202-3-4%20Trees%29/#qa","title":"Q&amp;A","text":"<ul> <li>Why the total points keep increasing every semester</li> <li>For fun.</li> <li>It can make sure the autograder updated.</li> <li>The inner most loop that should not be the cost model</li> <li> <p>You should also notice the condition for loop</p> </li> <li>Randomness in the function itself</li> <li> <p>I believe the function itself has randomness inside should be inspected like amortized runtime quesions.</p> </li> <li> <p>You need to find the statics pattern.</p> </li> <li>Lecture 15 Level B Q4</li> <li>We can make sure the runtime is \\(O(N \\log N)\\), by two lines above.</li> <li>It turns out it's \\(\\Theta (N\\log N)\\). (has a \\(\\Omega (N \\log N)\\) lower bound)</li> <li>I don't find a nice way to proof this.</li> <li>Difference between ADT and interface</li> <li>The idea of ADT was captured by interface in Java.</li> <li>They are not the exact same thing because there are languages that don't have interface.</li> <li>Proactive and reactive inplementation of B-trees</li> <li>I guess proactive is better, but reactive is easy to write and teach.</li> <li>Why you choose left-middle number in B-Trees</li> <li>Arbitrary. You can also choose the left-most number, but the implementation would be harder.</li> <li>Extremely high probability, almost guaranted for a random tree to be a \\(\\log N\\) height BST</li> </ul>"},{"location":"cs61b/note_en/17.%20B-Trees%20%282-3%2C%202-3-4%20Trees%29/#balanced-trees","title":"Balanced Trees","text":""},{"location":"cs61b/note_en/17.%20B-Trees%20%282-3%2C%202-3-4%20Trees%29/#intro-to-balanced-search-trees","title":"Intro to Balanced Search Trees","text":""},{"location":"cs61b/note_en/17.%20B-Trees%20%282-3%2C%202-3-4%20Trees%29/#bst-performance","title":"BST Performance","text":"<p>Some terminology for BST performance: - depth: the number of links between a node and the root. - height: the lowest depth of a tree. - average depth: average of the total depths in the tree. You calculate this by taking \\(\\frac{\\sum_{i=0}^D{d_in_i}}{N}\\) where \\(d_i\\) is depth and \\(n_i\\) is number of nodes at that depth.</p> <p>The height of the tree determines the worst-case runtime, because in the worst case the node we are looking for is at the bottom of the tree.</p> <p>The average depth determines the average-case runtime.</p>"},{"location":"cs61b/note_en/17.%20B-Trees%20%282-3%2C%202-3-4%20Trees%29/#bst-insertion-order","title":"BST insertion order","text":"<p>You don't have to know the proof of this, but when we insert randomly into a BST the average depth and height are expected to be \\(\\Theta(log N)\\).</p> <p>However, we won't always be able to insert into a BST in random order. What if our data comes in real-time? Then, we will be forced to insert in the order that data comes to us.</p> <p>In the next chapter we will learn about a tree that always maintains its balance!</p>"},{"location":"cs61b/note_en/17.%20B-Trees%20%282-3%2C%202-3-4%20Trees%29/#b-trees","title":"B-Trees","text":"<p>Inventing logic: 1. The problem with BST's is that we always insert at a leaf node. 2. Let's just never add a leaf node! When we insert, let's just add to a current leaf node. This way, the height will never increase. 3. We still have to look through that node as if we are looking through an array in order to get to the 19 element. 4. Set a limit on the number of elements in a single node. When it already has 4 elements, we will split the node in half. by bumping up the middle left node.</p>"},{"location":"cs61b/note_en/17.%20B-Trees%20%282-3%2C%202-3-4%20Trees%29/#insertion-process","title":"Insertion Process","text":"<p>The process of adding a node to a 2-3-4 tree is:</p> <ol> <li>We still always inserting into a leaf node, so take the node you want to insert and traverse down the tree with it, going left and right according to whether or not the node to be inserted is greater than or smaller than the items in each node.</li> <li>After adding the node to the leaf node, if the new node has 4 nodes, then pop up the middle left node and re-arrange the children accordingly.</li> <li>If this results in the parent node having 4 nodes, then pop up the middle left node again, rearranging the children accordingly.</li> <li>Repeat this process until the parent node can accommodate or you get to the root.</li> </ol>"},{"location":"cs61b/note_en/17.%20B-Trees%20%282-3%2C%202-3-4%20Trees%29/#b-tree-invariants_1","title":"B-Tree invariants","text":"<p>Question: Is the order matters when inserting into a B-Tree?</p> <p>Solution: Consider inserting 1-7 into a B-tree. We can get a tree of height 1 by inserting in this order: 2, 3, 4, 5, 6, 1, 7. So yes, depending on the order you insert nodes the height of a B-tree may change. However, the tree will always be bushy.</p> <p>A B-tree has the following helpful invariants: - All leaves must be the same distance from the source. - A non-leaf node with \\(k\\) items must have exactly \\(k+1\\) children.</p> <p>In tandem, these invariants cause the tree to always be bushy.</p>"},{"location":"cs61b/note_en/17.%20B-Trees%20%282-3%2C%202-3-4%20Trees%29/#b-tree-runtime-analysis","title":"B-Tree runtime analysis","text":"<p>The worst-case runtime situation for search in a B-tree would be if each node had the maximum number of elements in it and we had to traverse all the way to the bottom. We will use \\(L\\) to denote the number of elements in each node. This means would would need to explore \\(\\log N\\) nodes (since the max height is \\(\\log N\\) due to the bushiness invariant) and at each node we would need to explore \\(L\\) elements. In total, we would need to run \\(L \\log N\\) operations. However, we know \\(L\\) is a constant, so our total runtime is \\(O(\\log N)\\).</p>"},{"location":"cs61b/note_en/17.%20B-Trees%20%282-3%2C%202-3-4%20Trees%29/#2-3-tree-deletion","title":"2-3 Tree Deletion","text":"<p>In a 2-3 Tree, when we delete \u03b1 from a node with 2 or more children, we: - Swap the value of the successor with \u03b1. - Then we delete the successor value. (Successor will always be in a leaf node!)</p> <p>If deleting from a leaf with multiple keys, the deletion is trivial. We simply remove the item from the leaf, and we are done.</p> <p>If our leaf has a single key, we cannot simply remove the node entirely. - Any node with k items must have k + 1 children! - Instead, we\u2019ll leave an empty node, which must be filled. - Filling the empty node is complex and has many cases (coming soon).   - FIEN Case 1A: Multi-Key Sibling   - FIEN Case 2A: Multi-Key Parent   - FIEN Case 3: Single-Key Parent and Sibling</p>"},{"location":"cs61b/note_en/18.%20Red%20Black%20Trees/","title":"Lecture","text":"<ul> <li>B-Trees are a real pain to implement, and suffer from performance problems.</li> <li>Maintaining different node types.</li> <li>Interconversion of nodes between 2-nodes and 3-nodes.</li> <li>Walking up the tree to split nodes.</li> <li>Catalan number in CS thoery</li> <li>Related to recursive datas tructure</li> <li>We can move from any configuration to any other in 2n - 6 rotations</li> <li><code>rotateLeft</code> a node with no right child is undefined</li> <li>\"Red\" (glue links) are used commonly used in practice (e.g. java.util.TreeSet)</li> <li>Java's TreeMap is not left leaning and 2-3-4 red-black tree</li> <li>Maintains correspondence  with 2-3-4 tree (is not a 1-1 correspondence).</li> <li>Allows glue links on either side.</li> <li>More complex implementation, said significantly faster. (Josh didn't analyze by himself)</li> <li>Other self balancing trees and sets and maps implementation</li> <li>Red-black tree is one of the best.</li> </ul>"},{"location":"cs61b/note_en/18.%20Red%20Black%20Trees/#qa","title":"Q&amp;A","text":"<ul> <li>A program for runtime analysis is mathematically impossible</li> <li>LLRB is a relatively recent idea</li> <li>It's didactic, has equally good asymptotic runtime and really clear mathematical idea.</li> <li>But the constant is worse than standard red-black trees.</li> <li>Clean Hibbard Deletion is very hard to write</li> <li>Josh predicted joint gaussian distribution prblem in his possibility course exam</li> <li>Joint pdf for joint gaussian.</li> <li>Hibbard Deletion runtime</li> <li>Finding the item should be \\(O \\log(N)\\).</li> <li>Finding the successor should be \\(O \\log(N)\\).</li> <li>Changing four pointers.</li> <li>Should be \\(\\log (N)\\) time.</li> <li>The ability to convince myself that my code works and extricate myself from situations that doesn't</li> <li>Josh's ratio for producing tutorial is 15:1 to 20:1</li> <li>When being asked the favorite computer scientist, Josh first thought about Masters of Deception</li> <li>\"Crime\" is the keyword for early topic.</li> <li>Josh loved the book.</li> <li>Strogatz wrote a really good book on nonlinear dynamics.</li> <li>Scott Aaronson</li> <li>Review starting from BST</li> </ul>"},{"location":"cs61b/note_en/18.%20Red%20Black%20Trees/#balanced-trees","title":"Balanced Trees","text":""},{"location":"cs61b/note_en/18.%20Red%20Black%20Trees/#rotating-trees","title":"Rotating Trees","text":"<p>The formal definition of rotation is:</p> <p><code>rotateLeft(G): Let x be the right child of G. Make G the new left child of x.</code> <code>rotateRight(G): Let x be the left child of G. Make G the new right child of x.</code></p> <p>G's right child, P, merges with G, bringing its children along. P then passes its left child to G and G goes down to the left to become P's left child. You can see that the structure of the tree changes as well as the number of levels. We can also rotate on a non-root node. We just disconnect the node from the parent temporarily, rotate the subtree at the node, then reconnect the new root.</p> <pre><code>private Node rotateRight(Node h) {\n    // assert (h != null) &amp;&amp; isRed(h.left);\n    Node x = h.left;\n    h.left = x.right;\n    x.right = h;\n    return x;\n}\n\n// make a right-leaning link lean to the left\nprivate Node rotateLeft(Node h) {\n    // assert (h != null) &amp;&amp; isRed(h.right);\n    Node x = h.right;\n    h.right = x.left;\n    x.left = h;\n    return x;\n}\n</code></pre> <p>Demo: Balancing with Tree Rotation</p>"},{"location":"cs61b/note_en/18.%20Red%20Black%20Trees/#red-black-trees","title":"Red-Black Trees","text":"<p>We said in the previous section that we really like 2-3 trees because they always remain balanced, but we also don't like them because they are hard to implement. But why not both? Why not create a tree that is implemented using a BST, but is structurally identical to a 2-3 tree and thus stays balanced? (Note that in this chapter we will be honing in on 2-3 Trees specifically, not 2-3-4 trees)</p>"},{"location":"cs61b/note_en/18.%20Red%20Black%20Trees/#enter-the-red-black-tree","title":"Enter the Red-Black Tree","text":"<ul> <li>For a 2-3 tree that only has 2-nodes (nodes with 2 children), we already have a BST.</li> <li>What happens when we get a 3-node?</li> <li>One thing we could do is create a \"glue\" node that doesn't hold any information and only serves to show that its 2 children are actually a part of one node.</li> <li>This is a very inelegant solution because we are taking up more space and the code will be ugly.</li> <li>We will use glue links instead</li> <li>We choose arbitrarily to make the left element a child of the right one. This results in a left-leaning tree.</li> <li>We make glue link red. Normal links are black. Because of this, we call these structures left-leaning red-black trees (LLRB).</li> </ul> <p>Left-Leaning Red-Black trees have a 1-1 correspondence with 2-3 trees. Every 2-3 tree has a unique LLRB red-black tree associated with it. As for 2-3-4 trees, they maintain correspondence with standard Red-Black trees.</p>"},{"location":"cs61b/note_en/18.%20Red%20Black%20Trees/#properties-of-llrbs","title":"Properties of LLRB's","text":"<p>Here are the properties of LLRB's:</p> <ul> <li>1-1 correspondence with 2-3 trees.</li> <li>No node has 2 red links.</li> <li>There are no red right-links.</li> <li>Every path from root to leaf has same number of black links (because 2-3 trees have same number of links to every leaf).</li> <li>Height is no more than 2x height of corresponding 2-3 tree. (max should be H (every black link) + H (every child-node contains a red link) + 1 (root node can also have red link) = 2H+1)</li> </ul>"},{"location":"cs61b/note_en/18.%20Red%20Black%20Trees/#inserting-into-llrb","title":"Inserting into LLRB","text":"<p>We can always insert into a LLRB tree by inserting into a 2-3 tree and converting it using the scheme from above. However, this would be contrary to our original purpose of creating a LLRB. Instead, we insert into the LLRB as we would with a normal BST with a few rules.</p> <ul> <li>The color of the link we add should always be red.</li> <li>Because in a 2-3 tree, we are always inserting by adding to a leaf node.</li> <li>If we insert on the right, we will need to use a left rotation to change its structure to left-leaning.</li> <li>We are using left-leaning red black trees, which means we can never have a right red link.</li> <li>However, if we were to insert on the right with a red link and the left child is also a red link, then we will temporarily allow it.</li> <li>If there are 2 left red links, we will right rotate the top node to create the same tree seen above.</li> <li>Then, in both situations, we will flip the colors of all edges touching the node.</li> <li>This operation is recursive, e.g, you flip the edge above, and the node above have two red links.</li> </ul> <p>You may need to go through a series of rotations in order to complete the transformation. The process is: while the LLRB tree does not satisfy the 1-1 correspondence with a 2-3 tree or breaks the LLRB invariants, perform task depending on the condition of the tree until you get a legal LLRB.</p>"},{"location":"cs61b/note_en/18.%20Red%20Black%20Trees/#runtime","title":"Runtime","text":"<p>Because a left-leaning red-black tree has a 1-1 correspondence with a 2-3 tree and will always remain within 2x the height of its 2-3 tree, the runtimes of the operations will take \\(\\log N\\) time.</p> <p>Here's the abstracted code for insertion into a LLRB: <pre><code>private Node put(Node h, Key key, Value val) {\n    if (h == null) { return new Node(key, val, RED); }\n\n    int cmp = key.compareTo(h.key);\n    if (cmp &lt; 0)      { h.left  = put(h.left,  key, val); }\n    else if (cmp &gt; 0) { h.right = put(h.right, key, val); }\n    else              { h.val   = val;                    }\n\n    if (isRed(h.right) &amp;&amp; !isRed(h.left))      { h = rotateLeft(h);  }\n    if (isRed(h.left)  &amp;&amp;  isRed(h.left.left)) { h = rotateRight(h); }\n    if (isRed(h.left)  &amp;&amp;  isRed(h.right))     { flipColors(h);      } \n\n    return h;\n}\n</code></pre> Look how short and sweet!</p>"},{"location":"cs61b/note_en/18.%20Red%20Black%20Trees/#summary","title":"Summary","text":"<ul> <li>Binary search trees are simple, but they are subject to imbalance which leads to crappy runtime.</li> <li>2-3 Trees (B Trees) are balanced, but painful to implement and relatively slow.</li> <li>LLRBs insertion is simple to implement (but deletion is hard).</li> <li>Works by maintaining mathematical bijection with a 2-3 trees.</li> <li>Java\u2019s <code>TreeMap</code> is a red-black tree (but not left leaning).</li> <li>LLRBs maintain correspondence with 2-3 tree, Standard Red-Black trees maintain correspondence with 2-3-4 trees.</li> <li>Allows glue links on either side (see Red-Black Tree).</li> <li>More complex implementation, but significantly faster.</li> </ul>"},{"location":"cs61b/note_en/19.%20Hashing/","title":"Lecture","text":"<ul> <li>Hash Codes and the Pigeonhole Principle</li> <li>Hash Table is the most popular way to implemente a set or map</li> <li>Natural % (-1 % 4 = 3) in Java is <code>Math.floorMod</code></li> <li><code>-1 % 4 == -1</code></li> <li><code>Math.floorMod</code> is for other purpose. It happened to have the function we want.</li> <li>\\(-1 = 4(-1) + 3\\)</li> <li>The default % requires <code>(a / b) * b + a % b == a</code>.</li> <li><code>(-1 / 4) * 4 == 0 * 4 == 0</code>, thus <code>-1 % 4 == -1</code>.</li> <li>Good HashCode philosophy</li> <li>Java 8 hash code for strings represents strings as base 31 number.</li> <li>Real hash codes don't care about uniqueness.</li> <li>Stores calculated has code so future <code>hashCode</code> calls are faster.</li> <li>In Base 126, any string that ends in the same last 32 characters has the same hash code</li> <li>Because of overflow.</li> <li>A typical hash code base is a small prime</li> <li>Using a prime base yields better \"randomness\" (back reference to Good HashCode philosophy)</li> <li>Examples on hashing a collection and recursive data sturectures</li> </ul>"},{"location":"cs61b/note_en/19.%20Hashing/#overview","title":"Overview","text":"<p>Brute force approach. All data is just a sequence of bits. Can treat key as a gigantic number and use it as an array index. Requires exponentially large amounts of memory.</p> <p>Hashing. Instead of using the entire key, represent entire key by a smaller value. In Java, we hash objects with a hashCode() method that returns an integer (32 bit) representation of the object.</p> <p>hashCode() to index conversion. To use hashCode() results as an index, we must convert the <code>hashCode()</code> to a valid index. Modulus does not work since hashCode may be negative. Taking the absolute value then the modulus also doesn\u2019t work since <code>Math.abs(Integer.MIN_VALUE)</code> is negative. Typical approach: use hashCode &amp; 0x7FFFFFFF instead before taking the modulus.</p> <p>Hash function. Converts a key to a value between 0 and M-1. In Java, this means calling <code>hashCode()</code>, setting the sign bit to 0, then taking the modulus.</p> <p>Designing good hash functions. Requires a blending of sophisticated mathematics and clever engineering; beyond the scope of this course. Most important guideline is to use all the bits in the key. If <code>hashCode()</code> is known and easy to invert, adversary can design a sequence of inputs that result in everything being placed in one bin. Or if <code>hashCode()</code> is just plain bad, same thing can happen.</p> <p>Uniform hashing assumption. For our analyses below, we assumed that our hash function distributes all input data evenly across bins. This is a strong assumption and never exactly satisfied in practice.</p> <p>Collision resolution. Two philosophies for resolving collisions discussed in class: Separate (a.k.a. external) chaining and \u2018open addressing\u2019.</p> <p>Separate-chaining hash table. Key-value pairs are stored in a linked list of nodes of length M. Hash function tells us which of these linked lists to use. Get and insert both require potentially scanning through entire list.</p> <p>Resizing separate chaining hash tables. Understand how resizing may lead to objects moving from one linked list to another. Primary goal is so that M is always proportional to N, i.e. maintaining a load factor bounded above by some constant.</p> <p>Performance of separate-chaining hash tables. Cost of a given get, insert, or delete is given by number of entries in the linked list that must be examined.   - The expected amortized search and insert time (assuming items are distributed evenly) is N / M, which is no larger than some constant (due to resizing).</p> <p>Linear-probing hash tables. We didn\u2019t go over this in detail in 61B, but it\u2019s where you use empty array entries to handle collisions, e.g. linear probing. Not required for exam.</p>"},{"location":"cs61b/note_en/19.%20Hashing/#hashing","title":"Hashing","text":""},{"location":"cs61b/note_en/19.%20Hashing/#issues-with-what-weve-seen-so-far","title":"Issues with what we've seen so far","text":"<p>So far, we've looked at a few data structures for efficiently searching for the existence of items within the data structure. We looked at Binary Search Trees, then made them balanced using 2-3 Trees.</p> <p>However, there are some limitations that these structures impose (yes, even 2-3 trees!)</p> <ul> <li>They require that items be comparable. How do you decide where a new item goes in a BST? You have to answer the question \"are you smaller than or bigger than the root\"? For some objects, this question may make no sense.</li> <li>They give a complexity of \\(\\Theta(\\log N)\\). Is this good? Absolutely. But maybe we can do better.</li> </ul>"},{"location":"cs61b/note_en/19.%20Hashing/#a-first-attempt-dataindexedintegerset","title":"A first attempt: <code>DataIndexedIntegerSet</code>","text":"<p>Let us begin by considering the following approach.</p> <p>For now, we're only going to try to improve issue #2 above (improve complexity from \\(\\Theta(\\log N)\\) to \\(\\Theta(1)\\). We're going to not worry about issue #1 (comparability). In fact, we're going to only consider storing and searching for <code>int</code>s.</p> <p>Here's an idea: let's create an ArrayList of type boolean and size 2 billion. Let everything be <code>false</code> by default.</p> <ul> <li>The <code>add(int x)</code> method simply sets the x position in our ArrayList to true. This takes \\(\\Theta(1)\\) time.</li> <li>The <code>contains(int x)</code> method simply returns whether the <code>x</code> position in our ArrayList is <code>true</code> or <code>false</code>. This also takes \\(\\Theta(1)\\) time!</li> </ul> <p>What are some potential issues with this approach?</p> <ul> <li>Extremely wasteful. If we assume that a <code>boolean</code> takes 1 byte to store, the above needs 2GB of space per <code>new DataIndexedIntegerSet()</code>. Moreover, the user may only insert a handful of items...</li> <li>What do we do if someone wants to insert a <code>String</code>?</li> <li>Let's look at this next. Of course, we may want to insert other things, like Dogs. That'll come soon!</li> </ul>"},{"location":"cs61b/note_en/19.%20Hashing/#solving-the-word-insertion-problem","title":"Solving the word-insertion problem","text":""},{"location":"cs61b/note_en/19.%20Hashing/#strategy-1-use-the-first-letter","title":"Strategy 1: Use the first letter.","text":""},{"location":"cs61b/note_en/19.%20Hashing/#strategy-2-avoiding-collisions","title":"Strategy 2: Avoiding collisions","text":"<p>Any 4 digit number can be written uniquely in this form. What that means is given 4 digits, \\(a, b, c, d\\) we can write a \\(\\cdot 10^3 + b \\cdot 10^2 + c \\cdot 10^1 + d \\cdot 10^0\\) and that gives us a unique 4 digit number: \\(abcd\\).</p> <p>Why is \\(10\\)? It's because there are 10 unique digits in our decimal system: \\(0, 1, 2, 3, 4, 5, 6, 7, 8, 9\\).</p> <p>Similarly, there are \\(26\\) unique characters in the english lowercase alphabet. Why not give each one a number: \\(a=1, b=2, \\ldots, z=26\\). Now, we can write any unique lowercase string in base 26. </p> <p>This representation gives a unique integer to every english word containing lowercase letters, much like using base 10 gives a unique representation to every number. We are guaranteed to not have collisions.</p>"},{"location":"cs61b/note_en/19.%20Hashing/#where-are-we","title":"Where are we?","text":"<p>Recall, we started with wanting to</p> <ul> <li> <p>Be better than \\(\\Theta(\\log N)\\). We've now done this for integers and for single english words.</p> </li> <li> <p>Allow for non-comparable items. We haven't touched this yet, although we are getting there. So far, we've only learnt how to add integers and english words, both of which are comparable, but, have we ever used the fact that they are comparable? I.e., have we ever tried to compare them (like we did in BSTs)? No. So we're getting there, but we haven't actually inserted anything non-comparable yet.</p> </li> <li> <p>We have data structures that insert integers and english words. Let's make a quick visit to inserting arbitrary <code>String</code> objects, with spaces and all that. And maybe even insert other languages and emojis!</p> </li> <li> <p>Further recall that our approach is still very wasteful of memory. We haven't solved that issue yet!</p> </li> </ul>"},{"location":"cs61b/note_en/19.%20Hashing/#handling-integer-overflow-and-hash-codes","title":"Handling Integer Overflow and Hash Codes","text":""},{"location":"cs61b/note_en/19.%20Hashing/#overflow-issues","title":"Overflow issues","text":""},{"location":"cs61b/note_en/19.%20Hashing/#the-inevitable-truth","title":"The inevitable truth.","text":"<p>From the smallest to the largest possible integers, there are a total of 4,294,967,296 integers in Java. Yet, there are more than that many total objects that could be created in Java, and so collision is inevitable.</p> <p>We must handle collisions.</p>"},{"location":"cs61b/note_en/19.%20Hashing/#a-subtle-point","title":"A subtle point","text":"<p>Note that our problem is not inherently the fact that overflow exists. All we wanted was for a way to convert a <code>String</code> to a number. Even if overflow exists, we do manage to convert a <code>String</code> to a number. The inherent problem is caused by the fact that overflow causes collisions, which we don't know how to deal with.</p> <p>Overflow is often bad in other contexts, for instance, it has some unexpected results if you don't know that overflow happens. But here, overflow's existence doesn't ruin the fact that we wanted to convert a <code>String</code> to an <code>int</code>. So, we have that going for us.</p>"},{"location":"cs61b/note_en/19.%20Hashing/#hash-codes","title":"Hash Codes","text":"<p>In computer science, taking an object and converting it into some integer is called \"computing the hash code of the object\". For instance, the hashcode of \"melt banana\" is 839099497.</p> <p>We looked at how to compute this hashcode for Strings. For other Objects, there are one of two things we do:</p> <ul> <li>Every Object in Java has a default <code>.hashcode()</code> method, which we can use. Java computes this by figuring out where the <code>Object</code> sits in memory (every section of the memory in your computer has an address!), and uses that memory's address to do something similar to what we did with Strings. This methods gives a unique hashcode for every single Java object.</li> <li>Sometimes, we write our own <code>hashCode</code> method. For example, given a <code>Dog</code>, we may use a combination of its <code>name</code>, <code>age</code> and <code>breed</code> to generate a <code>hashcode</code>.</li> </ul>"},{"location":"cs61b/note_en/19.%20Hashing/#properties-of-hashcodes","title":"Properties of HashCodes","text":"<p>Hash codes have three necessary properties, which means a hash code must have these properties in order to be valid:</p> <ol> <li>It must be an Integer</li> <li>If we run <code>.hashCode()</code> on an object twice, it should return the same number</li> <li>Two objects that are considered <code>.equal()</code> must have the same hash code.</li> </ol> <p>Not all hash codes are created equal, however. If you want your hash code to be considered a good hash code, it should: - Distribute items evenly</p> <p>Note that at this point, we know how to add arbitrary objects to our data structure, not only strings.</p>"},{"location":"cs61b/note_en/19.%20Hashing/#pending-issues","title":"Pending issues","text":"<ul> <li>Space: we still haven't figured out how to use less space.</li> <li>Handling Collisions: we have determined that we need to handle collisions, but we haven't actually handled them yet.</li> </ul>"},{"location":"cs61b/note_en/19.%20Hashing/#handling-collisions","title":"Handling Collisions","text":"<p>Time to address the elephant in the room. The big idea is to change our array ever so slightly to not contain just items, but instead contain a LinkedList (or any other List) of items. So...</p> <p>Everything in the array is originally empty. If we get a new item, and its hashcode is \\(h\\):</p> <ul> <li>If there is nothing at index \\(h\\) at the moment, we'll create a new <code>LinkedList</code> for index \\(h\\), place it there, and then add the new item to the newly created <code>LinkedList</code>.</li> <li>If there is already something at index \\(h\\), then there is already a <code>LinkedList</code> there. We simply add our new item to that <code>LinkedList</code>. </li> </ul> <p>Note: Our data structure is not allowed to have any duplicate items / keys. Therefore, we must first check whether the item we are trying to insert is already in this LinkedList. If it is, we do nothing! This also means that we will insert to the END of the linked list, since we need to check all of the elements anyways.</p>"},{"location":"cs61b/note_en/19.%20Hashing/#concrete-workflow","title":"Concrete workflow","text":"<ul> <li><code>add</code> item</li> <li>Get hashcode (i.e., index) of item.</li> <li>If index has no item, create new List, and place item there.</li> <li>If index has a List already, check the List to see if item is already in there. If not, add item to List.</li> <li><code>contains</code> item</li> <li>Get hashcode (i.e., index) of item.</li> <li>If index is empty, return false.</li> <li>Otherwise, check all items in the List at that index, and if the item exists, return true.</li> </ul>"},{"location":"cs61b/note_en/19.%20Hashing/#runtime-complexity","title":"Runtime Complexity","text":"<p>Why is contains \\(\\Theta(Q)\\)?</p> <p>Because we need to look at all the items in the LinkedList at the hashcode (i.e., index).</p> <p>Why is add \\(\\Theta(Q)\\)?</p> <p>Can't we just add to the beginning of the <code>LinkedList</code>, which takes \\(\\Theta(1)\\) time? No! Because we have to check to make sure the item isn't already in the linked list.</p>"},{"location":"cs61b/note_en/19.%20Hashing/#you-gain-some-you-lose-some","title":"You gain some, you lose some.","text":"<ul> <li>Space: Still unsolved.</li> <li>Handling collisions: done.</li> <li>Runtime complexity? We've lost some. In the worst case, all of our items' hashcode could be the same, and so they all go to the same index. If we have \\(N\\) items, it's possible that they all go to the same index, creating a linked list of length \\(N\\), providing a runtime of \\(\\Theta(N)\\).</li> </ul>"},{"location":"cs61b/note_en/19.%20Hashing/#solving-space","title":"Solving space","text":""},{"location":"cs61b/note_en/19.%20Hashing/#why-keep-an-arraylist-of-size-4-billion-around","title":"Why keep an ArrayList of size 4 billion around?","text":"<p>Because we wanted to be able to add every <code>integer</code> / word / <code>String</code> to our data structure. But now that we allow for collisions anyway, we can relax this a bit.</p> <p>An idea: modulo.</p>"},{"location":"cs61b/note_en/19.%20Hashing/#where-we-are","title":"Where we are?","text":"<ul> <li>Space: Has been solved.</li> <li>Handling collisions: Done!</li> <li>Runtime complexity? We lost some earlier at \\(\\Theta(Q)\\) for <code>add</code> and <code>contains</code>, and then in the <code>Solving</code> space section, we realized that we lost some more because our <code>LinkedLists</code> will potentially be larger (so <code>Q</code> will be larger.)</li> </ul>"},{"location":"cs61b/note_en/19.%20Hashing/#our-final-data-structure-hashtable","title":"Our Final Data Structure: <code>HashTable</code>","text":"<p>What we've created now is called a <code>HashTable</code>.</p> <ul> <li>Inputs are converted by a hash function (<code>hashcode</code>) into an integer. Then, they're converted to a valid index using the modulus operator (reduce function). Then, they're added at that index (dealing with collisions using <code>LinkedLists</code>).</li> <li>contains works in a similar fashion by figuring out the valid index, and looking in the corresponding <code>LinkedList</code> for the item.</li> </ul>"},{"location":"cs61b/note_en/19.%20Hashing/#dealing-with-runtime","title":"Dealing with Runtime","text":"<p>In the worst case, all items get sent to the same index! That is, we have just 1 LinkedList, and it has all 100 items.</p> <p>There are two ways to try to fix this: - Dynamically growing our hashtable. - Improving our Hashcodes</p>"},{"location":"cs61b/note_en/19.%20Hashing/#dynamically-growing-the-hash-table","title":"Dynamically growing the hash table","text":"<p>Suppose we have \\(M\\) buckets (indices) and \\(N\\) items. We say that our load factor is \\(N/M\\). (Note that the load factor is equivalent to our best case runtime, which items are evenly distributed)</p> <ol> <li>We have incentive to keep our load factor low (after all, it is the best runtime we could possible achieve!).</li> <li>We do this by setting a load factor threshold. As soon as the load factor becomes bigger than this threshold, we resize.</li> <li>At this point, assuming items are evenly distributed, all the lists will be approximately \\(N/M\\) items long, resulting in \\(\\Theta(N/M)\\) runtime. Remember that \\(N/M\\) is only allowed to be under a constant load factor threshold, and so, \\(\\Theta(N/M) = \\Theta(1)\\).</li> <li>Note also that resizing takes \\(\\Theta(N)\\) time.</li> <li>Of course, we need to revisit our assumption of assuming items are evenly distributed. If items are not evenly distributed, our runtime will be \\(\\Theta(N)\\) because there could be a single linked list of size \\(N\\).</li> </ol> <p>A small point: when doing the resize, we don't actually need to check if the items are already present in the <code>LinkedList</code> or not (because we know there are no duplicates), so we can just add each item in \\(\\Theta(1)\\) time for sure by adding it to the front of the linked list. (Recall that usually we have to search the <code>LinkedList</code> to make sure the item isn't there... but we can skip that step when resizing.)</p>"},{"location":"cs61b/note_en/19.%20Hashing/#evenly-distributed","title":"Evenly distributed?","text":"<p>Items will distribute evenly if we have good hash codes (i.e. hashcodes which give fairly random values for different items.) Doing this in general is.. well... hard.</p> <p>Some general good rules of thumb:</p> <ul> <li>Use a 'base' strategy similar to the one we developed earlier.</li> <li>Use a 'base' that's a small prime.</li> <li>Base 126 isn't actually very good, because using base 126 means that any string that ends in the same last 32 characters has the same hashcode.</li> <li>This happens because of overflow.</li> <li>Using prime numbers helps avoid overflow issues (i.e., collisions due to overflow).</li> <li>Why a small prime? Because it's easier to compute.</li> </ul>"},{"location":"cs61b/note_en/20.%20Heaps%20and%20PQs/","title":"Lecture","text":"<ul> <li>Heaps in data structure are completely unrelated to heaps in Computer Architecture</li> <li>'Seperate' and 'definately'</li> <li>separate, definitely.</li> <li>Data structure summary</li> </ul>"},{"location":"cs61b/note_en/20.%20Heaps%20and%20PQs/#overview","title":"Overview","text":"<p>Priority Queue. A Max Priority Queue (or PQ for short) is an ADT that supports at least the insert and delete-max operations. A MinPQ supposert insert and delete-min.</p> <p>Heaps. A max (min) heap is an array representation of a binary tree such that every node is larger (smaller) than all of its children. This definition naturally applies recursively, i.e. a heap of height 5 is composed of two heaps of height 4 plus a parent.</p> <p>Tree Representations. Know that there are many ways to represent a tree, and that we use Approach 3b (see lecture slides) for representing heaps, since we know they are complete.</p> <p>Running times of various PQ implementations. Know the running time of the three primary PQ operations for an unordered array, ordered array, and heap implementation.</p>"},{"location":"cs61b/note_en/20.%20Heaps%20and%20PQs/#heaps-and-priority-queues","title":"Heaps and Priority Queues","text":""},{"location":"cs61b/note_en/20.%20Heaps%20and%20PQs/#pq-interface","title":"PQ Interface","text":""},{"location":"cs61b/note_en/20.%20Heaps%20and%20PQs/#the-priority-queue-interface","title":"The Priority Queue Interface","text":"<p>The last ADT we learned about were Binary Search Trees, which allowed us efficient search only taking \\(\\log N\\) time. This was because we could eliminate half of the elements at every step of our search. What if we cared more about quickly finding the smallest or largest element instead of quickly searching?</p> <p>Now we come to the Abstract Data Type of a Priority Queue. The one caveat is that you can only interact with the smallest items of this bag. <pre><code>/** (Min) Priority Queue: Allowing tracking and removal of \n  * the smallest item in a priority queue. */\npublic interface MinPQ&lt;Item&gt; {\n    /** Adds the item to the priority queue. */\n    public void add(Item x);\n    /** Returns the smallest item in the priority queue. */\n    public Item getSmallest();\n    /** Removes the smallest item from the priority queue. */\n    public Item removeSmallest();\n    /** Returns the size of the priority queue. */\n    public int size();\n}\n</code></pre></p>"},{"location":"cs61b/note_en/20.%20Heaps%20and%20PQs/#priority-queue-implementation","title":"Priority Queue Implementation","text":"<p>The worst case runtimes of our desired operations: - Ordered Array   - <code>add</code>: \\(\\Theta (N)\\) (Resizing, insertion with binary search takes \\(\\Theta (\\log N)\\))   - <code>getSmallest</code>: \\(\\Theta (1)\\)   - <code>removeSmallest</code>: \\(\\Theta (N)\\) (Resizing, \\(O(1)\\) if not) - Bushy BST   - <code>add</code>: \\(\\Theta (\\log N)\\)   - <code>getSmallest</code>: \\(\\Theta (\\log N)\\)   - <code>removeSmallest</code>: \\(\\Theta (\\log N)\\) - HashTable   - <code>add</code>: \\(\\Theta (1)\\)   - <code>getSmallest</code>: \\(\\Theta (N)\\)   - <code>removeSmallest</code>: \\(\\Theta (N)\\)</p>"},{"location":"cs61b/note_en/20.%20Heaps%20and%20PQs/#summary","title":"Summary","text":"<ul> <li>Priority Queue is an Abstract Data Type that optimizes for handling minimum or maximum elements.</li> <li>There can be space/memory benefits to using this specialized data structure.</li> <li>Implementations for ADTs that we currently know don't give us efficient runtimes for PQ operations.</li> <li>A binary search tree among the other structures is the most efficient. But handling duplicate elements needs modification.</li> </ul>"},{"location":"cs61b/note_en/20.%20Heaps%20and%20PQs/#heap","title":"Heap","text":""},{"location":"cs61b/note_en/20.%20Heaps%20and%20PQs/#heap-structure","title":"Heap Structure","text":"<p>We will define our binary min-heap as being complete and obeying min-heap property:   - Min-heap: Every node is less than or equal to both of its children   - Complete: Missing items only at the bottom level (if any), all nodes are as far left as possible.</p> <p></p>"},{"location":"cs61b/note_en/20.%20Heaps%20and%20PQs/#heap-operations","title":"Heap Operations","text":"<p>The three methods we care about for the PriorityQueue ADT are <code>add</code>, <code>getSmallest</code>, and <code>removeSmallest</code>. We will start by conceptually describing how these methods can be implemented given our given schema of a heap.</p> <ul> <li><code>add</code>: Add to the end of heap temporarily. Swim up the hierarchy to the proper place.</li> <li>Swimming involves swapping nodes if child &lt; parent</li> <li><code>getSmallest</code>: Return the root of the heap (This is guaranteed to be the minimum by our min-heap property</li> <li><code>removeSmallest</code>: Swap the last item in the heap into the root. Sink down the hierarchy to the proper place.</li> <li>Sinking involves swapping nodes if parent &gt; child. Swap with the smallest child to preserve min-heap property.</li> </ul>"},{"location":"cs61b/note_en/20.%20Heaps%20and%20PQs/#tree-representation","title":"Tree Representation","text":""},{"location":"cs61b/note_en/20.%20Heaps%20and%20PQs/#approach-1a-1b-and-1c","title":"Approach 1a, 1b, and 1c","text":"<ul> <li>Tree1A: children pointers <pre><code>public class Tree1A&lt;Key&gt; {\n  Key k;\n  Tree1A left;\n  Tree1A middle;\n  Tree1A right;\n  ...\n}\n</code></pre></li> <li>Tree1B: children list <pre><code>public class Tree1B&lt;Key&gt; {\n  Key k;\n  Tree1B[] children;\n  ...\n}\n</code></pre></li> <li>Tree1C: child-sibling linked lists <pre><code>public class Tree1C&lt;Key&gt; {\n  Key k;\n  Tree1C favoredChild;\n  Tree1C sibling;\n  ...\n}\n</code></pre></li> </ul> <p>These explicit references take the form of pointers to the actual Tree objects that are our children. Let's think of more exotic approaches that don't store explicit references to children.</p>"},{"location":"cs61b/note_en/20.%20Heaps%20and%20PQs/#approach-2","title":"Approach 2","text":"<p>Recall the Disjoint Sets ADT. The way that we represented this Weighted Quick Union structure was through arrays. For representing a tree, we can store the keys array as well as a parents array. The keys array represent which index maps to which key, and the parents array represents which key is a child of another key (by index). <pre><code>public class Tree2&lt;Key&gt; {\n  Key[] keys;\n  int[] parents;\n  ...\n}\n</code></pre> we can see: - The tree is complete. This is a property we have defined earlier. - The parents array has a sort of redundant pattern where elements are just doubled. - Reading the level-order of the tree, we see that it matches exactly the order of the keys in the keys array.</p>"},{"location":"cs61b/note_en/20.%20Heaps%20and%20PQs/#approach-3","title":"Approach 3","text":"<p>We know the parents array is redundant so we can ignore it and we know that a tree can be represented by level order in an array (complete). Thus, we will take this complex 2D structure of the tree and flatten it into an array. <pre><code>public class TreeC&lt;Key&gt; {\n  Key[] keys;\n  ...\n}\n</code></pre> Given this implementation, we define the following code for the \"swim\" described in the Heap Operations section. <pre><code>public void swim(int k) {\n    if (keys[parent(k)] &gt; keys[k]) {\n       swap(k, parent(k));\n       swim(parent(k));              \n    }\n}\n</code></pre></p>"},{"location":"cs61b/note_en/20.%20Heaps%20and%20PQs/#implementation-consideration","title":"Implementation Consideration","text":""},{"location":"cs61b/note_en/20.%20Heaps%20and%20PQs/#the-implementation-3b","title":"The Implementation 3b","text":"<p>In the actual implementation, we will leave one empty spot at the beginning of the array to simplify computation. - <code>leftChild(k)</code>= \\(k * 2\\) - <code>rightChild(k)</code>= \\(k * 2 + 1\\) - <code>parent(k)</code> = \\(k / 2\\)</p>"},{"location":"cs61b/note_en/20.%20Heaps%20and%20PQs/#comparing-to-alternative-implementations","title":"Comparing to alternative implementations","text":"Methods Ordered Array Bushy BST Hash Table Heap <code>add</code> \\(\\Theta(N)\\) \\(\\Theta(\\log N)\\) \\(\\Theta(1)\\) \\(\\Theta(\\log N)\\) <code>getSmallest</code> \\(\\Theta(1)\\) \\(\\Theta(\\log N)\\) \\(\\Theta(N)\\) \\(\\Theta(1)\\) <code>removeSmallest</code> \\(\\Theta(N)\\) \\(\\Theta(\\log N)\\) \\(\\Theta(N)\\) \\(\\Theta(\\log N)\\) <p>Couple notes:</p> <ul> <li>Heap operations are amortized analysis, since the array will have to resize (not a big deal)</li> <li>BST's can have constant time <code>getSmallest</code> if pointer is stored to smallest element</li> <li>Array-based heaps take around 1/3rd the memory it takes to represent a heap using approach 1A (direct pointers to children)</li> </ul>"},{"location":"cs61b/note_en/21.%20Tree%20and%20Graph%20Traversals/","title":"Lecture","text":"<ul> <li>A Useful Visual Trick for Humans to traverse a tree</li> <li>Preorder traversal: We trace a path around the graph, from the top going counter-clockwise. \u201cVisit\u201d every time we pass the LEFT of a node.</li> <li>Inorder traversal: \u201cVisit\u201d when you cross the bottom of a node.</li> <li>Postorder traversal: \u201cVisit\u201d when you cross the right a node.</li> <li>What Good Are All These Traversals</li> <li>Preorder: printing directory; gathering file  sizes.</li> <li>Josh wrote a 'cheat' for knowing oppoent's APM in SC2</li> <li>Euler Tour and Hamilton Tour</li> <li>An efficient Euler tour algorithm O(# edges) was found as early as 1873 Link.</li> <li>Despite decades of intense study, no efficient algorithm for a Hamilton tour exists. Best algorithms are exponential time.</li> <li>Graph problems are hard</li> <li>Way off the chart than runtime and inheritance.</li> </ul>"},{"location":"cs61b/note_en/21.%20Tree%20and%20Graph%20Traversals/#overview","title":"Overview","text":"<p>Trees. A tree consists of a set of nodes and a set of edges connecting the nodes, where there is only one path between any two nodes. A tree is thus a graph with no cycles and all vertices connected.</p> <p>Traversals. When we iterate over a tree, we call this a \u201ctree traversal\u201d.</p> <p>Level Order Traversal. A level-order traversal visits every item at level 0, then level 1, then level 2, and so forth.</p> <p>Depth First Traversals. We have three depth first traversals: Pre-order, in-order and post-order. In a pre-order traversal, we visit a node, then traverse its children. In an in-order traversal, we traverse the left child, visit a node, then traverse the right child. In a post-order traversal, we traverse both children before visiting. These are very natural to implement recursively. Pre-order and post-order generalize naturally to trees with arbtirary numbers of children. In-order only makes sense for binary trees.</p> <p>Graphs. A graph consists of a set of nodes and a set of edges connecting the nodes. However, unlike our tree definition, we can have more than one path between nodes. Note that all trees are graphs. In CS 61B, we can assume all graphs are simple graphs (AKA no loops or parallel edges).</p> <p>Depth First Traversals. DFS for graphs is similar to DFS for trees, but since there are potential cycles within our graph, we add the constraint that each vertex should be visited at most once. This can be accomplished by marking nodes as visited and only visiting a node if it had not been marked as visited already.</p>"},{"location":"cs61b/note_en/21.%20Tree%20and%20Graph%20Traversals/#tree-traversals-and-graphs","title":"Tree Traversals and Graphs","text":""},{"location":"cs61b/note_en/21.%20Tree%20and%20Graph%20Traversals/#tree-recap","title":"Tree recap","text":""},{"location":"cs61b/note_en/21.%20Tree%20and%20Graph%20Traversals/#whats-a-rooted-tree","title":"What's a rooted tree?","text":"<p>Recall that a rooted tree is a tree with a designated root (typically drawn as the top most node.)</p> <p>This gives us the notion of two more definitions</p> <ul> <li>A parent. Every node except the root has exactly one parent.</li> <li>What if a node had 2 parents? Would it be a tree? (Hint: No.)</li> <li>A child. A node can have 0 or more children.</li> <li>What if a node has 0 children? It's called a leaf.</li> </ul>"},{"location":"cs61b/note_en/21.%20Tree%20and%20Graph%20Traversals/#tree-traversals","title":"Tree Traversals","text":"<p>Now how do you iterate over a tree? What's the correct 'order'?</p> <p>Before we answer that question, we must not use the word iteration. Instead, we'll call it 'traversing through a tree' or a 'tree traversal'. Why? No real reason, except that everyone calls iteration through trees 'traversals'. Maybe it's because the world likes alliterations.</p> <p>So what are some natural ways to 'traverse' through a tree? As it turns out, there are a few \u2013\u2013 unlike a list which basically has one natural way to iterate through it:</p> <ul> <li>Level order traversal.</li> <li>Depth-First traversals \u2013\u2013 of which there are three: pre-order, in-order and post-order.</li> </ul>"},{"location":"cs61b/note_en/21.%20Tree%20and%20Graph%20Traversals/#level-order-traversal","title":"Level Order Traversal","text":"<p>This is more difficult than the writing the other traversals <pre><code>levelOrderRec(BSTNode x) {\n    for (int h = 0; h &lt; height(x); h++) {\n        printLevel(x, h);\n    }\n}\n\nprintLevel(BSTNode x, int h) {\n    if (x == null) return;\n    else if (h == 0) pirnt(x.key);\n    else {\n    printLevel(x.left, h-1);\n    printLevel(x.right, h-1);\n    }\n}\n\nlevelOrderIter(BSTNode x) {\n    Queue&lt;BSTNode&gt; x = new Queue&lt;&gt;();\n    x.enqueue(x);\n    while(!x.isEmpty()) {\n        BSTNode tmp = x.dequeue();\n        System.out.print(tmp.key);\n        x.enqueue(tmp.left);\n        x.enqueue(tmp.right);\n    }\n}\n</code></pre></p>"},{"location":"cs61b/note_en/21.%20Tree%20and%20Graph%20Traversals/#preinpost-order-traversal","title":"Pre/In/Post-order Traversal","text":"<pre><code>Order(BSTNode x) {\n    if (x == null) return;\n    //print(x.key) pre-order\n    Order(x.left)\n    //print(x.key) in-order\n    Order(x.right)\n    //print(x.key) post-order\n}\n</code></pre>"},{"location":"cs61b/note_en/21.%20Tree%20and%20Graph%20Traversals/#graphs","title":"Graphs","text":""},{"location":"cs61b/note_en/21.%20Tree%20and%20Graph%20Traversals/#what-is-a-graph","title":"What is a graph?","text":"<p>A graph consists of: - A set of nodes (or vertices) - A set of zero of more edges, each of which connects two nodes.</p> <p>That's it! No other restrictions. In general, note that all trees are also graphs, but not all graphs are trees.</p>"},{"location":"cs61b/note_en/21.%20Tree%20and%20Graph%20Traversals/#simple-graphs-only","title":"Simple Graphs only","text":"<p>Multigraphs: - multiple edges between two nodes - an edge from a node to itself</p>"},{"location":"cs61b/note_en/21.%20Tree%20and%20Graph%20Traversals/#more-categorizations","title":"More categorizations.","text":"<ul> <li>undirected graphs an edge <code>(u, v)</code> can mean that the edge goes from the nodes u to v and from the nodes v to u too.</li> <li>directed graphs the edge (u, v) means that the edge starts at u, and goes to v (and the vice versa is not true, unless the edge <code>(v, u)</code> also exists.)</li> <li>acyclic graphs These are graphs that don't have any cycles.</li> <li>cyclic graphs There exists a way to start at a node, follow some unique edges, and return back to the same node you started from.</li> </ul>"},{"location":"cs61b/note_en/21.%20Tree%20and%20Graph%20Traversals/#graph-problems","title":"Graph Problems","text":"<p>There are many questions we can ask about a graph.</p> <ul> <li>s-t Path: Is there a path between vertices s and t?</li> <li>Connectivity: Is the graph connected, i.e. is there a path between all vertices?</li> <li>Biconnectivity: Is there a vertex whose removal disconnects the graph?</li> <li>Shortest s-t Path: What is the shortest path between vertices s and t?</li> <li>Cycle Detection: Does the graph contain any cycles?</li> <li>Euler Tour: Is there a cycle that uses every edge exactly once?</li> <li>Hamilton Tour: Is there a cycle that uses every vertex exactly once?</li> <li>Planarity: Can you draw the graph on paper with no crossing edges?</li> <li>Isomorphism: Are two graphs isomorphic (the same graph in disguise)?</li> </ul> <p>Some comments: - It's very hard to tell which problems are very hard, and which ones aren't all that hard. - The Euler Tour was solved as early as 1873. The solution runs in \\(O(E)\\) where \\(E\\) is the number of edges in the graph. - The current most efficient solution to the Hamilton Tour problems is exponiential.</p>"},{"location":"cs61b/note_en/21.%20Tree%20and%20Graph%20Traversals/#isconnecteds-t","title":"<code>isConnected(s, t)</code>","text":"<p>write a function <code>isConnected(s, t)</code> that takes in two vertices and returns whether there exists a path between the two. <pre><code>mark s  // i.e., remember that you visited s already\nif (s == t):\n    return true;\n\nfor child in unmarked_neighbors(s): // if a neighbor is marked, ignore!\n    if isconnected(child, t):\n        return true;\n\nreturn false;\n</code></pre> You may not have realized it, but we just developed a depth-first traversal (like pre-order, post-order, in-order) but for graphs. What did we do? Well, we marked ourself. Then we visited our first child. Then our first child marked itself, and visited its children. Then our first child's first child marked itself, and visited its children.</p>"},{"location":"cs61b/note_en/22.%20Graph%20Traversals%20and%20Implementations/","title":"Lecture","text":"<ul> <li>How far away from one actor to another</li> <li>Some difficult mathmatical problems are just simple graph problems in disguise.</li> <li>BFS could be used to find the shortest connection (not edges with value).</li> <li>Why BFS is bad for Google Maps</li> <li>Adjacency list is the most popular implementation for graph</li> <li>Because graph usually is sparse. </li> <li>\\(O(V+E)\\) is very common in graph algorithms</li> <li>Is there a case where you use two or more representations and use the fastest operation among these representations?</li> <li>Yes, but the cost is that you need to maintain two data structure copy.</li> <li>I believe in Database it happens.</li> <li>Common design pattern in graph algorithms: Decouple type from processing algorithm</li> <li>Create a graph object.</li> <li>Pass the graph to a graph-processing method (or constructor) in a client class.</li> <li>Query the client class for information.</li> <li>We cannot say \\(O(E)\\) for the DFP constructor</li> <li>If there is no edge you still need to mark the marked array which is \\(\\Theta (V)\\).</li> <li>DepthFirstPaths is more a toy program for lecture purpose</li> </ul>"},{"location":"cs61b/note_en/22.%20Graph%20Traversals%20and%20Implementations/#overview","title":"Overview","text":"<p>Graph Traversals Overview. Just as we had both depth-first (preorder, inorder, and postorder) traversals and a breath-first (level order) traversal for trees, we can generalize these concepts to graphs. Specifically, given a source vertex, we can \u201cvisit\u201d vertices in: - DFS Preorder: order in which DFS is called on each vertex. - DFS Postorder: order in which we return from DFS calls. - BFS: order of distance from the source. The lecture originally called this \u201clevel order\u201d before we banish that term since nobody uses it in the real world for general graphs.</p> <p>We use the term \u201cdepth first\u201d, because we will explore \u201cdeeply\u201d first, and use the term \u201cbreadth first\u201d because we go wide before we go deep.</p> <p>If we use BFS on a vertex of a graph that happens to be the root of a tree, we get exactly the same thing as level order traversal.</p> <p>Breadth First Search. Unlike DFS, BFS lends itself more naturally to an iterative solution than a recursive one. When we perform BFS, we visit a source vertex s, then visit every vertex that is one link away from s, then visite very vertex that is two links away from s, and so forth.</p> <p>To achieve this, we use a simple idea: Create a so-called \u201cfringe\u201d of vertices that we think of as the next vertices to be explored. In the case of BFS, this fringe is a Queue, since we want to visit vertices in the order that we observe them. The pseudocode is as follows: <pre><code>bfs(s):\n    fringe.enqueue(s)\n    mark(s)\n    while fringe is not empty:\n        dequeue(s)\n        visit(s)\n        for each unmarked neighbor of s:\n            mark(s)\n            enqueue(s)\n</code></pre> In class, we discussed how we could use BFS to solve the shortest paths problem: Given a source vertex, find the shortest path from that source to every other vertex. When solving shortest paths, we add additional logic to our BFS traversal, where we also set the edgeTo for every vertex at the same time that it is marked and enqueued.</p> <p>Graph API. In lecture, we used the Graph API from the Princeton algorithms book. Choice of API determines how clients need to think to write codes, since certain API\u2019s can make certain tasks easier or harder. This can also affect runtime and memory.</p> <p>Graph Implementations. Several graph API implementations we explored included an adjacency matrix, list of edges, and adjacency lists. With an adjacency matrix, we essentially have a 2D array with a boolean indicating whether two vertices are adjacent. A list of edges is simply that \u2013 a collection of all edges, such as HashSet. The most common approach, adjacency lists, maintains an array of lists indexed by vertex number which stores the vertex numbers of all vertices adjacent to the given vertex.</p>"},{"location":"cs61b/note_en/22.%20Graph%20Traversals%20and%20Implementations/#graph-traversals-and-representation","title":"Graph Traversals and Representation","text":""},{"location":"cs61b/note_en/22.%20Graph%20Traversals%20and%20Implementations/#bfs","title":"BFS","text":"<p>In s-t-Path-Problem, we developed DFS (Depth First Search) Traversal for graphs. In DFS, we visit down the entire lineage of our first child before we even begin to look at our second child - we literally search depth first.</p> <p>Here, we will talk about BFS (Breadth First Search) (also known as Level Order Traversal). In BFS, we visit all of our immediate children before continuing on to any of our grandchildren. The pseudocode for BFS is as follows: <pre><code>Initialize the fringe (queue)\nmark the starting vertex.\nenqueue the starting vertex on the fringe\nwhile fringe is not empty:\n    dequeue vertex v from the fringe.\n    For each unmarked neighbor n of v:\n        Mark n.\n        Add n to fringe.\n        Set edgeTo[n] = v.\n        Set distTo[n] = distTo[v] + 1.\n</code></pre> - A fringe is just a term we use for the data structure we are using to store the nodes on the frontier of our traversal's discovery process.   - For BFS, we use a queue for our fringe.  - <code>edgeTo[...]</code> is a map that helps us track how we got to node <code>n</code>; we got to it by following the edge from <code>v</code> to to <code>n</code>. - <code>distTo[...]</code> is a map that helps us track how far <code>n</code> is from the starting vertex. Assuming that each edge is worth a distance of 1. - This slide deck illustrates how this pseudocode can be carried out on an example graph.</p>"},{"location":"cs61b/note_en/22.%20Graph%20Traversals%20and%20Implementations/#dfs-vs-bfs","title":"DFS vs BFS","text":"<p>Question 18.1: What graph traversal algorithm uses a stack rather than a queue for its fringe?</p> <p>Answer 18.1: DFS traversal.</p> <ul> <li>Note however that for DFS we mark nodes only once we visit a node.</li> <li>As a result, it's possible to have multiple instances of the same node on the stack.</li> </ul> <p>Recursive DFS implements this naturally via the recursive stack frames; iterative DFS implements it manually: <pre><code>Initialize the fringe, an empty stack\npush the starting vertex on the fringe\nwhile fringe is not empty:\n    pop a vertex off the fringe\n    if vertex is not marked:\n        mark the vertex\n        visit vertex\n        for each neighbor of vertex:\n            if neighbor not marked:\n                push neighbor to fringe\n\n# I want to use this to avoid the additional if statement.\n# But this causes a discrepancy between the recursive one,\n# as you 'mark' the node before actually visit it.\n# So Josh is right, multiple instances of the same node on the stack are unvoidable if\n# you want to mimic the recursive behavior.\nInitialize the fringe, an empty stack\npush the starting vertex on the fringe\nmark the starting vertex\nwhile fringe is not empty:\n    pop a vertex off the fringe\n    visit vertex\n    for each neighbor of vertex:\n        if neighbor not marked:\n            push neighbor to fringe\n            mark the neighbor\n</code></pre></p>"},{"location":"cs61b/note_en/22.%20Graph%20Traversals%20and%20Implementations/#representing-graphs","title":"Representing Graphs","text":"<p>We will discuss our choice of API, and also the underlying data structures used to represent the graph. Our decisions can have profound implications on our runtime, memory usage, and difficulty of implementing various graph algorithms.</p>"},{"location":"cs61b/note_en/22.%20Graph%20Traversals%20and%20Implementations/#graph-api","title":"Graph API","text":"<pre><code>public class Graph {\n  public Graph(int V):               // Create empty graph with v vertices\n  public void addEdge(int v, int w): // add an edge v-w\n  Iterable&lt;Integer&gt; adj(int v):      // vertices adjacent to v\n  int V():                           // number of vertices\n  int E():                           // number of edges\n...\n</code></pre>"},{"location":"cs61b/note_en/22.%20Graph%20Traversals%20and%20Implementations/#graph-representations","title":"Graph Representations","text":""},{"location":"cs61b/note_en/22.%20Graph%20Traversals%20and%20Implementations/#adjacency-matrix","title":"Adjacency Matrix","text":""},{"location":"cs61b/note_en/22.%20Graph%20Traversals%20and%20Implementations/#edge-sets","title":"Edge Sets","text":""},{"location":"cs61b/note_en/22.%20Graph%20Traversals%20and%20Implementations/#adjacency-lists","title":"Adjacency Lists","text":"<p>In practice, adjacency lists are most common since graphs tend to be sparse (there are not many edges in each bucket).</p>"},{"location":"cs61b/note_en/22.%20Graph%20Traversals%20and%20Implementations/#efficiency","title":"Efficiency","text":"idea addEdge(s, t) for(w : adj(v)) print() hasEdge(s, t) space used adjacency matrix \u0398(1) \u0398(V) \u0398(\\(V^2\\)) \u0398(1) \u0398(\\(V^2\\)) list of edges \u0398(1) \u0398(E) \u0398(E) \u0398(E) \u0398(E) adjacency list \u0398(1) \u0398(1) to \u0398(V) \u0398(V+E) \u0398(degree(v)) \u0398(E+V) <p>DFS/BFS on a graph backed by adjacency lists runs in \\(O(V+E)\\), while on a graph backed by an adjacency matrix runs in \\(O(V^2)\\).</p>"},{"location":"cs61b/note_en/22.%20Graph%20Traversals%20and%20Implementations/#qa","title":"Q&amp;A","text":"<ul> <li>For recursive problems, counting the recursive calls is good but not always</li> </ul>"},{"location":"cs61b/note_en/23.%20Shortest%20Paths/","title":"Lecture","text":"<ul> <li>The shortest path solution to all targets is always a tree</li> <li>It's also the case for undirected graph.</li> <li>The number of edges of shortest path tree is always \\(V-1\\).</li> <li>Directed graph is more general than undirected and easy to think about</li> <li>You can add the all paths with the s and t reversed with the same weight to achieve the undirected graph.</li> <li>When a relaxation operation is performed on a visited node, it will always fail</li> <li>How to deal with negative weight?</li> <li>If there's no cycle, you just do a BFT, relaxing as you go.</li> <li>If there are cycles, you can use bellman-ford.<ul> <li>For every vertex, relax V times.</li> </ul> </li> <li>Example: currency trading.</li> <li>Dijkstra's can fail because relaxation of already visited verices can succeed.</li> <li>A*</li> <li>Add <code>h(v, goal)</code> (heuristic expectation) to the fringe.</li> <li>Instead of exploring exhaustively, we're using a best guess to guide our search.</li> <li>https://qiao.github.io/PathFinding.js/visual/</li> <li>For A to give the correct answer, our A heuristic must be:<ul> <li>Admissible: h(v, NYC) \\(\\leq\\) true distance from v to NYC</li> <li>Consistent: For each neighbor of w:</li> <li>h(v, NYC) \\(\\leq\\) dist(v, w) + h(w, NYC)</li> <li>Where dist(v, w) is the weight of the edge from v to w.</li> </ul> </li> <li>Consistency and Admissibility</li> <li>All consistent heuristics are admissible.</li> </ul>"},{"location":"cs61b/note_en/23.%20Shortest%20Paths/#overview","title":"Overview","text":"<p>Dijktra\u2019s Algorithm and Single-Source Shortest Paths. Suppose we want to record the shortest paths from some source to every single other vertex (so that we can rapidly found a route from s to X, from s to Y, and so forth). We already know how to do this if we\u2019re only counting the number of edges, we just use BFS.</p> <p>But if edges have weights (representing, for example road lengths), we have to do something else. It turns out that even considering edge weights, we can preprocess the shortest route from the source to every vertex very efficiently. We store the answer as a \u201cshortest paths tree\u201d. Typically, a shortest paths tree is stored as an array of edgeTo[] values (and optionally distTo[] values if we want a constant time distTo() operation).</p> <p>To find the SPT, we can use Dijkstra\u2019s algorithm, which is quite simple once you understand it. Essentially, we visit each vertex in order of its distance from the source, where each visit consists of relaxing every edge. Informally, relaxing an edge means using it if its better than the best known distance to the target vertex, otherwise ignoring it. Or in pseudocode: <pre><code>Dijkstra(G, s):\n    while not every vertex has been visited:\n        visit(unmarked vertex v for which distTo(v) is minimized)\n</code></pre> Where visit is given by the following pseudocode: <pre><code>visit(v):\n    mark(v)\n    for each edge e of s:\n        relax(e)\n</code></pre> And finally, relax is given by: <pre><code>relax(e):\n    v = e.source\n    w = e.target        \n    currentBestKnownWeight = distTo(w)\n    possiblyBetterWeight = distTo(v) + e.weight\n    if possiblyBetterWeight &lt; currentBestKnownWeight\n        Use e instead of whatever we were using before\n</code></pre> Runtime is \\(O(V\u00d7logV+V\u00d7logV+E\u00d7logV)\\), and since \\(E&gt;V\\) for any graph we\u2019d run Dijkstra\u2019s algorithm on, this can be written as more simply \\(O(E log V)\\). See slides for runtime description.</p> <p>A* Single-Target Shortest Paths. If we need only the path to a single target, then Dijkstra\u2019s is inefficient as it explores many many edges that we don\u2019t care about (e.g. when routing from Denver to NYC, we\u2019d explore everything within more than a thousand miles in all directions before reaching NYC).</p> <p>To fix this, we make a very minor change to Dijkstra\u2019s, where instead of visiting vertices in order of distance from the source, we visit them in order of distance from the source + h(v), where h(v) is some heuristic.</p> <p>Or in pseudocode: <pre><code>A*(G, s):\n    while not every vertex has been visited:\n        visit(unmarked vertex v for which distTo(v) + h(v) is minimized)\n</code></pre> It turns out (but we did not prove), that as long as h(v) is less than the true distance from s to v, then the result of A* will always be correct.</p> <p>Note: In the version in class, we did not use an explicit \u2018mark\u2019. Instead, we tossed everything in the PQ, and we effectively considered a vertex marked if it had been removed from the PQ.</p>"},{"location":"cs61b/note_en/23.%20Shortest%20Paths/#shortest-paths","title":"Shortest Paths","text":""},{"location":"cs61b/note_en/23.%20Shortest%20Paths/#recalls","title":"Recalls","text":"<p>BFS and DFS both can: - find a path from a given vertex, \\(s\\), to every reachable vertex in the graph.</p> <p>BFS can but DFS cannot: - find a shortest path from a given vertex, \\(s\\) to every reachable vertex in the graph.</p> <p>Efficiency: - DFS is worse for spindly graphs. Imagine a graph with 10000 nodes all spindly. We'll end up making 10000 recursive calls, which is bad for space. - BFS is worse for \"bushy\" graphs, because our queue gets used a lot.</p> <p>But the shortest path found by BFS is weightless, where shortest means the fewest number of edges. </p>"},{"location":"cs61b/note_en/23.%20Shortest%20Paths/#dijkstras-algorithm","title":"Dijkstra's Algorithm","text":""},{"location":"cs61b/note_en/23.%20Shortest%20Paths/#observations","title":"Observations","text":"<ol> <li>What we care to minimize is the sum of the weights of the edges on the selected path.</li> <li>Shortest paths tree can be created in the following way:    - For every vertex \\(v\\) (which is not \\(s\\)) in the graph, find the shortest path from \\(s\\) to \\(v\\).    - \"Combine\"/\"Union\" all the edges that you found above.</li> <li>The \"Shortest Path Tree\" will always be a tree.    - Think about our original solution where there is an <code>edgeTo</code> array.    - For every node, there was exactly one \"parent\".    - A tree has \\(V-1\\) edges, where \\(V\\) is the number of nodes in the tree.</li> </ol>"},{"location":"cs61b/note_en/23.%20Shortest%20Paths/#dijkstras-algorithm_1","title":"Dijkstra's Algorithm","text":"<p>Dijkstra's algorithm takes in an input vertex \\(s\\), and outputs the shortest path tree from \\(s\\). How does it work?</p> <ol> <li>Create a priority queue.</li> <li>Add s to the priority queue with priority \\(0\\). Add all other vertices to the priority queue with priority \\(\\infty\\).</li> <li>While the priority queue is not empty: pop a vertex out of the priority queue, and relax all of the edges going out from the vertex.</li> </ol>"},{"location":"cs61b/note_en/23.%20Shortest%20Paths/#what-does-it-mean-to-relax","title":"What does it mean to relax?","text":"<ul> <li>Look at your current best distance to \\(w\\) from the source, call it \\(\\texttt{curBestDistToW}\\).</li> <li>Look at your \\(\\texttt{curBestDistTo}\\textbf{V}\\) + \\(\\texttt{weight}(v, w)\\). (let's call it \\texttt{potentialDistToWUsingV})</li> <li>Is \\(\\texttt{potentialDistToWUsingV}\\) smaller than \\(\\texttt{curBestDistToW}\\)? </li> <li>In that case, set \\(\\texttt{curBestDistToW} = \\texttt{potentialDistToWUsingV}\\), and update the \\(\\texttt{edgeTo}[w]\\) to be \\(v\\).</li> <li>Important note: we never relax edges that point to already visited vertices.</li> </ul>"},{"location":"cs61b/note_en/23.%20Shortest%20Paths/#pseudocode","title":"Pseudocode","text":"<pre><code>def dijkstras(source):\n    PQ.add(source, 0)\n    For all other vertices, v, PQ.add(v, infinity)\n    while PQ is not empty:\n        p = PQ.removeSmallest()\n        relax(all edges from p)\n\ndef relax(edge p,q):\n   if q is visited (i.e., q is not in PQ):\n       return\n\n   if distTo[p] + weight(edge) &lt; distTo[q]:\n       distTo[q] = distTo[p] + w\n       edgeTo[q] = p\n       PQ.changePriority(q, distTo[q])\n</code></pre>"},{"location":"cs61b/note_en/23.%20Shortest%20Paths/#guarantees","title":"Guarantees","text":"<p>As long as the edges are all non-negative, Dijkstra's is guaranteed to be optimal.</p>"},{"location":"cs61b/note_en/23.%20Shortest%20Paths/#proofs-and-intuitions","title":"Proofs and Intuitions","text":"<p>Assume all edges are non-negative.</p> <ul> <li>At start, distTo[source] = 0. This is optimal.</li> <li>After relaxing all edges from source, let vertex \\(v_1\\) be the vertex with the minimum weight. **Claim: distTo[\\(v_1\\)] is optimal, i.e., whatever the value of distTo[\\(v_1\\)\u200b] is at this point is the shortest distance from \\(s\\) to \\(v_1\\). Why?</li> <li>Suppose that it isn't the case. Then that means that there is some other path from \\(s\\) to \\(v_1\\)\u200b which is shorter than the direct path \\((s, v_1)\\). </li> <li>Ok, so let's consider this hypothetical cool shorter path... it would have to look like (\\(s, v_a, v_b, \\ldots, v_1\\)). </li> <li>But (\\(s, v_a\\)) is already bigger than (\\(s, v_1\\))(Note that this is true because \\(v_1\\) is the vertex that is closest to ss from above.) </li> <li>So how can such a path exist which is actually shorter?</li> <li>Make this same argument for \\(v_1\\) and all the relaxation it does.</li> </ul>"},{"location":"cs61b/note_en/23.%20Shortest%20Paths/#a-noteworthy-invariant","title":"A noteworthy invariant","text":"<p>Once a vertex is popped from the priority queue, we know the true shortest distance to that vertex from the source.</p> <p>One nice consequence of this fact is \"short-circuiting\". So sometimes <code>dijkstra</code> takes in not only a source, but also a target. When the target is poped, the function returned.</p>"},{"location":"cs61b/note_en/23.%20Shortest%20Paths/#a","title":"A*","text":"<p><code>Dijkstra</code> only relys on the pure fact of the graph, but sometimes, we have a guess/experience that some vertices are prefered even they are at the low priority.</p> <p>So, let's modify our Dijkstra's algorithm slightly. In Dijkstra's, we used \\(\\texttt{bestKnownDistToV}\\) as the priority in our algorithm. This time, we'll use \\(\\texttt{bestKnownDistToV} + \\texttt{estimateFromVToGoal}\\) as our heuristic.</p>"},{"location":"cs61b/note_en/23.%20Shortest%20Paths/#chicken-and-egg","title":"Chicken And Egg","text":"<p>We have a problem. How do we know what the estimate is? I mean, the estimate itself is a distance, and we're using A to find* the distance from some node to some other node.</p> <p>Well, it's called an estimate because it's exactly that. We use A* to get the true shortest path from a source to a target, but the estimate is something we approximate. Coming up with good estimates is hard sometimes.</p>"},{"location":"cs61b/note_en/23.%20Shortest%20Paths/#good-estimates-heuristics","title":"Good estimates (heuristics)","text":"<ul> <li>Admissibility. heuristic(v, target) \\(\\leq\\) trueDistance(v, target). (Think about the problem above. The true distance from the neighbor of \\(C\\) to \\(C\\) wasn't infinity, it was much, much smaller. But our heuristic said it was \\(\\infty\\), so we broke this rule.)</li> <li>Consistency. For each neighbor \\(v\\) of \\(w\\):</li> <li>heuristic(v, target) \\(\\leq\\) dist(v, w) + heuristic(w, target)</li> <li>where dist(v, w) is the weight of the edge from v to w.</li> </ul>"},{"location":"cs61b/note_en/24.%20Minimum%20Spanning%20Trees/","title":"Lecture","text":"<ul> <li>MST (see title) application</li> <li>SPT depends on the source node, MST is a property of the graph</li> <li>Find the vertex that will make SPT the MST.</li> <li>Run dijkstra.</li> <li>But for some graphs, this is impossible</li> <li>Prim efficient</li> <li>Dijstra's algorithm visits vertices in order of distance of the source.</li> <li>Prim's algorithm visits vertices in order of distance of the MST under construction.</li> <li>Kruskal using Weighted Quick Union</li> <li>Using \"bottom-up heapification\" to achieve O(E) insertion for PQ</li> <li>Pettie-Ramachandra algorithm for MST</li> <li>https://en.wikipedia.org/wiki/Minimum_spanning_tree#Optimal_algorithm</li> <li>It's guaranteed to be optimal, almost \\(\\Omega E\\).</li> <li>But nobody knows the runtime.</li> </ul>"},{"location":"cs61b/note_en/24.%20Minimum%20Spanning%20Trees/#overview","title":"Overview","text":"<p>Minimum Spanning Trees. Given an undirected graph, a spanning tree T is a subgraph of G, where T is connected, acyclic, includes all vertices. The minimum spanning tree is the spanning tree whose edge weights have the smallest sum. MSTs are similar to SPTs, but despite intuition suggesting it may be the case, for many graphs, the MST is not the SPT for any particular vertex. (SPTs are relative to the source node)</p> <p>Cut Property. If you divide the vertices up into two sets S and T (arbitrarily), then a crossing edge is any edge which has one vertex in S and one in T. Neat fact (the cut property): The minimum crossing edge for ANY cut is part of the MST.</p> <p>Prim\u2019s Algorithm. Dijkstra's algorithm but we consider distance from the entire tree, rather than from source. <pre><code>relax(e):\n    v = e.source\n    w = e.target        \n    currentBestKnownWeight = distTo(w)\n    possiblyBetterWeight = e.weight // Only difference!\n    if possiblyBetterWeight &gt; currentBestKnownWeight\n        Use e instead of whatever we were using before\n</code></pre> Like Dijkstra\u2019s, the runtime is O(E log V). We can prove that Prim\u2019s works because of the cut property.</p> <p>Kruskal\u2019s Algorithm. <pre><code>Initialize the MST to be empty\nConsider each edge e in INCREASING order of weight:\n    If adding e to the MST does not result in a cycle, add it to e\n</code></pre> That\u2019s it! The runtime for Kruskal\u2019s, assuming that we already have all of our edges in a sorted list and use a weighted quick union with path compression to detect cycles, is O(E log*V), or (E log E) if we have use a PQ instead. See slides for more details. We can prove that Kruskal\u2019s works because of the cut property.</p> <p>Completely unimportant technical note: We can actually make an even tighter bound than O(Elog\u2217V) if we use the inverse Ackermann bound for WQUPC.</p>"},{"location":"cs61b/note_en/24.%20Minimum%20Spanning%20Trees/#minimum-spanning-trees","title":"Minimum Spanning Trees","text":"<p>A minimum spanning tree (MST) is the lightest set of edges in a graph possible such that all the vertices are connected. Because it is a tree, it must be connected and acyclic. And it is called \"spanning\" since all vertices are included.</p> <p>There cloud be multiple MSTs with the same weight sum.</p>"},{"location":"cs61b/note_en/24.%20Minimum%20Spanning%20Trees/#cut-property","title":"Cut Property","text":"<ul> <li> <p>We can define a cut as an assignment of a graph\u2019s nodes to two non-empty sets (i.e. we assign every node to either set number one or set number two).</p> </li> <li> <p>We can define a crossing edge as an edge which connects a node from one set to a node from the other set.</p> </li> <li> <p>With these two definitions, we can understand the Cut Property; given any cut, the minimum weight crossing edge is in the MST.</p> </li> </ul> <p>The proof for the cut property is as follows:  - Suppose that the minimum crossing edge <code>e</code> were not in the MST.  - Since it is not a part of the MST, if we add that edge, a cycle will be created. Because there is a cycle, this implies that some other edge <code>f</code> must also be a crossing edge. - (for a cycle, if <code>e</code> crosses from one set to another, there must be another edge that crosses back over to the first set)  - Thus, we can remove <code>f</code> and keep <code>e</code>, and this will give us a lower weight spanning tree.  - But this is a contradiction because we supposedly started with a MST, but now we have a collection of edges which is a spanning tree but that weighs less, thus the original MST was not actually minimal. As a result, the cut property must hold.</p>"},{"location":"cs61b/note_en/24.%20Minimum%20Spanning%20Trees/#prims-algorithm","title":"Prim's Algorithm","text":"<p>This is one algorithm to find a MST from a graph. It is as follows:</p> <ol> <li>Start from some arbitrary start node.</li> <li>Repeatedly add the shortest edge that has one node inside the MST under construction.</li> <li>Repeat until there are V-1 edges.</li> </ol> <p>Prim's algorithm works because at all stages of the algorithm, if we take all the nodes that are part of our MST under construction as one set, and all other nodes as a second set, then this algorithm always adds the lightest edge that crosses this cut, which is necessarily part of the final MST by the Cut Property.</p> <p>Dijkstra's considers candidate nodes by their distance from the source node, Prim's looks at each candidate node's distance from the MST under construction. Thus, the runtime of Prim's if done using the same mechanism as Dijkstra's, would be the same as Dijkstra's, which is \\(O((|V|+|E|) \\log |V|)\\). Remember, this is because we need to add to a priority queue fringe once for every edge we have (Change or not change the priority of a vertex), and we need to dequeue from it once for every vertex we have (Confirm the edge is in the MST).</p>"},{"location":"cs61b/note_en/24.%20Minimum%20Spanning%20Trees/#kruskals-algorithm","title":"Kruskal's Algorithm","text":"<p>The algorithm is as follows:</p> <ol> <li>Sort all the edges from lightest to heaviest.</li> <li>Taking one edge at a time (in sorted order), add it to our MST under construction if doing so does not introduce a cycle.</li> <li>Repeat until there are \\(V-1\\) edges.</li> </ol> <p>Kruskal's algorithm works because: - Any edge we add will be connecting one node, which we can say is part of one set, and a second node, which we can say is part of a second set. - This edge we add is not part of a cycle, because we are only adding an edge if it does not introduce a cycle. - Further, we are looking at edge candidates in order from lightest to heaviest. Therefore, this edge we are adding must be the lightest edge across this cut.</p> <p>Kruskal's runs in \\(O(|E| \\log |E|)\\) time because the bottleneck of the algorithm is sorting all of the edges to start (for example, we can use heap sort, in which we insert all of the edges into a heap and remove the min one at a time). If we are given pre-sorted edges and don't have to pay for that, then the runtime is \\(O(|E| \\log^* |V|)\\). This is because with every edge we propose to add, we need to check whether it will introduce a cycle or not. One way we know how to do this is by using Weighted Quick Union with Path Compression; this will efficiently tell us whether two nodes are connected (unioned) together already or not. This will cost \\(|E|\\) calls on <code>isConnected</code>, which costs \\(O(\\log^* |V|)\\) each, where \\(\\log^*\\)\u200b is the Ackermann function.</p>"},{"location":"cs61b/note_en/25.%20Range%20Searching%20and%20Multi-Dimensional%20Data/","title":"Lecture","text":"<ul> <li>Rank - get index</li> <li>Uniform Partitioning is not as good as Quadtrees and Kd-trees</li> <li>1D uniform partitioning is hashtable.</li> <li>Applications</li> <li>Murmuration<ul> <li>Boids</li> </ul> </li> <li>NBody Simulation<ul> <li>Barnes-Hut</li> </ul> </li> </ul>"},{"location":"cs61b/note_en/25.%20Range%20Searching%20and%20Multi-Dimensional%20Data/#overview","title":"Overview","text":"<p>Additional Set Operations There are many other operations we might be interested in supporting on a set. For example, we might have a select(int i) method that returns the ith smallest item in the set. Or we might have a subSet(T from, T to) operation that returns all items in the set between from and to. Or if we have some notion of distance, we might have a nearest(T x) method that finds the closest item in the set to x.</p> <p>On 1D data, it is relatively straightforward to support such operations efficiently. If we use only one of the coordinates (e.g. X or Y coordinate), the structure of our data will fail to reflect the full ordering of the data.</p> <p>QuadTrees A natural approach is to make a new type of Tree\u2013 the QuadTree. The QuadTree has 4 neighbors, Northwest,Northeast, Southwest, and Southeast. As you move your way down the tree to support queries, it is possible to prune branches that do not contain a useful result.</p> <p>K-D Trees One final data structure that we have for dealing with 2 dimensional data is the K-d Tree. Essentially the idea of a K-D tree is that it\u2019s a normal Binary Search Tree, except we alternate what value we\u2019re looking at when we traverse through the tree. For example at the root everything to the left has an X value less than the root and everything to the right has a X value greater than the root. Then on the next level, every item to the left of some node has a Y value less than that item and everything to the right has a Y value greater than it. Somewhat surprisingly, KdTrees are quite efficient.</p>"},{"location":"cs61b/note_en/25.%20Range%20Searching%20and%20Multi-Dimensional%20Data/#qa","title":"Q&amp;A","text":"<ul> <li>Why we need <code>clear()</code></li> <li>I just mimic the standard java library.</li> <li>Study for the exam</li> <li>Having a person to argue about the solutions is a good way to turn base understanding into deep understanding.</li> <li>Josh doesn't like Bourbaki way of teaching in this course</li> <li>CS70 is notoriously difficult</li> </ul>"},{"location":"cs61b/note_en/25.%20Range%20Searching%20and%20Multi-Dimensional%20Data/#uniform-partitioning","title":"Uniform Partitioning","text":"<ul> <li>First Question: 2D Range Finding</li> <li>Second Question: Nearest Neighbors</li> </ul>"},{"location":"cs61b/note_en/25.%20Range%20Searching%20and%20Multi-Dimensional%20Data/#initial-attempt-hashtable","title":"Initial Attempt: HashTable","text":"<p>Question: If our set of suns were stored in a HashTable, what is the runtime for finding the answer to our Nearest Neighbors question?</p> <p>Solution: The bucket that each object resides in is effectively random, and so we would have to iterate over all \\(N\\) items to check if each sun could possibly be the closest to the horse. \\Theta(N).</p>"},{"location":"cs61b/note_en/25.%20Range%20Searching%20and%20Multi-Dimensional%20Data/#second-attempt-uniform-partitioning","title":"Second Attempt: Uniform Partitioning","text":"<p>If we uniformly partition our image space by throwing a 4x4 grid over it, we get nice organized buckets. (this is also sometimes called \"spatial hashing\")</p> <p>This can be implemented by not using the object's <code>hashCode()</code> function, and instead having each object provide a <code>getX()</code> and <code>getY()</code> function so that it can compute its own bucket number.</p> <p>Now, we know which grid cells our searches can be confined to, and we only have to look at suns in those particular cells rather than looking at all the suns in our entire image space as we had to before.</p> <p>Question: Using uniform partitioning, what is the runtime for finding the answer to our Nearest Neighbors question, assuming the suns are evenly spread out?</p> <p>Solution: On average, the runtime will be 1616 times faster than without spatial partitioning, but unfortunately \\(N \\over 16\\)\u200b is still \\(\\Theta (N)\\). BUT, this does indeed work better in practice.</p>"},{"location":"cs61b/note_en/25.%20Range%20Searching%20and%20Multi-Dimensional%20Data/#third-attempt-quadtrees","title":"Third Attempt: QuadTrees","text":"<p>One key advantage of Search Trees over Hash Tables is that trees explicitly track the order of items. For example, finding the minimum item in a BST is \\(\\Theta(\\log N)\\) time, but \\(\\Theta (N)\\) in a hash table.</p> <ul> <li>We use four pointers to point the nodes at their corresponding locations: northwest, northeast, southeast, and southwest.</li> <li>Note that just like in a BST, the order in which we insert nodes determines the topology of the QuadTree.</li> <li>Also note that QuadTrees are a form of spatial partitioning in disguise. Similar to how uniform partitioning created a perfect grid before, QuadTrees hierarchically partition by having each node \"own\" 4 subspaces.</li> <li>With the 4-way division imposed by each node of the QuadTree, we still have the pruning effect.</li> </ul>"},{"location":"cs61b/note_en/25.%20Range%20Searching%20and%20Multi-Dimensional%20Data/#k-d-trees","title":"K-D Trees","text":"<p>Quad-Trees are great for 2-D spaces, because there are only 4 quadrants. However, what do we do if we want to move into higher dimension space?</p> <p>We simply spreads all its \\(K\\) dimensions to \\(K\\) levels. So for the K-D case, it partitions like an \\(D_1\\)-based Tree on the first level, then like a \\(D_2\\)-based Tree on the next, then as an \\(D_3\\)-based Tree on third level, a \\(D_4\\)-based Tree on the fourth, etc.</p> <p>But, no matter how high the dimensions get, a K-D tree will always be a binary tree, since each level is partitioned into \"greater\" and \"less than\".</p> <p>For a demo on K-D tree insertion, check out these slides.</p>"},{"location":"cs61b/note_en/25.%20Range%20Searching%20and%20Multi-Dimensional%20Data/#nearest-neighbor-using-a-k-d-tree","title":"Nearest Neighbor using a K-D Tree","text":"<pre><code>nearest(Node n, Point goal, Node best):\n    If n is null, return best\n    If n.distance(goal) &lt; best.distance(goal), best = n\n    If goal &lt; n (according to n\u2019s comparator):\n        goodSide = n.\u201dleft\u201dChild\n        badSide = n.\u201dright\u201dChild\n    else:\n        goodSide = n.\u201dright\u201dChild\n        badSide = n.\u201dleft\u201dChild\n    best = nearest(goodSide, goal, best)\n    If bad side could still have something useful ***\n        best = nearest(badSide, goal, best)\n    return best\n\nuseful(Node n, point goal, Node best):\n    return abs(n.getK() - goal.getK()) &lt; best.distance(goal)\n</code></pre> <p>For a step by step walkthrough, see these slides</p>"},{"location":"cs61b/note_en/26.%20Prefix%20Operations%20and%20Tries/","title":"Lecture","text":"<ul> <li>radix tree/trie</li> <li>Domain (key) Specific Sets and Maps</li> <li>Suffix Trees</li> <li>DAWG</li> </ul>"},{"location":"cs61b/note_en/26.%20Prefix%20Operations%20and%20Tries/#overview","title":"Overview","text":"<p>Summary. The sort problem is to take a sequence of objects and put them into the correct order. The search problem is to store a collection of objects such that they can be rapidly retrieved (i.e. how do we implement a Map or Set). We made the obersvation that BST maps are roughly analagous to comparison based sorting, and hash maps are roughly analagous to counting based (a.k.a. integer) sorting. We observed that we have a 3rd type of sort, which involves sorting by digit, which raised the question: What sort of data structure is analogous to LSD or MSD sort?</p> <p>Terminology. - Length of string key usually represented by L. - Alphabet size usually represented by R.</p> <p>Tries. Analogous to LSD sort. Know how to insert and search for an item in a Trie. Know that Trie nodes typically do not contain letters, and that instead letters are stored implicitly on edge links. Know that there are many ways of storing these links, and that the fastest but most memory hungry way is with an array of size R. We call such tries R-way tries.</p> <p>Advantages of Tries. Tries have very fast lookup times, as we only ever look at as many characters as they are in the data we\u2019re trying to retrieve. However, their chief advantage is the ability to efficiently support various operations not supported by other map/set implementations including: - longestPrefixOf - prefixMatches - spell checking</p>"},{"location":"cs61b/note_en/26.%20Prefix%20Operations%20and%20Tries/#qa","title":"Q&amp;A","text":"<ul> <li>Will we talk about space complexity?</li> <li>Not very much. The reason is that the answers for the data structure we use are not very rich.</li> <li>When we talk about sorting algorithms, we will talk about that.</li> <li>a very spindly k-d tree requires a much more sophisticated approach, e.g. a k-d-b-tree.</li> <li>Josh's favorite OS</li> <li>Josh liked high refresh rate but last time he didn't feel right in Linux GUI.</li> <li>Windows is more compatible with a bunch of tools.</li> <li>WSL2 is nice.</li> <li>Josh did like the philosophy of Linux.</li> <li>There is a really interesting connection between BST and Quick Sort.</li> <li>Trie is the basic data structure used for auto-completing in search engine.</li> <li>Protocol Buffers is the basic data strcuture for Google's data retrieve</li> </ul>"},{"location":"cs61b/note_en/26.%20Prefix%20Operations%20and%20Tries/#data-structures-summary","title":"Data Structures Summary","text":""},{"location":"cs61b/note_en/26.%20Prefix%20Operations%20and%20Tries/#the-search-problem","title":"The Search Problem","text":"<p>The problem we are presented: Given a stream of data, retrieve information of interest.</p> <p>All of the data structures we have discussed so far have been to solve the search problem. How you might ask? Each of the data structures we've learned are used for storing information in schemes that make searching efficient in specific scenarios.</p>"},{"location":"cs61b/note_en/26.%20Prefix%20Operations%20and%20Tries/#search-data-structures","title":"Search Data Structures","text":"Name Store Operation(s) Primary Retrieval Operation Retrieve By List add(key), insert(key, index) get(index) index Map put(key, value) get(key) key identity Set add(key) containsKey(key) key identity PQ add(key) getSmallest() key order (aka key size) Disjoint Sets connect(int1, int2) isConnected(int1, int2) two integer values <p>Remember that these are Abstract Data Types. This means that we define the behavior, not the implementation. We've defined many of the possible implementations in previous chapters. Let's think about how these implementations and ADTs interact.</p>"},{"location":"cs61b/note_en/26.%20Prefix%20Operations%20and%20Tries/#abstraction","title":"Abstraction","text":"<p>Abstraction often happens in layers. Abstract Data Types can often contain two abstract ideas boiling down to one implementation. Let's consider some examples:</p> <ul> <li>If we remembered the Priority Queue ADT, we were attempting to find an implementation that would be efficient for PQ operations. We decided that our Priority Queue would be implemented using a Heap Ordered Tree, but as we saw we had several approaches (1A, 1B, 1C, 2, 3) of representing a tree for heaps.</li> <li>A similar idea is an External Chaining Hash Table. This data structure is implemented using an array of buckets, but these buckets can be done using either an ArrayList, Resizing Array, Linked List, or BST.</li> </ul> <p>These two examples tell us that we can often think of an ADT by the use of another ADT. And that Abstract Data Types have layers of abstraction, each defining a behavior that is more specific than the idea that came before it.</p>"},{"location":"cs61b/note_en/26.%20Prefix%20Operations%20and%20Tries/#tries","title":"Tries","text":"<p>We are now going to learn about a new data structure called Tries. These will serve as a new implementation (from what we have previously learned) of a Set and a Map that has some special functionality for certain types of data and information.</p>"},{"location":"cs61b/note_en/26.%20Prefix%20Operations%20and%20Tries/#inventing-the-trie","title":"Inventing the Trie","text":"<p>Tries are a very useful data structure used in cases where keys can be broken into \"characters\" and share prefixes with other keys (e.g. strings).</p> <p>Suppose we had a set containing \"sam\", \"sad\", \"sap\", \"same\", \"a\", and \"awls. How might we improve upon this using other possible data structures we know? How might we take advantage of the structure strings?</p> <p>Here are some key ideas that we will use: - Every node stores only one letter - Nodes can be shared by multiple keys</p> <p>Therefore, we can insert \"sam\", \"sad\", \"sap\", \"same\", \"a\", and \"awls\" into a tree structure that contains single character nodes. An important observation to make is that most of these words share the same prefixes, therefore we can utilize these similarly structured strings for our structure.</p> <p>To search, we will traverse our trie and compare to each character of the string as we go down. Thus, there are only two cases when we wouldn't be able to find a string; either the final node is white or we fall off the tree.</p> <ul> <li>contains(\"sam\"): true, blue node</li> <li>contains(\"sa\"): false, white node</li> <li>contains(\"a\"): true, blue node</li> <li>contains(\"saq\"): false, fell off tree</li> </ul>"},{"location":"cs61b/note_en/26.%20Prefix%20Operations%20and%20Tries/#summary","title":"Summary","text":"<p>A key takeaway is that we can often improve a general-purpose data structure when we add specificity to our problem, often by adding additional constraints. For example, we improved our implementation of HashMap when we restricted the keys to only be ASCII character, creating extremely efficient data structure.</p> <ul> <li>There is a distinction between ADTs and specific implementations. As an example, Disjoint Sets is an ADT: any Disjoint Sets has the methods <code>connect(x, y)</code> and <code>isConnected(x, y)</code>. There are four different ways to implement those methods: Quick Find, Quick Union, Weighted QU, and WQUPC.</li> <li>The Trie is a specific implementation for Sets and Maps that is specialized for strings.</li> <li>We give each node a single character and each node can be a part of several keys inside of the trie.</li> <li>Searching will only fail if we hit an unmarked node or we fall off the tree</li> <li>Short for Retrieval tree, almost everyone pronounces it as \"try\" but Edward Fredkin suggested it be pronounced as \"tree\"</li> </ul>"},{"location":"cs61b/note_en/26.%20Prefix%20Operations%20and%20Tries/#implementation","title":"Implementation","text":"<ul> <li>We'll take a first approach with the idea that each node stores a letter, its children, and a color.</li> <li>But we can make an important observation: each link corresponds to a character if and only if that character exists.</li> <li>Therefore, we can remove the Node's character variable and instead base the value of the character from its position in the parent <code>DataIndexedCharMap</code>.</li> </ul>"},{"location":"cs61b/note_en/26.%20Prefix%20Operations%20and%20Tries/#performance","title":"Performance","text":"<p>Let's look at the runtime through a measurement that can be measured; in terms of L, the length of the key: - <code>add</code>: \\(\\Theta(L)\\) - <code>contains</code>: \\(O(L)\\)</p> <p>We have achieved constant runtime without having to worry about amortized resizing times or an even spreading of keys, but as we mentioned above our current design is extremely wasteful since each node contains an array for every single character even if that character doesn't exist.</p>"},{"location":"cs61b/note_en/26.%20Prefix%20Operations%20and%20Tries/#child-tracking","title":"Child Tracking","text":"<p>The problem with this approach was that we would have initialized many null spots that don't contain any children.</p> <ul> <li>Alternate Idea #1: Hash-Table based Trie. This won't create an array of 128 spots, but instead initialize the default value and resize the array only when necessary with the load factor.</li> <li>Alternate Idea #2: BST based Trie. Again this will only create children pointers when necessary, and we will store the children in the BST. Obviously, we still have the worry of the runtime for searching in this BST, but this is not a bad approach.</li> </ul> <p>When we implement a Trie, we have to pick a map to our children. A Map is an ADT, so we must also choose the underlying implementation for the map. What does this reiterate to us? There is an abstraction barrier between the implementations and the ADT that we are trying to create. This abstraction barrier allows us to take advantage of what each implementation has to offer when we try to meet the ADT behavior. Let's consider each advantage:</p> <ul> <li>DataIndexedCharMap</li> <li>Space: 128 links per node</li> <li>Runtime: \\(\\Theta(1)\\)</li> <li>BST</li> <li>Space: C links per node, where C is the number of children</li> <li>Runtime: \\(O(\\log R)\\), where R is the size of the alphabet</li> <li>Hash Table</li> <li>Space: C links per node, where C is the number of children</li> <li>Runtime: \\(O(R)\\), where R is the size of the alphabet</li> </ul> <p>Note: Cost per link is higher in BST and Hash Tables; R is a fixed number (this means we can think of the runtimes as constant)</p> <p>We can takeaway a couple of things. There is a slight memory and efficiency trade off (with BST/Hash Tables vs. DataIndexedCharMap). The runtimes for Trie operations are still constant without any caveats. Tries will especially thrive with some special operations.</p>"},{"location":"cs61b/note_en/26.%20Prefix%20Operations%20and%20Tries/#trie-string-operations","title":"Trie String Operations","text":"<p>We can see that Tries offer us constant time lookup and insertion, but do they actually perform better than BSTs or Hash Tables? Possibly not. For every string we have to traverse through every character, whereas in BSTs we have access to the entire string immediately. So what are Tries good for then?</p>"},{"location":"cs61b/note_en/26.%20Prefix%20Operations%20and%20Tries/#prefix-matching","title":"Prefix Matching","text":"<p>Let's attempt to define a method collect which returns all of the keys in a Trie. The pseudocode will be as follows: <pre><code>collect():\n    Create an empty list of results x\n    For character c in root.next.keys():\n        Call colHelp(c, x, root.next.get(c))\n    Return x\n\ncolHelp(String s, List&lt;String&gt; x, Node n):\n    if n.isKey:\n        x.add(s)\n    For character c in n.next.keys():\n        Call colHelp(s + c, x, n.next.get(c))\n</code></pre> Now we can try writing the method keysWithPrefix which returns all keys that contain the prefix passed in as an argument. We will borrow heavily from the collect method above. <pre><code>keysWithPrefix(String s):\n    Find the end of the prefix, alpha\n    Create an empty list x\n    For c in alpha.next.keys():\n        Call colHelp(\"sa\" + c, x, alpha.next.get(c))\n    Return x\n</code></pre></p>"},{"location":"cs61b/note_en/26.%20Prefix%20Operations%20and%20Tries/#autocomplete","title":"Autocomplete","text":"<p>One way to achieve this is using a Trie! We will build a map from strings to values.</p> <ul> <li>Values will represent how important Google thinks that string is (Probably frequency)</li> <li>Store billions of strings efficiently since they share nodes, less wasteful duplicates</li> <li>When a user types a query, we can call the method <code>keysWithPrefix(x)</code> and return the 10 strings with the highest value</li> </ul> <p>One major flaw with this system is if the user types in short length strings. You can imagine that the number of keys with the prefix of the input is in the millions when in reality we only want 10. A possible solution to this issue is to store the best value of a substring in each node. We can then consider children in the order of the best value.</p> <p>Another optimization is to merge nodes that are redundant. This would give us a \"radix trie\", which holds characters as well as strings in each node. We won't discuss this in depth.</p>"},{"location":"cs61b/note_en/26.%20Prefix%20Operations%20and%20Tries/#summary_1","title":"Summary","text":"<p>Knowing the types of data that you are storing can give you great power in creating efficient data structures. Specifically for implementing Maps and Sets, if we know that all keys will be Strings, we can use a Trie:</p> <ul> <li>Tries theoretically have better performances for searching and insertion than hash tables or balanced search trees</li> <li>There are more implementations for how to store the children of every node of the trie, specifically three. These three are all fine, but hash table is the most natural<ul> <li><code>DataIndexedCharMap</code> (Con: excessive use of space, Pro: speed efficient)</li> <li><code>Bushy BST</code> (Con: slower child search, Pro: space efficient)</li> <li><code>Hash Table</code> (Con: higher cost per link, Pro: space efficient)</li> </ul> </li> <li>Tries may not actually be faster in practice, but they support special string operations that other implementations don't</li> <li><code>longestPrefixOf</code> and <code>keysWithPrefix</code> are easily implemented since the trie is stored character by character</li> <li><code>keysWithPrefix</code> allows for algorithms like autocomplete to exist, which can be optimized through use of a priority queue.</li> </ul> key type get(x) add(x) Balanced BST comparable \\(\\Theta(\\log N)\\) \\(\\Theta(\\log N)\\) RSC Hash Table hashable \\(\\Theta(1)^{\\dagger}\\) \\(\\Theta(1)^{*{\\dagger}}\\) Data Indexed Array chars \\(\\Theta(1)\\) \\(\\Theta(1)\\) Tries (BST, HT, DICM) Strings \\(\\Theta(1)\\) \\(\\Theta(1)\\) <p>*: Indicates \"on average\"; \\(\\dagger\\): Indicates items are evenly spread.</p>"},{"location":"cs61b/note_en/27.%20Software%20Engineering%20I/","title":"Lecture","text":"<ul> <li>The topic is to teach you how to deal with the large scale</li> <li>One thing that's hard is that, in a lecture, it's hard to find a task which is small enough to actually fit in the lecture but big enough to show the big picture issues.</li> <li>These lectures are heavily inspired by \"A Philosophy of Software Design\".</li> <li>The different between CS and Math is that there is a machine that brings the creativity work into life</li> <li>John Osterhot's two key tools handling complexity</li> <li>Making code simpler and more obvious.<ul> <li>Eliminating special cases, e.g. sentinel nodes.</li> </ul> </li> <li>Encapsulation into modules.<ul> <li>In a modular design, creators of one \"module\" can use other module without knowing how they work.</li> </ul> </li> <li>The nature of complexity</li> <li>\"anything related to the structure of a software system that makes it hard to understand and modify the system.\"</li> <li>Understanding how the code works.</li> <li>The amount of time it takes to make small improvements.</li> <li>Finding what needs to be modified to make an improvement.</li> <li>Difficult to fix one bug without introducing another.</li> <li>\"If the software is hard to understand and modify, then it is complicated. If it is easy to understand and modify, then it is simple\".</li> <li>A system may have a few pieces that are highly complex, but if nobody even looks at that code, then the overall impact is minimal.</li> <li><code>C = sum(c_p * t_p)</code> for each part p.<ul> <li><code>c_p</code> is the complexity of part p.</li> <li><code>t_p</code> is the time spent working on part p.</li> </ul> </li> <li>Symptoms of Complexity</li> <li>Change amplification: A simple change requires modification in many places.</li> <li>Cognitive load: How much you need to know in order to make a change.<ul> <li>Note: This is not the same as number of lines of code. Often MORE lines of code actually makes code simpler, because it is more narrative.</li> <li>Incidently that's why Josh doesn't like <code>i++</code>.</li> <li>more lines of code and varible for lower cognitive load is better for two reasons:<ul> <li>The cost in performance is likely to be very small (some constant amount).</li> <li>Modern compilers might just optimize out the inefficient completely.</li> </ul> </li> </ul> </li> <li>Unknown unknowns: The worst type of complexity. This occurs when it's not even clear what you need to know in order to make modifications.<ul> <li>Common in large code bases.</li> <li>You've felt this a lot in Gitlet!</li> </ul> </li> <li>Obivious Systems</li> <li>Complexity comes slowly</li> <li>Ousterhout recommends a zero tolerance philosophy.</li> <li>Tactical programming</li> <li>Much of the programming that you've down, Ousterhout would descrtible as \"tactical\"</li> <li>\"You main focus is to get something working, such as a new feature or bug fix.\"</li> <li>The problem with tactical programming:<ul> <li>You don't spend problem thinking about overall design.</li> <li>You introduce tons of little complexityies. (many codes do the similar things)</li> <li>Refactoring takes more time.</li> </ul> </li> <li>Strategic programming</li> <li>Working code isn't enough.</li> <li>The most important thing is the long term structure of the system.</li> <li>Adding complexities to achieve short term time games is unacceptable.</li> <li>On project 3, try to plan ahead.</li> <li>For each new class/task:<ul> <li>Try a few different ideas.</li> <li>When you feel like you have found something that feels clean, then fully implement that idea.</li> <li>In real systems: Try to image how things might need to be changed in the future, and make sure your design can handle such changes.</li> <li>In project 3, you'll need to support both input from the keyboard AND input from a String.</li> </ul> </li> <li>Stragtegic Programming is Very Hard</li> <li>Now matter how careful you try to be, there will be mistakes in your design.</li> <li>Avoid the temptation to patch around these mistakes. Instead, fix the design.</li> <li>It's impossible to design large software systems entirely in advance.</li> <li>Facebook's transformation from \"Move fast and break things\" to \"Most fast with stable infra.\"</li> </ul>"},{"location":"cs61c/cs61c/","title":"Cs61c","text":"<ul> <li>https://github.com/Yan-J-lee/cs61c-projects/blob/master</li> <li>https://github.com/FeiNiaoBF/Fa22-Cs61c-proj3</li> <li>https://github.com/PKUFlyingPig/CS61C-summer20</li> <li>https://github.com/Ch-EnShen/cs61c-all-materials</li> <li>https://www.learncs.site/docs/curriculum-resource/cs61c</li> <li>note1</li> <li>CS61C\u81ea\u5b66\u5c0f\u7ed3</li> <li>\u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u8bbe\u8ba1\u7b14\u8bb0</li> </ul>"},{"location":"cs61c/cs61c_lec06/","title":"Cs61c lec06","text":"<p><code>lec06.pdf</code> \u6587\u4ef6\u662f\u5173\u4e8e RISC-V \u6c47\u7f16\u8bed\u8a00\u548c\u6307\u4ee4\u96c6\u67b6\u6784\u7684\u5165\u95e8\u8bfe\u7a0b\uff0c\u4ee5\u4e0b\u662f\u8be5\u8bfe\u7a0b\u7684\u8be6\u7ec6\u5185\u5bb9:</p>"},{"location":"cs61c/cs61c_lec06/#1","title":"1. \u6c47\u7f16\u8bed\u8a00\u7b80\u4ecb","text":"<ul> <li>\u6c47\u7f16\u8bed\u8a00\u662f\u4e00\u79cd\u4f4e\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff0c\u5b83\u4e0e\u7279\u5b9a\u7684\u786c\u4ef6\u67b6\u6784\u7d27\u5bc6\u76f8\u5173\u3002</li> <li>\u6c47\u7f16\u8bed\u8a00\u7a0b\u5e8f\u9700\u8981\u901a\u8fc7\u6c47\u7f16\u5668\u8f6c\u6362\u6210\u673a\u5668\u8bed\u8a00\u7a0b\u5e8f\uff0c\u4ee5\u4fbf CPU \u6267\u884c\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec06/#2","title":"2. \u9ad8\u7ea7\u8bed\u8a00\u4e0e\u6c47\u7f16\u8bed\u8a00","text":"<ul> <li>\u9ad8\u7ea7\u8bed\u8a00\uff08\u5982 C\u3001Java\uff09\u7f16\u5199\u7684\u7a0b\u5e8f\u9700\u8981\u7f16\u8bd1\u5668\u8f6c\u6362\u6210\u6c47\u7f16\u8bed\u8a00\uff0c\u518d\u7531\u6c47\u7f16\u5668\u8f6c\u6362\u6210\u673a\u5668\u8bed\u8a00\u3002</li> <li>\u6c47\u7f16\u8bed\u8a00\u4e0e\u786c\u4ef6\u67b6\u6784\uff08\u5982 RISC-V\uff09\u76f4\u63a5\u76f8\u5173\uff0c\u63d0\u4f9b\u4e86\u5bf9\u786c\u4ef6\u7684\u76f4\u63a5\u63a7\u5236\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec06/#3","title":"3. \u62bd\u8c61\u7684\u6982\u5ff5","text":"<ul> <li>\u62bd\u8c61\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u7684\u4e00\u4e2a\u57fa\u672c\u6982\u5ff5\uff0c\u5141\u8bb8\u6211\u4eec\u5728\u4e0d\u540c\u7684\u5c42\u6b21\u4e0a\u7406\u89e3\u548c\u5b9e\u73b0\u7a0b\u5e8f\u3002</li> <li>\u4f8b\u5982\uff0c\u4ece\u9ad8\u7ea7\u8bed\u8a00\u5230\u6c47\u7f16\u8bed\u8a00\u518d\u5230\u673a\u5668\u8bed\u8a00\uff0c\u6bcf\u4e2a\u5c42\u6b21\u90fd\u662f\u5bf9\u4e0b\u4e00\u5c42\u7684\u62bd\u8c61\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec06/#4-risc-v","title":"4. RISC-V \u67b6\u6784","text":"<ul> <li>RISC-V \u662f\u4e00\u79cd\u5f00\u6e90\u3001\u65e0\u8bb8\u53ef\u8d39\u7528\u7684\u6307\u4ee4\u96c6\u67b6\u6784\uff08ISA\uff09\u3002</li> <li>\u5b83\u652f\u6301 32 \u4f4d\u300164 \u4f4d\u548c 128 \u4f4d\u53d8\u4f53\u3002</li> <li>RISC-V \u65e8\u5728\u652f\u6301\u5f00\u653e\u7684\u7814\u7a76\u548c\u6559\u5b66\uff0c\u7531\u52a0\u5dde\u5927\u5b66\u4f2f\u514b\u5229\u5206\u6821\u5728 2010 \u5e74\u53d1\u8d77\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec06/#5-risc-v","title":"5. \u4e3a\u4ec0\u4e48\u9009\u62e9 RISC-V","text":"<ul> <li>RISC-V \u7b80\u5355\u6613\u5b66\uff0c\u9002\u5408\u4f5c\u4e3a\u5b66\u4e60\u5176\u4ed6\u6c47\u7f16\u8bed\u8a00\u7684\u57fa\u7840\u3002</li> <li>\u5b66\u4e60 RISC-V \u53ef\u4ee5\u5e2e\u52a9\u7406\u89e3\u5176\u4ed6 CPU \u67b6\u6784\u548c\u6c47\u7f16\u8bed\u8a00\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec06/#6","title":"6. \u5bc4\u5b58\u5668","text":"<ul> <li>\u5bc4\u5b58\u5668\u662f CPU \u5185\u90e8\u7684\u5c0f\u578b\u5b58\u50a8\u5355\u5143\uff0c\u7528\u4e8e\u5b58\u50a8\u6307\u4ee4\u6267\u884c\u8fc7\u7a0b\u4e2d\u7684\u4e34\u65f6\u6570\u636e\u3002</li> <li>RISC-V \u6709 32 \u4e2a\u5bc4\u5b58\u5668\uff08x0 \u5230 x31\uff09\uff0c\u6bcf\u4e2a\u5bc4\u5b58\u5668\u90fd\u662f 32 \u4f4d\u5bbd\u3002</li> <li>\u5bc4\u5b58\u5668\u7684\u8bbf\u95ee\u901f\u5ea6\u6bd4\u5185\u5b58\u5feb\u5f97\u591a\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f4d\u4e8e CPU \u5185\u90e8\u3002\\</li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec06/#7","title":"7. \u5bc4\u5b58\u5668\u7684\u4f7f\u7528","text":"<ul> <li>\u5bc4\u5b58\u5668\u7528\u4e8e\u5b58\u50a8\u6307\u4ee4\u6267\u884c\u6240\u9700\u7684\u6570\u636e\uff0c\u5982\u53d8\u91cf\u548c\u4e2d\u95f4\u7ed3\u679c\u3002</li> <li>\u4e0e\u9ad8\u7ea7\u8bed\u8a00\u4e2d\u7684\u53d8\u91cf\u4e0d\u540c\uff0c\u5bc4\u5b58\u5668\u6ca1\u6709\u7c7b\u578b\uff0c\u53ef\u4ee5\u5b58\u50a8\u4efb\u4f55\u7c7b\u578b\u7684\u6570\u636e\u3002</li> <li>x0 \u5bc4\u5b58\u5668\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u5bc4\u5b58\u5668\uff0c\u5b83\u603b\u662f\u5305\u542b\u503c 0\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec06/#8","title":"8. \u5bc4\u5b58\u5668\u4e0e\u5185\u5b58\u7684\u901f\u5ea6\u6bd4\u8f83","text":"<ul> <li>\u5bc4\u5b58\u5668\u6bd4\u5185\u5b58\u5feb\u7ea6 50-500 \u500d\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u7269\u7406\u4f4d\u7f6e\u548c\u5927\u5c0f\u3002</li> <li>\u5185\u5b58\u867d\u7136\u5bb9\u91cf\u5927\uff0c\u4f46\u8bbf\u95ee\u901f\u5ea6\u6162\u4e8e\u5bc4\u5b58\u5668\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec06/#9","title":"9. \u6c47\u7f16\u8bed\u8a00\u4e2d\u7684\u6ce8\u91ca","text":"<ul> <li>\u6ce8\u91ca\u5bf9\u4e8e\u7406\u89e3\u6c47\u7f16\u4ee3\u7801\u81f3\u5173\u91cd\u8981\uff0c\u5c24\u5176\u662f\u5728\u590d\u6742\u7684\u64cd\u4f5c\u4e2d\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec06/#10","title":"10. \u6c47\u7f16\u6307\u4ee4\u793a\u4f8b","text":"<ul> <li>\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528\u6c47\u7f16\u6307\u4ee4\u6267\u884c\u57fa\u672c\u7684\u7b97\u672f\u64cd\u4f5c\uff0c\u5982\u52a0\u6cd5\u548c\u51cf\u6cd5\u3002</li> <li></li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec06/#11-immediates","title":"11. \u7acb\u5373\u6570\uff08Immediates\uff09","text":"<ul> <li>\u7acb\u5373\u6570\u7528\u4e8e\u5728\u6c47\u7f16\u6307\u4ee4\u4e2d\u63d0\u4f9b\u6570\u503c\u5e38\u91cf\u3002</li> <li>RISC-V \u4e2d\u7684\u7acb\u5373\u6570\u64cd\u4f5c\u9650\u5236\u5728 12 \u4f4d\uff0c\u5e76\u4e14\u4f1a\u8fdb\u884c\u7b26\u53f7\u6269\u5c55\u5230 32 \u4f4d\u3002</li> <li> extension \u4fdd\u8bc1\u503c\u4e0d\u53d8</li> <li>add is for registers</li> <li>addi is for immediates</li> </ul>"},{"location":"cs61c/cs61c_lec06/#12","title":"12. \u5185\u5b58","text":"<ul> <li>\u5185\u5b58\u662f CPU \u5916\u90e8\u7684\u5b58\u50a8\u8bbe\u5907\uff0c\u5bb9\u91cf\u5927\u4f46\u901f\u5ea6\u6162\u3002</li> <li>\u5185\u5b58\u7528\u4e8e\u5b58\u50a8\u7a0b\u5e8f\u548c\u6570\u636e\uff0c\u4f46\u8bbf\u95ee\u901f\u5ea6\u6bd4\u5bc4\u5b58\u5668\u6162\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec06/#13","title":"13. \u5185\u5b58\u5730\u5740","text":"<ul> <li>\u4ecb\u7ecd\u4e86\u5982\u4f55\u901a\u8fc7\u5730\u5740\u8bbf\u95ee\u5185\u5b58\u4e2d\u7684\u6570\u636e\u3002</li> <li>\u89e3\u91ca\u4e86\u5b57\u8282\u3001\u5b57\u548c\u4f4d\u7684\u5730\u5740\u8ba1\u7b97\u3002</li> <li>goldilocks principle</li> </ul>"},{"location":"cs61c/cs61c_lec06/#14","title":"14. \u8bbf\u95ee\u6570\u7ec4","text":"<ul> <li>\u4ecb\u7ecd\u4e86\u5982\u4f55\u5728\u6c47\u7f16\u8bed\u8a00\u4e2d\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\uff0c\u5305\u62ec\u6307\u9488\u7b97\u672f\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec06/#15","title":"15. \u4ece\u5185\u5b58\u52a0\u8f7d\u6570\u636e","text":"<ul> <li>\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 <code>lw</code>\uff08\u52a0\u8f7d\u5b57 load word\uff09\u6307\u4ee4\u5c06\u6570\u636e\u4ece\u5185\u5b58\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u3002</li> <li></li> <li>\u7c7b\u4f3c\u7684\uff0cx15\u76f8\u5f53\u4e8e\u6bb5\u5730\u5740\uff0c12(3 * sizeof(int))\u76f8\u5f53\u4e8e\u504f\u79fb\u5730\u5740</li> </ul>"},{"location":"cs61c/cs61c_lec06/#16","title":"16. \u5b58\u50a8\u6570\u636e\u5230\u5185\u5b58","text":"<ul> <li>\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 <code>sw</code>\uff08\u5b58\u50a8\u5b57\uff09\u6307\u4ee4\u5c06\u6570\u636e\u4ece\u5bc4\u5b58\u5668\u5b58\u50a8\u5230\u5185\u5b58\u3002</li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec06/#17","title":"17. \u52a0\u8f7d\u548c\u5b58\u50a8\u5b57\u8282","text":"<ul> <li>\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 <code>lb</code>\uff08\u52a0\u8f7d\u5b57\u8282\uff09\u548c <code>sb</code>\uff08\u5b58\u50a8\u5b57\u8282\uff09\u6307\u4ee4\u5728\u5b57\u8282\u7ea7\u522b\u4e0a\u8fdb\u884c\u6570\u636e\u4f20\u8f93\u3002</li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec06/#18","title":"18. \u7b26\u53f7\u6269\u5c55","text":"<ul> <li>\u89e3\u91ca\u4e86\u5728\u52a0\u8f7d\u6570\u636e\u65f6\u5982\u4f55\u8fdb\u884c\u7b26\u53f7\u6269\u5c55\uff0c\u4ee5\u53ca\u5b83\u4e0e\u5b58\u50a8\u64cd\u4f5c\u7684\u533a\u522b\u3002</li> <li></li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec06/#19","title":"19. \u903b\u8f91\u6307\u4ee4","text":"<ul> <li>\u4ecb\u7ecd\u4e86 RISC-V \u4e2d\u7684\u903b\u8f91\u6307\u4ee4\uff0c\u5305\u62ec\u4f4d\u4e0e\uff08AND\uff09\u3001\u4f4d\u6216\uff08OR\uff09\u3001\u4f4d\u5f02\u6216\uff08XOR\uff09\u3001\u903b\u8f91\u5de6\u79fb\uff08SLL\uff09\u7b49\u3002</li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec06/#20","title":"20. \u79fb\u4f4d\u64cd\u4f5c","text":"<ul> <li>\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528\u79fb\u4f4d\u6307\u4ee4\u6267\u884c\u7b97\u672f\u548c\u903b\u8f91\u79fb\u4f4d\u3002</li> <li></li> <li>\u5c31\u662f\u5148\u628a\u6240\u6709\u8fd0\u7b97\u7b97\u597d\uff0c\u653e\u5230\u57fa\u7840\u5730\u5740\u91cc\uff0c\u8fd9\u6837\u504f\u79fb\u5730\u5740\u5c31\u4e0d\u4f1a\u5305\u542bregister\u4e86</li> </ul>"},{"location":"cs61c/cs61c_lec06/#21","title":"21. \u51b3\u7b56\u5236\u5b9a\u6307\u4ee4","text":"<ul> <li>\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528\u5206\u652f\u6307\u4ee4\u5728 RISC-V \u4e2d\u5b9e\u73b0\u6761\u4ef6\u5224\u65ad\uff0c\u4f8b\u5982 <code>beq</code>\uff08\u5982\u679c\u76f8\u7b49\u5219\u8df3\u8f6c\uff09\u548c <code>bne</code>\uff08\u5982\u679c\u4e0d\u76f8\u7b49\u5219\u8df3\u8f6c\uff09\u3002</li> <li></li> <li></li> <li></li> <li></li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec06/#22","title":"22. \u6807\u7b7e\u548c\u8df3\u8f6c","text":"<ul> <li>\u6807\u7b7e\u7528\u4e8e\u6807\u8bb0\u4ee3\u7801\u4e2d\u7684\u4f4d\u7f6e\uff0c\u5206\u652f\u548c\u8df3\u8f6c\u6307\u4ee4\u53ef\u4ee5\u4f7f\u7528\u6807\u7b7e\u6765\u5b9e\u73b0\u975e\u987a\u5e8f\u6267\u884c\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec06/#23","title":"23. \u5faa\u73af\u793a\u4f8b","text":"<ul> <li>\u5c55\u793a\u4e86\u5982\u4f55\u5728\u6c47\u7f16\u8bed\u8a00\u4e2d\u5b9e\u73b0\u5faa\u73af\uff0c\u4f7f\u7528 <code>for</code> \u5faa\u73af\u7684\u4f8b\u5b50\u8fdb\u884c\u4e86\u8bf4\u660e\u3002</li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec06/#24","title":"24. \u66f4\u591a\u6307\u4ee4","text":"<ul> <li>\u63d0\u4f9b\u4e86 RISC-V \u53c2\u8003\u5361\u7247\u7684\u94fe\u63a5\uff0c\u4f9b\u8fdb\u4e00\u6b65\u5b66\u4e60\u548c\u53c2\u8003\u3002</li> </ul> <p>\u8fd9\u4efd\u8bb2\u4e49\u4e3a\u5b66\u751f\u63d0\u4f9b\u4e86 RISC-V \u6c47\u7f16\u8bed\u8a00\u7f16\u7a0b\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u6db5\u76d6\u4e86\u4ece\u57fa\u672c\u7684\u7b97\u672f\u64cd\u4f5c\u5230\u66f4\u590d\u6742\u7684\u5185\u5b58\u8bbf\u95ee\u548c\u63a7\u5236\u6d41\u6307\u4ee4\u3002\u901a\u8fc7\u8fd9\u4e9b\u77e5\u8bc6\uff0c\u5b66\u751f\u80fd\u591f\u7406\u89e3\u5e76\u5f00\u59cb\u7f16\u5199\u7b80\u5355\u7684\u6c47\u7f16\u7a0b\u5e8f\u3002</p>"},{"location":"cs61c/cs61c_lec07/","title":"Cs61c lec07","text":"<p><code>lec07.pdf</code> \u6587\u4ef6\u662f\u5173\u4e8e RISC-V \u6307\u4ee4\u96c6\u548c\u5982\u4f55\u5b9e\u73b0\u51fd\u6570\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u8bfe\u7a0b\u5185\u5bb9\u3002\u4ee5\u4e0b\u662f\u8be5\u8bfe\u7a0b\u5185\u5bb9\u7684\u8be6\u7ec6\u8bb2\u89e3:</p>"},{"location":"cs61c/cs61c_lec07/#1","title":"1. \u5bc4\u5b58\u5668\u548c\u5b83\u4eec\u80fd\u5b58\u50a8\u7684\u5185\u5bb9","text":"<ul> <li>\u5bc4\u5b58\u5668:32\u4f4d\u5bbd\uff0c\u7528\u4e8e\u5b58\u50a8\u5404\u79cd\u503c\u3002</li> <li>\u53ef\u4ee5\u5b58\u50a8\u6570\u7ec4\u7684\u5f00\u59cb\u4f4d\u7f6e\u3001\u5b57\u7b26\u4e32\u3001\u6574\u6570\u503c\u7b49\u3002</li> <li>\u5bc4\u5b58\u5668\u7528\u4e8e\u5feb\u901f\u8bbf\u95ee\u548c\u5904\u7406\u6570\u636e\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec07/#2","title":"2. \u5df2\u5b66\u4e60\u7684\u6307\u4ee4","text":"<ul> <li>\u52a0\u6cd5/\u51cf\u6cd5:<code>add</code>, <code>sub</code>\uff0c\u7528\u4e8e\u6267\u884c\u57fa\u672c\u7684\u7b97\u672f\u8fd0\u7b97\u3002</li> <li>\u52a0\u5e38\u6570:<code>addi</code>\uff0c\u7528\u4e8e\u5c06\u5bc4\u5b58\u5668\u7684\u503c\u4e0e\u7acb\u5373\u6570\u76f8\u52a0\u3002</li> <li>\u5185\u5b58\u8bbf\u95ee:<code>lw</code> (load word), <code>lb</code> (load byte), <code>sw</code> (store word), <code>sb</code> (store byte)\uff0c\u7528\u4e8e\u5728\u5bc4\u5b58\u5668\u548c\u5185\u5b58\u4e4b\u95f4\u4f20\u8f93\u6570\u636e\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec07/#3","title":"3. \u903b\u8f91\u6307\u4ee4","text":"<ul> <li>\u5305\u62ec\u903b\u8f91\u4e0e\uff08<code>and</code>\uff09\u3001\u6216\uff08<code>or</code>\uff09\u3001\u5f02\u6216\uff08<code>xor</code>\uff09\u3002</li> <li>\u4f4d\u79fb\u6307\u4ee4:<code>sll</code> (shift left logical), <code>slli</code> (shift left logical immediate), <code>sra</code> (shift right arithmetic), <code>srai</code> (shift right arithmetic immediate)\uff0c\u7528\u4e8e\u6267\u884c\u4f4d\u64cd\u4f5c\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec07/#4","title":"4. \u6761\u4ef6\u5206\u652f","text":"<ul> <li>\u7528\u4e8e\u5b9e\u73b0 <code>if</code>\u3001<code>loops</code> \u7b49\u63a7\u5236\u6d41\u7ed3\u6784\u3002</li> <li>\u683c\u5f0f:<code>{comparison} {reg1} {reg2} {label}</code>\uff0c\u4f8b\u5982 <code>beq</code> (branch if equal), <code>bne</code> (branch if not equal), <code>blt</code> (branch if less than), <code>bge</code> (branch if greater than or equal)\u3002</li> <li>\u6ca1\u6709\u76f4\u63a5\u7684 \u201cbranch-less-than-or-equals\u201d \u548c \u201cbranch-greater-than\u201d \u6307\u4ee4\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u4ea4\u6362\u53c2\u6570\u6765\u5b9e\u73b0\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec07/#5","title":"5. \u65e0\u6761\u4ef6\u5206\u652f","text":"<ul> <li><code>Jump</code> \u6307\u4ee4:<code>j label</code>\uff0c\u603b\u662f\u8df3\u8f6c\u5230\u6807\u7b7e\u6307\u5b9a\u7684\u4ee3\u7801\u4f4d\u7f6e\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec07/#6-if-else","title":"6. If-Else \u8bed\u53e5\u7684\u5b9e\u73b0","text":"<ul> <li>\u4f7f\u7528\u5206\u652f\u6307\u4ee4\u6765\u5b9e\u73b0\u6761\u4ef6\u6267\u884c\u3002</li> <li>\u793a\u4f8b:\u6839\u636e\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u662f\u5426\u76f8\u7b49\uff0c\u6267\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec07/#7","title":"7. \u5faa\u73af\u793a\u4f8b","text":"<ul> <li>\u4f7f\u7528\u5faa\u73af\u6765\u7d2f\u52a0\u6570\u7ec4\u5143\u7d20\u7684\u548c\u3002</li> <li>\u793a\u4f8b\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u521d\u59cb\u5316\u5faa\u73af\u53d8\u91cf\u3001\u5faa\u73af\u6761\u4ef6\u4ee5\u53ca\u5faa\u73af\u4f53\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec07/#8-pc","title":"8. \u7a0b\u5e8f\u8ba1\u6570\u5668\uff08PC\uff09","text":"<ul> <li>PC \u662f\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u5b58\u50a8\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u6307\u4ee4\u7684\u5185\u5b58\u5730\u5740\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec07/#9-pc","title":"9. \u589e\u52a0 PC \u7684\u503c","text":"<ul> <li>RV32 \u6307\u4ee4\u662f 32 \u4f4d\u5bbd\uff0c\u5373 4 \u5b57\u8282\u3002</li> <li>\u5f53\u79fb\u52a8\u5230\u4e0b\u4e00\u6761\u6307\u4ee4\u65f6\uff0c\u5904\u7406\u5668\u4f1a\u589e\u52a0 PC \u7684\u503c 4 \u5b57\u8282\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec07/#10","title":"10. \u51fd\u6570\u6267\u884c\u4f4d\u7f6e\u7684\u6539\u53d8","text":"<ul> <li>\u4f7f\u7528\u8df3\u8f6c\u6307\u4ee4\u6539\u53d8 PC \u7684\u503c\uff0c\u4ee5\u6267\u884c\u4e0d\u540c\u4f4d\u7f6e\u7684\u51fd\u6570\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec07/#11-jal","title":"11. JAL \u6307\u4ee4","text":"<ul> <li><code>jal</code> \u6307\u4ee4\u7528\u4e8e\u8df3\u8f6c\u5230\u6807\u7b7e\uff0c\u5e76\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u3002</li> <li>\u5c06\u6807\u7b7e\u901a\u8fc7\u6c47\u7f16\u5668\u8f6c\u6362\u4e3a 20 \u4f4d\u504f\u79fb\u91cf\u3002</li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec07/#12","title":"12. \u8fd4\u56de\u5730\u5740\u5bc4\u5b58\u5668","text":"<ul> <li>\u53ef\u4ee5\u9009\u62e9\u4efb\u610f\u5bc4\u5b58\u5668\u6765\u5b58\u50a8\u8fd4\u56de\u5730\u5740\uff0c\u4f46\u6309\u7167\u6807\u51c6\u7ea6\u5b9a\uff0c\u4f7f\u7528\u5bc4\u5b58\u5668 x1\uff0c\u4e5f\u79f0\u4e3a <code>ra</code>\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec07/#13","title":"13. \u8df3\u8f6c\u793a\u4f8b","text":"<ul> <li>\u5c55\u793a\u4e86\u5982\u4f55\u5728\u51fd\u6570\u8c03\u7528\u4e2d\u4f7f\u7528 <code>jal</code> \u548c <code>jr</code> \u6307\u4ee4\u8fdb\u884c\u8df3\u8f6c\u548c\u8fd4\u56de\u3002</li> <li>\u7528x0\u53ef\u4ee5\u4e0d\u7528\u5b58\u8fd4\u56de\u5730\u5740</li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec07/#14","title":"14. \u4f2a\u6307\u4ee4","text":"<ul> <li>\u4f2a\u6307\u4ee4\u5bf9\u7a0b\u5e8f\u5458\u53ef\u7528\uff0c\u4f46\u4e0d\u662f ISA \u7684\u4e00\u90e8\u5206\u3002</li> <li>\u7531\u6c47\u7f16\u5668\u8f6c\u6362\u4e3a\u5b9e\u9645\u7684 RISC-V \u6307\u4ee4\u3002</li> <li>[[cs61c_lec06]]\u91cc\u5c31\u8bb2\u8fc7\u4e86</li> </ul>"},{"location":"cs61c/cs61c_lec07/#15-jalr","title":"15. JALR \u6307\u4ee4","text":"<ul> <li><code>jalr</code> \u6307\u4ee4\u7ed3\u5408\u4e86\u5bc4\u5b58\u5668\u548c\u7acb\u5373\u6570\u6765\u8ba1\u7b97\u8df3\u8f6c\u5730\u5740\u3002</li> <li> </li> <li> <p>\u7528\u4e8e\u4ece\u51fd\u6570\u8fd4\u56de\uff0c\u4e0d\u9700\u8981\u989d\u5916\u4fdd\u5b58\u8fd4\u56de\u5730\u5740\u3002</p> </li> </ul>"},{"location":"cs61c/cs61c_lec07/#16","title":"16. \u8df3\u8f6c\u603b\u7ed3","text":"<ul> <li>\u603b\u7ed3\u4e86\u4e0d\u540c\u7c7b\u578b\u7684\u8df3\u8f6c\u6307\u4ee4\uff0c\u5305\u62ec <code>jal</code>, <code>jalr</code>, <code>jr</code>, \u548c <code>ret</code>\u3002</li> <li></li> <li></li> <li>[[\u8df3\u8f6c\u548c\u8fd4\u56de\u7684\u51fd\u6570]]</li> </ul>"},{"location":"cs61c/cs61c_lec07/#17","title":"17. \u4fdd\u5b58\u5bc4\u5b58\u5668","text":"<ul> <li>\u5f53\u8c03\u7528\u53e6\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u9700\u8981\u4fdd\u5b58\u5f53\u524d\u51fd\u6570\u4f7f\u7528\u7684\u5bc4\u5b58\u5668\u503c\uff0c\u4ee5\u9632\u6b62\u88ab\u8986\u76d6\u3002</li> <li>save in the stack</li> </ul>"},{"location":"cs61c/cs61c_lec07/#18","title":"18. \u4e3a\u6808\u5206\u914d\u7a7a\u95f4","text":"<ul> <li>\u6808\u7528\u4e8e\u5b58\u50a8\u81ea\u52a8\uff08\u5c40\u90e8\uff09\u53d8\u91cf\uff0c\u8fd9\u4e9b\u53d8\u91cf\u5728\u51fd\u6570\u9000\u51fa\u65f6\u88ab\u4e22\u5f03\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec07/#19-sp","title":"19. \u6808\u6307\u9488\uff08SP\uff09","text":"<ul> <li>SP \u662f\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u5b58\u50a8\u6808\u4e0a\u6700\u540e\u4e00\u9879\u7684\u5185\u5b58\u5730\u5740\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec07/#20","title":"20. \u6808\u5e27","text":"<ul> <li>\u6808\u5e27\u662f\u6808\u4e0a\u7684\u4e00\u5757\u533a\u57df\uff0c\u7528\u4e8e\u5b58\u50a8\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u548c\u5bc4\u5b58\u5668\u72b6\u6001\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec07/#21","title":"21. \u79fb\u52a8\u6808\u6307\u9488","text":"<ul> <li>\u901a\u8fc7\u589e\u52a0\u6216\u51cf\u5c11 SP \u7684\u503c\u6765\u5728\u6808\u4e0a\u5206\u914d\u6216\u91ca\u653e\u7a7a\u95f4\u3002</li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec07/#22","title":"22. \u8c03\u7528\u7ea6\u5b9a","text":"<ul> <li>\u8c03\u7528\u7ea6\u5b9a\u5b9a\u4e49\u4e86\u54ea\u4e9b\u5bc4\u5b58\u5668\u7531\u8c03\u7528\u8005\u4fdd\u5b58\uff0c\u54ea\u4e9b\u7531\u88ab\u8c03\u7528\u8005\u4fdd\u5b58\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec07/#23","title":"23. \u5bc4\u5b58\u5668\u4f7f\u7528\u8bf4\u660e","text":"<ul> <li>\u8868\u683c\u5217\u51fa\u4e86\u6bcf\u4e2a\u5bc4\u5b58\u5668\u7684\u7528\u9014\u548c\u8c01\u8d1f\u8d23\u4fdd\u5b58\u5b83\u4eec\u3002</li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec07/#24","title":"24. \u53c2\u6570\u5bc4\u5b58\u5668","text":"<ul> <li>\u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u901a\u8fc7\u7279\u5b9a\u7684\u5bc4\u5b58\u5668\u4f20\u9012\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec07/#25","title":"25. \u8c03\u7528\u7ea6\u5b9a\u793a\u4f8b","text":"<ul> <li>\u5c55\u793a\u4e86\u5982\u4f55\u5728\u51fd\u6570\u8c03\u7528\u4e2d\u4f7f\u7528\u53c2\u6570\u5bc4\u5b58\u5668\u548c\u8fd4\u56de\u5bc4\u5b58\u5668\u3002</li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec07/#26","title":"26. \u51fd\u6570\u8c03\u7528\u7684\u516d\u4e2a\u57fa\u672c\u6b65\u9aa4","text":"<ul> <li>\u4ece\u53c2\u6570\u8bbe\u7f6e\u5230\u63a7\u5236\u6743\u8fd4\u56de\u7684\u8be6\u7ec6\u8fc7\u7a0b\u3002</li> <li></li> </ul> <p>\u8fd9\u4efd\u8bb2\u4e49\u6db5\u76d6\u4e86 RISC-V \u6c47\u7f16\u8bed\u8a00\u4e2d\u63a7\u5236\u6d41\u3001\u51fd\u6570\u8c03\u7528\u3001\u5bc4\u5b58\u5668\u4f7f\u7528\u548c\u5185\u5b58\u7ba1\u7406\u7684\u5173\u952e\u6982\u5ff5\u548c\u6280\u672f\u3002\u901a\u8fc7\u8fd9\u4e9b\u5185\u5bb9\uff0c\u5b66\u751f\u53ef\u4ee5\u5b66\u4e60\u5982\u4f55\u5728 RISC-V \u67b6\u6784\u4e0a\u5b9e\u73b0\u590d\u6742\u7684\u7a0b\u5e8f\u903b\u8f91\u548c\u51fd\u6570\u4ea4\u4e92\u3002</p>"},{"location":"cs61c/cs61c_lec08/","title":"Cs61c lec08","text":"<p><code>lec08.pdf</code> \u6587\u4ef6\u8be6\u7ec6\u4ecb\u7ecd\u4e86 RISC-V \u6307\u4ee4\u96c6\u67b6\u6784\u4e2d\u7684\u6307\u4ee4\u683c\u5f0f\u548c\u5176\u4ed6\u76f8\u5173\u6982\u5ff5\u3002\u4ee5\u4e0b\u662f\u8be5\u8bfe\u7a0b\u5185\u5bb9\u7684\u8be6\u7ec6\u8bb2\u89e3:</p>"},{"location":"cs61c/cs61c_lec08/#1","title":"1. \u62bd\u8c61\u7684\u6982\u5ff5","text":"<ul> <li>\u4ecb\u7ecd\u4e86\u4e0d\u540c\u7ea7\u522b\u7684\u62bd\u8c61\uff0c\u5305\u62ec\u9ad8\u7ea7\u8bed\u8a00\u3001\u6c47\u7f16\u8bed\u8a00\u3001\u673a\u5668\u8bed\u8a00\u548c\u786c\u4ef6\u67b6\u6784\u63cf\u8ff0\u3002</li> <li>\u89e3\u91ca\u4e86\u7f16\u8bd1\u5668\u3001\u6c47\u7f16\u5668\u548c\u673a\u5668\u89e3\u91ca\u7684\u4f5c\u7528\u3002</li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec08/#2","title":"2. \u6307\u4ee4\u683c\u5f0f","text":"<ul> <li>\u6307\u51fa\u6bcf\u6761\u6307\u4ee4\u90fd\u662f 32 \u4f4d\u5bbd\uff0c\u5e76\u5206\u4e3a\u4e0d\u540c\u7684\u5b57\u6bb5\u3002</li> <li>\u4ecb\u7ecd\u4e86 RISC-V \u6307\u4ee4\u96c6\u7684\u51e0\u79cd\u683c\u5f0f:R \u683c\u5f0f\u3001I \u683c\u5f0f\u3001S \u683c\u5f0f\u548c U \u683c\u5f0f\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec08/#3-r","title":"3. R \u683c\u5f0f","text":"<ul> <li>R \u683c\u5f0f\u662f\u4e00\u79cd\u5bc4\u5b58\u5668-\u5bc4\u5b58\u5668\u7c7b\u578b\u7684\u6307\u4ee4\uff0c\u6d89\u53ca\u4e09\u4e2a\u5bc4\u5b58\u5668:\u4e24\u4e2a\u6e90\u5bc4\u5b58\u5668\u548c\u4e00\u4e2a\u76ee\u6807\u5bc4\u5b58\u5668\u3002</li> <li>\u4ecb\u7ecd\u4e86 R \u683c\u5f0f\u7684\u5b57\u6bb5\u5e03\u5c40\uff0c\u5305\u62ec <code>funct7</code>\u3001<code>rs2</code>\u3001<code>rs1</code>\u3001<code>funct3</code>\u3001<code>rd</code> \u548c <code>opcode</code>\u3002</li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec08/#4-r","title":"4. R \u683c\u5f0f\u6307\u4ee4\u7684\u64cd\u4f5c","text":"<ul> <li>\u901a\u8fc7 <code>funct7</code> \u548c <code>funct3</code> \u5b57\u6bb5\u4e0e <code>opcode</code> \u7ed3\u5408\u6765\u786e\u5b9a\u8981\u6267\u884c\u7684\u64cd\u4f5c\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec08/#5-r","title":"5. R \u683c\u5f0f\u6307\u4ee4\u7684\u5bc4\u5b58\u5668","text":"<ul> <li>\u89e3\u91ca\u4e86\u5bc4\u5b58\u5668\u5b57\u6bb5 <code>rs1</code>\u3001<code>rs2</code> \u548c <code>rd</code> \u7684\u4f5c\u7528\uff0c\u4ee5\u53ca\u5b83\u4eec\u5982\u4f55\u5b58\u50a8 5 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u6765\u8868\u793a\u5bc4\u5b58\u5668\u53f7\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec08/#6-r","title":"6. R \u683c\u5f0f\u793a\u4f8b","text":"<ul> <li>\u901a\u8fc7\u793a\u4f8b <code>add x18, x19, x10</code> \u5c55\u793a\u4e86 R \u683c\u5f0f\u6307\u4ee4\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u3002</li> <li></li> </ul> <p>\u5728RISC-V\u6307\u4ee4\u96c6\u4e2d\uff0c<code>opcode</code>\u3001<code>funct3</code>\u548c<code>funct7</code>\u5b57\u6bb5\u662f\u6784\u6210\u4e00\u6761\u6307\u4ee4\u7684\u57fa\u672c\u7ec4\u6210\u90e8\u5206\uff0c\u5b83\u4eec\u5171\u540c\u5b9a\u4e49\u4e86\u6307\u4ee4\u7684\u7c7b\u578b\u548c\u884c\u4e3a\u3002\u4e0b\u9762\u662f\u5bf9\u8fd9\u4e9b\u5b57\u6bb5\u7684\u7406\u89e3:</p> <ol> <li> <p>Opcode:\u64cd\u4f5c\u7801\u662f\u4e00\u4e2a\u56fa\u5b9a\u7684\u4f4d\u6a21\u5f0f\uff0c\u7528\u4e8e\u6807\u8bc6\u6307\u4ee4\u7684\u7c7b\u522b\u3002\u4f8b\u5982\uff0c\u6240\u6709R\u578b\uff08\u5bc4\u5b58\u5668-\u5bc4\u5b58\u5668\uff09\u7c7b\u578b\u7684\u6307\u4ee4\u90fd\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u64cd\u4f5c\u7801\u6765\u533a\u5206\u5b83\u4eec\u4e0eI\u578b\uff08\u5bc4\u5b58\u5668-\u7acb\u5373\u6570\uff09\u6216S\u578b\uff08\u5b58\u50a8\uff09\u6307\u4ee4\u7b49\u3002</p> </li> <li> <p>Funct3:\u529f\u80fd\u7801\u7684\u4f4e\u4e09\u4f4d\uff08funct3\uff09\u63d0\u4f9b\u4e86\u989d\u5916\u7684\u4fe1\u606f\uff0c\u7528\u4e8e\u5728\u5177\u6709\u591a\u79cd\u53d8\u4f53\u7684\u6307\u4ee4\u4e2d\u9009\u62e9\u7279\u5b9a\u7684\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u5728RISC-V\u4e2d\uff0c<code>add</code>\u548c<code>sub</code>\u64cd\u4f5c\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u64cd\u4f5c\u7801\uff0c\u4f46\u662f\u901a\u8fc7<code>funct3</code>\u5b57\u6bb5\u6765\u533a\u5206\u662f\u6267\u884c\u52a0\u6cd5\u8fd8\u662f\u51cf\u6cd5\u3002</p> </li> <li> <p>Funct7:\u529f\u80fd\u7801\u7684\u9ad8\u4e03\u4f4d\uff08funct7\uff09\u4e3a\u67d0\u4e9b\u6307\u4ee4\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u7f16\u7801\u7a7a\u95f4\uff0c\u5141\u8bb8\u540c\u4e00\u64cd\u4f5c\u7801\u4e0b\u6709\u66f4\u591a\u7684\u64cd\u4f5c\u53d8\u4f53\u3002\u4f8b\u5982\uff0c\u5728\u6d6e\u70b9\u6307\u4ee4\u4e2d\uff0c<code>funct7</code>\u5b57\u6bb5\u53ef\u4ee5\u7528\u4e8e\u9009\u62e9\u4e0d\u540c\u7684\u6d6e\u70b9\u8fd0\u7b97\u3002</p> </li> </ol> <p>\u5728RISC-V\u768432\u4f4d\u6307\u4ee4\u7f16\u7801\u4e2d\uff0c\u8fd9\u4e9b\u5b57\u6bb5\u901a\u5e38\u6309\u5982\u4e0b\u65b9\u5f0f\u7ec4\u7ec7:</p> <ul> <li>\u524d7\u4f4d\u662f<code>opcode</code>\u3002</li> <li>\u63a5\u4e0b\u6765\u76843\u4f4d\u662f<code>funct3</code>\u3002</li> <li>\u7136\u540e\u662f5\u4f4d\u64cd\u4f5c\u6570\u7f16\u7801\uff0c\u5bf9\u4e8eR\u578b\u6307\u4ee4\u662f<code>rs1</code>\u548c<code>rs2</code>\uff0c\u5bf9\u4e8eI\u578b\u6307\u4ee4\u662f<code>rs1</code>\u548c<code>\u7acb\u5373\u6570</code>\u3002</li> <li>\u5bf9\u4e8eR\u578b\u6307\u4ee4\uff0c\u540e\u9762\u662f3\u4f4d<code>rd</code>\u7f16\u7801\u3002</li> <li>\u5bf9\u4e8eI\u578b\u548cS\u578b\u6307\u4ee4\uff0c\u63a5\u4e0b\u6765\u768412\u4f4d\u662f\u7acb\u5373\u6570\u7f16\u7801\u3002</li> </ul> <p>\u4f8b\u5982\uff0c\u5728R\u578b\u6307\u4ee4\u4e2d\uff0c\u683c\u5f0f\u5982\u4e0b:</p> <pre><code>|---7---|---3---|---5---|---3---|---5---|\n| opcode| 000  |  rs2  | funct3|  rd   |\n</code></pre> <p>\u5728I\u578b\u6307\u4ee4\u4e2d\uff0c\u683c\u5f0f\u5982\u4e0b:</p> <pre><code>|---7---|---3---|---5---|---13--|\n| opcode| 000  |  rs1  |  immed |\n</code></pre> <p>\u5728\u7406\u89e3RISC-V\u6307\u4ee4\u65f6\uff0c\u91cd\u8981\u7684\u662f\u8981\u53c2\u8003\u5b98\u65b9\u7684\u6307\u4ee4\u96c6\u6587\u6863\uff0c\u56e0\u4e3a\u4e0d\u540c\u7684\u6307\u4ee4\u548c\u6307\u4ee4\u7c7b\u522b\u53ef\u80fd\u6709\u4e0d\u540c\u7684<code>funct3</code>\u548c<code>funct7</code>\u7f16\u7801\u3002\u8fd9\u4e9b\u7f16\u7801\u5b9a\u4e49\u4e86\u6307\u4ee4\u7684\u5177\u4f53\u884c\u4e3a\uff0c\u4f8b\u5982\u7b97\u672f\u8fd0\u7b97\u3001\u903b\u8f91\u8fd0\u7b97\u3001\u4f4d\u79fb\u8fd0\u7b97\u7b49\u3002</p>"},{"location":"cs61c/cs61c_lec08/#7-i","title":"7. I \u683c\u5f0f","text":"<ul> <li>I \u683c\u5f0f\u662f\u5bc4\u5b58\u5668-\u7acb\u5373\u6570\u7c7b\u578b\u7684\u6307\u4ee4\uff0c\u6d89\u53ca\u4e00\u4e2a\u5bc4\u5b58\u5668\u548c\u4e00\u4e2a\u7acb\u5373\u6570\u3002</li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec08/#8-i","title":"8. I \u683c\u5f0f\u5e03\u5c40","text":"<ul> <li>\u4ecb\u7ecd\u4e86 I \u683c\u5f0f\u7684\u5b57\u6bb5\u5e03\u5c40\uff0c\u5305\u62ec <code>imm[11:0]</code>\u3001<code>rs1</code>\u3001<code>funct3</code>\u3001<code>rd</code> \u548c <code>opcode</code>\u3002</li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec08/#9-i","title":"9. I \u683c\u5f0f\u6307\u4ee4","text":"<ul> <li>\u8ba8\u8bba\u4e86\u7acb\u5373\u6570\u7684\u8868\u793a\u8303\u56f4\u548c\u5982\u4f55\u8fdb\u884c\u7b26\u53f7\u6269\u5c55\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec08/#10-i","title":"10. I \u683c\u5f0f\u793a\u4f8b","text":"<ul> <li>\u901a\u8fc7\u793a\u4f8b <code>addi x15, x18, -50</code> \u5c55\u793a\u4e86 I \u683c\u5f0f\u6307\u4ee4\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u3002</li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec08/#11","title":"11. \u52a0\u8f7d\u6307\u4ee4","text":"<ul> <li>\u4ecb\u7ecd\u4e86\u52a0\u8f7d\u6307\u4ee4\u7684\u4e0d\u540c\u7c7b\u578b\uff0c\u5305\u62ec\u52a0\u8f7d\u5b57\uff08<code>lw</code>\uff09\u3001\u52a0\u8f7d\u5b57\u8282\uff08<code>lb</code>\uff09\u3001\u52a0\u8f7d\u65e0\u7b26\u53f7\u5b57\u8282\uff08<code>lbu</code>\uff09\u548c\u52a0\u8f7d\u534a\u5b57\uff08<code>lh</code>\u3001<code>lhu</code>\uff09\u3002</li> <li></li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec08/#12","title":"12. \u52a0\u8f7d\u6307\u4ee4\u7684\u5185\u5b58\u8868\u793a","text":"<ul> <li>\u89e3\u91ca\u4e86\u52a0\u8f7d\u6307\u4ee4\u5982\u4f55\u4ece\u5185\u5b58\u4e2d\u52a0\u8f7d\u4e0d\u540c\u5927\u5c0f\u7684\u6570\u636e\u5230\u5bc4\u5b58\u5668\u3002</li> <li></li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec08/#13-s","title":"13. S \u683c\u5f0f","text":"<ul> <li>S \u683c\u5f0f\u662f\u5b58\u50a8\u6307\u4ee4\u7684\u683c\u5f0f\uff0c\u6d89\u53ca\u4e24\u4e2a\u6e90\u5bc4\u5b58\u5668\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec08/#14","title":"14. \u5b58\u50a8\u6307\u4ee4","text":"<ul> <li>\u4ecb\u7ecd\u4e86\u5b58\u50a8\u6307\u4ee4\u7684\u4e0d\u540c\u7c7b\u578b\uff0c\u5305\u62ec\u5b58\u50a8\u5b57\uff08<code>sw</code>\uff09\u3001\u5b58\u50a8\u5b57\u8282\uff08<code>sb</code>\uff09\u548c\u5b58\u50a8\u534a\u5b57\uff08<code>sh</code>\uff09\u3002</li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec08/#15","title":"15. \u5b58\u50a8\u6307\u4ee4\u7684\u5185\u5b58\u8868\u793a","text":"<ul> <li>\u89e3\u91ca\u4e86\u5b58\u50a8\u6307\u4ee4\u5982\u4f55\u5c06\u6570\u636e\u4ece\u5bc4\u5b58\u5668\u5b58\u50a8\u5230\u5185\u5b58\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec08/#16","title":"16. \u5206\u652f\u6307\u4ee4","text":"<ul> <li>\u8ba8\u8bba\u4e86\u6761\u4ef6\u5206\u652f\u6307\u4ee4\u7684\u7528\u6cd5\uff0c\u5305\u62ec <code>beq</code>\uff08\u5982\u679c\u76f8\u7b49\u5219\u5206\u652f\uff09\u3001<code>bne</code>\uff08\u5982\u679c\u4e0d\u76f8\u7b49\u5219\u5206\u652f\uff09\u7b49\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec08/#17","title":"17. \u5206\u652f\u6307\u4ee4\u7684\u5730\u5740\u8303\u56f4","text":"<ul> <li>\u4ecb\u7ecd\u4e86\u5206\u652f\u6307\u4ee4\u53ef\u4ee5\u8df3\u8f6c\u7684\u8303\u56f4\uff0c\u57fa\u4e8e PC \u76f8\u5bf9\u5730\u5740\u3002</li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec08/#18","title":"18. \u5206\u652f\u6307\u4ee4\u7684\u7f16\u7801","text":"<ul> <li>\u8be6\u7ec6\u89e3\u91ca\u4e86\u5206\u652f\u6307\u4ee4\u7684\u7acb\u5373\u6570\u5b57\u6bb5\u5982\u4f55\u7f16\u7801\uff0c\u4ee5\u53ca\u5982\u4f55\u8ba1\u7b97\u8df3\u8f6c\u504f\u79fb\u3002</li> <li></li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec08/#19-risc-v-16","title":"19. RISC-V \u7684 16 \u4f4d\u6307\u4ee4\u6269\u5c55","text":"<ul> <li>\u4ecb\u7ecd\u4e86 RISC-V \u652f\u6301\u7684 16 \u4f4d\u538b\u7f29\u6307\u4ee4\uff0c\u4ee5\u53ca\u5b83\u4eec\u5982\u4f55\u589e\u52a0\u6307\u4ee4\u7684\u5bc6\u5ea6\u3002</li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec08/#20-j","title":"20. J \u683c\u5f0f","text":"<ul> <li>J \u683c\u5f0f\u662f\u8df3\u8f6c\u6307\u4ee4\u7684\u683c\u5f0f\uff0c\u5141\u8bb8\u8df3\u8f6c\u5230\u66f4\u8fdc\u7684\u5730\u5740\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec08/#21-jalr","title":"21. JALR \u6307\u4ee4","text":"<ul> <li>\u4ecb\u7ecd\u4e86 <code>jalr</code> \u6307\u4ee4\uff0c\u5b83\u7528\u4e8e\u76f8\u5bf9\u5730\u5740\u7684\u8df3\u8f6c\uff0c\u5e76\u53ef\u4ee5\u4f5c\u4e3a\u8fd4\u56de\u6307\u4ee4\u4f7f\u7528\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec08/#22-pc","title":"22. PC \u76f8\u5bf9\u5730\u5740\u4e0e\u7edd\u5bf9\u5730\u5740","text":"<ul> <li>\u5bf9\u6bd4\u4e86 PC \u76f8\u5bf9\u5730\u5740\u8df3\u8f6c\u548c\u7edd\u5bf9\u5730\u5740\u8df3\u8f6c\u7684\u6982\u5ff5\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec08/#23-u","title":"23. U \u683c\u5f0f","text":"<ul> <li>U \u683c\u5f0f\u662f\u7528\u4e8e\u52a0\u8f7d\u7acb\u5373\u6570\u5230\u5bc4\u5b58\u5668\u7684\u6307\u4ee4\u683c\u5f0f\uff0c\u5982 <code>lui</code>\uff08\u52a0\u8f7d\u4e0a\u7acb\u5373\u6570\uff09\u3002</li> <li></li> </ul>"},{"location":"cs61c/cs61c_lec08/#24-lui-auipc","title":"24. LUI \u548c AUIPC \u6307\u4ee4","text":"<ul> <li>\u4ecb\u7ecd\u4e86 <code>lui</code> \u6307\u4ee4\u5982\u4f55\u52a0\u8f7d\u7acb\u5373\u6570\u7684\u4e0a 20 \u4f4d\u5230\u5bc4\u5b58\u5668\uff0c\u4ee5\u53ca <code>auipc</code>\uff08\u52a0\u7acb\u5373\u6570\u5230 PC\uff09\u5982\u4f55\u7528\u4e8e\u8ba1\u7b97 PC \u76f8\u5bf9\u7684\u5730\u5740\u3002</li> </ul>"},{"location":"cs61c/cs61c_lec08/#25","title":"25. \u603b\u7ed3","text":"<ul> <li>\u5bf9 RISC-V \u6307\u4ee4\u683c\u5f0f\u8fdb\u884c\u4e86\u603b\u7ed3\uff0c\u5f3a\u8c03\u4e86\u5b83\u4eec\u5728\u4e0d\u540c\u573a\u666f\u4e0b\u7684\u5e94\u7528\u3002</li> <li></li> </ul> <p>\u8fd9\u4efd\u8bb2\u4e49\u6df1\u5165\u63a2\u8ba8\u4e86 RISC-V \u6307\u4ee4\u96c6\u7684\u4e0d\u540c\u683c\u5f0f\uff0c\u5305\u62ec\u5b83\u4eec\u7684\u5b57\u6bb5\u5e03\u5c40\u3001\u64cd\u4f5c\u548c\u5e94\u7528\u573a\u666f\u3002\u901a\u8fc7\u8fd9\u4e9b\u5185\u5bb9\uff0c\u5b66\u751f\u53ef\u4ee5\u66f4\u6df1\u5165\u5730\u7406\u89e3 RISC-V \u6307\u4ee4\u96c6\u7684\u5de5\u4f5c\u539f\u7406\u548c\u5982\u4f55\u6709\u6548\u5730\u4f7f\u7528\u5404\u79cd\u6307\u4ee4\u3002</p>"},{"location":"cs61c/cs61c_lec09/","title":"Cs61c lec09","text":"<p><code>lec09.pdf</code>\u6587\u4ef6\u662f\u5173\u4e8e\u8ba1\u7b97\u673a\u79d1\u5b6661C\u6625\u5b632022\u8bfe\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u7531McMahon\u548cWeaver\u6559\u6388\uff0c\u4e3b\u8981\u8ba8\u8bba\u4e86\u7f16\u8bd1\u3001\u6c47\u7f16\u3001\u94fe\u63a5\u548c\u52a0\u8f7d\uff08CALL\uff09\u7684\u8fc7\u7a0b\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u9ad8\u7ea7\u8bed\u8a00\u7ffb\u8bd1\u6210RISC-V\u6c47\u7f16\u8bed\u8a00\u3002\u4ee5\u4e0b\u662f\u8be5\u8bb2\u5ea7\u7684\u8be6\u7ec6\u5185\u5bb9:</p> <ol> <li> <p>CALL\u94fe\u4ecb\u7ecd:    - CALL\u94fe\u662f\u6307\u5c06\u9ad8\u7ea7\u8bed\u8a00\u4ee3\u7801\u8f6c\u6362\u6210\u673a\u5668\u8bed\u8a00\u6240\u7ecf\u5386\u7684\u4e00\u7cfb\u5217\u6b65\u9aa4\uff0c\u5305\u62ec\u7f16\u8bd1\uff08Compiler\uff09\u3001\u6c47\u7f16\uff08Assembler\uff09\u3001\u94fe\u63a5\uff08Linker\uff09\u548c\u52a0\u8f7d\uff08Loader\uff09\u3002</p> </li> <li> <p>\u7ffb\u8bd1\u590d\u6742\u793a\u4f8b:    - \u901a\u8fc7\u4e00\u4e2aC\u8bed\u8a00\u7684<code>map</code>\u51fd\u6570\u793a\u4f8b\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u5c06\u5176\u7ffb\u8bd1\u6210RISC-V\u6c47\u7f16\u8bed\u8a00\u3002\u8fd9\u4e2a\u51fd\u6570\u901a\u8fc7\u9012\u5f52\u65b9\u5f0f\uff0c\u5bf9\u94fe\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5e94\u7528\u4e00\u4e2a\u51fd\u6570\u3002</p> </li> <li> <p>\u89e3\u91ca\u4e0e\u7f16\u8bd1:    - \u89e3\u91ca\u4e86\u89e3\u91ca\u578b\u8bed\u8a00\u548c\u7f16\u8bd1\u578b\u8bed\u8a00\u7684\u533a\u522b\u3002\u89e3\u91ca\u578b\u8bed\u8a00\u76f4\u63a5\u6267\u884c\u6e90\u4ee3\u7801\uff0c\u800c\u7f16\u8bd1\u578b\u8bed\u8a00\u5148\u5c06\u6e90\u4ee3\u7801\u8f6c\u6362\u6210\u53e6\u4e00\u79cd\u8bed\u8a00\u7684\u7b49\u4ef7\u7a0b\u5e8f\u3002</p> </li> <li> <p>\u5b58\u50a8\u65b9\u6848\u51b3\u7b56:    - \u786e\u5b9a\u4e86\u54ea\u4e9b\u53d8\u91cf\u5e94\u8be5\u653e\u5728\u5bc4\u5b58\u5668\u4e2d\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c<code>lst</code>\u3001<code>f</code>\u548c<code>newcell</code>\u662f\u5c40\u90e8\u53d8\u91cf\uff0c\u9700\u8981\u5728\u51fd\u6570\u8c03\u7528\u4e4b\u95f4\u4fdd\u6301\u5b58\u6d3b\uff0c\u56e0\u6b64\u5b83\u4eec\u88ab\u653e\u5728\u4e86callee-saved\u5bc4\u5b58\u5668\u4e2d\u3002</p> </li> <li> <p>\u51fd\u6570\u5e8f\u8a00\uff08Preamble\uff09:    - \u5c55\u793a\u4e86\u5982\u4f55\u5728\u51fd\u6570\u5f00\u59cb\u65f6\u8c03\u6574\u6808\u6307\u9488\u3001\u4fdd\u5b58<code>ra</code>\u548c\u5176\u5b83\u9700\u8981\u7684\u5bc4\u5b58\u5668\u3002</p> </li> <li> <p>\u9012\u5f52\u8c03\u7528map:    - \u8be6\u7ec6\u89e3\u91ca\u4e86\u5982\u4f55\u8fdb\u884c\u65e9\u671f\u9000\u51fa\uff08\u5982\u679c<code>lst</code>\u4e3aNULL\uff09\u3001\u5982\u4f55\u8c03\u7528<code>malloc</code>\u5206\u914d\u5185\u5b58\u3001\u5982\u4f55\u8c03\u7528\u51fd\u6570<code>f</code>\u4ee5\u53ca\u5982\u4f55\u9012\u5f52\u8c03\u7528<code>map</code>\u51fd\u6570\u3002</p> </li> <li> <p>\u6e05\u7406\u4e0e\u8fd4\u56de:    - \u5c55\u793a\u4e86\u5982\u4f55\u5728\u51fd\u6570\u7ed3\u675f\u524d\u6062\u590d\u5bc4\u5b58\u5668\u72b6\u6001\u3001\u8c03\u6574\u6808\u6307\u9488\uff0c\u5e76\u4f7f\u7528<code>jr</code>\u6307\u4ee4\u8fd4\u56de\u3002</p> </li> <li> <p>\u5b8c\u6574\u4ee3\u7801\u793a\u4f8b:    - \u63d0\u4f9b\u4e86\u4e0a\u8ff0<code>map</code>\u51fd\u6570\u7684\u5b8c\u6574RISC-V\u6c47\u7f16\u8bed\u8a00\u5b9e\u73b0\u3002</p> </li> <li> <p>\u4e0d\u540c\u7ea7\u522b\u7684\u8868\u793a/\u89e3\u91ca:    - \u8ba8\u8bba\u4e86\u4ece\u9ad8\u7ea7\u8bed\u8a00\u5230\u6c47\u7f16\u8bed\u8a00\uff0c\u518d\u5230\u673a\u5668\u8bed\u8a00\u7684\u4e0d\u540c\u8868\u793a\u7ea7\u522b\uff0c\u4ee5\u53ca\u7f16\u8bd1\u5668\u3001\u6c47\u7f16\u5668\u548c\u673a\u5668\u89e3\u91ca\u5668\u7684\u89d2\u8272\u3002</p> </li> <li> <p>\u8bed\u8a00\u6267\u884c\u8fde\u7eed\u4f53:</p> <ul> <li>\u63cf\u8ff0\u4e86\u4ece\u6613\u7f16\u7a0b\u4f46\u6548\u7387\u8f83\u4f4e\u7684\u89e3\u91ca\u578b\u8bed\u8a00\u5230\u96be\u7f16\u7a0b\u4f46\u6548\u7387\u8f83\u9ad8\u7684\u7f16\u8bd1\u578b\u8bed\u8a00\u7684\u8fde\u7eed\u4f53\u3002</li> </ul> </li> <li> <p>\u89e3\u91ca\u4e0e\u7ffb\u8bd1:</p> <ul> <li>\u5bf9\u6bd4\u4e86\u89e3\u91ca\u5668\u548c\u7ffb\u8bd1\u5668\u7684\u4f18\u7f3a\u70b9\uff0c\u89e3\u91ca\u5668\u63d0\u4f9b\u66f4\u597d\u7684\u9519\u8bef\u6d88\u606f\u548c\u8de8\u5e73\u53f0\u517c\u5bb9\u6027\uff0c\u800c\u7ffb\u8bd1\u5668\u901a\u5e38\u63d0\u4f9b\u66f4\u9ad8\u7684\u6027\u80fd\u3002</li> </ul> </li> <li> <p>\u7f16\u8bd1C\u7a0b\u5e8f\u7684\u6b65\u9aa4:</p> <ul> <li>\u63cf\u8ff0\u4e86\u4eceC\u8bed\u8a00\u4ee3\u7801\u5230\u6c47\u7f16\u8bed\u8a00\u4ee3\u7801\u7684\u7f16\u8bd1\u8fc7\u7a0b\uff0c\u5305\u62ec\u8bcd\u6cd5\u5206\u6790\u3001\u8bed\u6cd5\u5206\u6790\u3001\u8bed\u4e49\u5206\u6790\u548c\u4f18\u5316\u3001\u4ee3\u7801\u751f\u6210\u7b49\u6b65\u9aa4\u3002</li> </ul> </li> <li> <p>\u6c47\u7f16\u5668:</p> <ul> <li>\u6c47\u7f16\u5668\u5c06\u6c47\u7f16\u8bed\u8a00\u4ee3\u7801\u8f6c\u6362\u6210\u673a\u5668\u8bed\u8a00\u4ee3\u7801\uff0c\u5e76\u521b\u5efa\u5bf9\u8c61\u6587\u4ef6\u3002</li> </ul> </li> <li> <p>\u4f2a\u6307\u4ee4\u66ff\u6362:</p> <ul> <li>\u6c47\u7f16\u5668\u5982\u4f55\u5904\u7406\u4f2a\u6307\u4ee4\uff0c\u4f8b\u5982<code>j</code>\u6807\u7b7e\u8f6c\u6362\u4e3a<code>jal x0 \u6807\u7b7e</code>\u3002</li> </ul> </li> <li> <p>\u4ea7\u751f\u673a\u5668\u8bed\u8a00:</p> <ul> <li>\u8ba8\u8bba\u4e86\u5982\u4f55\u5c06\u6c47\u7f16\u6307\u4ee4\u8f6c\u6362\u4e3a\u673a\u5668\u8bed\u8a00\uff0c\u5305\u62ec\u5904\u7406\u5206\u652f\u3001\u8df3\u8f6c\u548c\u7edd\u5bf9\u5730\u5740\u5f15\u7528\u3002</li> </ul> </li> <li> <p>\u7b26\u53f7\u8868\u548c\u91cd\u5b9a\u4f4d\u8868:</p> <ul> <li>\u7b26\u53f7\u8868\u5217\u51fa\u4e86\u5f53\u524d\u6587\u4ef6\u4e2d\u53ef\u80fd\u88ab\u5176\u4ed6\u6587\u4ef6\u4f7f\u7528\u7684\u9879\uff0c\u800c\u91cd\u5b9a\u4f4d\u8868\u5217\u51fa\u4e86\u5f53\u524d\u6587\u4ef6\u7a0d\u540e\u9700\u8981\u5730\u5740\u7684\u9879\u3002</li> </ul> </li> <li> <p>\u5bf9\u8c61\u6587\u4ef6\u683c\u5f0f:</p> <ul> <li>\u63cf\u8ff0\u4e86\u5bf9\u8c61\u6587\u4ef6\u7684\u683c\u5f0f\uff0c\u5305\u62ec\u5bf9\u8c61\u6587\u4ef6\u5934\u3001\u6587\u672c\u6bb5\u3001\u6570\u636e\u6bb5\u3001\u91cd\u5b9a\u4f4d\u4fe1\u606f\u3001\u7b26\u53f7\u8868\u548c\u8c03\u8bd5\u4fe1\u606f\u3002</li> </ul> </li> <li> <p>\u94fe\u63a5\u5668:</p> <ul> <li>\u94fe\u63a5\u5668\u5982\u4f55\u5c06\u591a\u4e2a\u5bf9\u8c61\u6587\u4ef6\u7ec4\u5408\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5e76\u89e3\u51b3\u7edd\u5bf9\u5730\u5740\u3002</li> </ul> </li> <li> <p>\u52a0\u8f7d\u5668:</p> <ul> <li>\u52a0\u8f7d\u5668\u8d1f\u8d23\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u5e76\u5f00\u59cb\u6267\u884c\u3002</li> </ul> </li> <li> <p>\u6574\u6570\u4e58\u6cd5\u548c\u9664\u6cd5:</p> <ul> <li>\u8ba8\u8bba\u4e86RISC-V\u4e2d\u6574\u6570\u4e58\u6cd5\u548c\u9664\u6cd5\u7684\u5b9e\u73b0\uff0c\u5305\u62ec\u4f7f\u7528<code>mul</code>\u3001<code>mulh</code>\u3001<code>div</code>\u548c<code>rem</code>\u6307\u4ee4\u3002</li> </ul> </li> <li> <p>\u53ef\u9009\u7684RISC-V 16\u4f4d\u538b\u7f29ISA:</p> <ul> <li>\u63d0\u4f9b\u4e86\u5173\u4e8eRISC-V 16\u4f4d\u538b\u7f29\u6307\u4ee4\u96c6\u7684\u989d\u5916\u4fe1\u606f\uff0c\u8fd9\u662f\u4e00\u79cd\u4f18\u5316\uff0c\u7528\u4e8e\u6700\u5e38\u89c1\u7684\u6307\u4ee4\u6a21\u5f0f\u3002</li> </ul> </li> </ol> <p>\u8fd9\u4e2a\u8bb2\u5ea7\u6db5\u76d6\u4e86\u8ba1\u7b97\u673a\u7cfb\u7edf\u5e95\u5c42\u7684\u8bb8\u591a\u5173\u952e\u6982\u5ff5\uff0c\u5bf9\u4e8e\u7406\u89e3\u7a0b\u5e8f\u662f\u5982\u4f55\u88ab\u7f16\u8bd1\u3001\u94fe\u63a5\u548c\u6267\u884c\u7684\u975e\u5e38\u6709\u5e2e\u52a9\u3002</p>"},{"location":"cs61c/cs61c_lec10/","title":"Cs61c lec10","text":"<p>\u8fd9\u4efd\u6587\u4ef6\u662f\u5173\u4e8e\u8ba1\u7b97\u673a\u79d1\u5b6661C\u6625\u5b632022\u5e74McMahon\u548cWeaver\u8bfe\u7a0b\u7684\u4e00\u7cfb\u5217\u8bb2\u4e49\uff0c\u4e3b\u8981\u4ecb\u7ecd\u4e86\u6570\u5b57\u7cfb\u7edf\u7684\u57fa\u7840\u77e5\u8bc6\u548c\u5e03\u5c14\u4ee3\u6570\u53ca\u5176\u5728\u7535\u8def\u8bbe\u8ba1\u4e2d\u7684\u5e94\u7528\u3002\u4ee5\u4e0b\u662f\u6838\u5fc3\u5185\u5bb9\u7684\u6982\u8ff0:</p> <ol> <li> <p>\u6570\u5b57\u7cfb\u7edf\u4ecb\u7ecd:    - \u6570\u5b57\u7cfb\u7edf\u4f7f\u7528\u79bb\u6563\u503c\uff0c\u53ef\u4ee5\u662f\u5f00\uff081\uff09\u6216\u5173\uff080\uff09\uff0c\u4e0e\u6a21\u62df\u7cfb\u7edf\u76f8\u5bf9\uff0c\u540e\u8005\u5177\u6709\u8fde\u7eed\u7684\u503c\u8303\u56f4\u3002</p> </li> <li> <p>\u903b\u8f91\u95e8:    - \u903b\u8f91\u95e8\u662f\u6570\u5b57\u7535\u8def\u7684\u6784\u5efa\u5757\uff0c\u5305\u62ecAND\u3001OR\u3001XOR\u3001NOT\u3001NAND\u3001NOR\u548cXNOR\u7b49\u3002</p> </li> <li> <p>\u5e03\u5c14\u4ee3\u6570:    - \u5e03\u5c14\u4ee3\u6570\u662f\u6570\u5b66\u7684\u4e00\u4e2a\u5206\u652f\uff0c\u4e13\u95e8\u5904\u74060\u548c1\u7684\u8fd0\u7b97\uff0c\u57fa\u672c\u64cd\u4f5c\u5305\u62ecAND\uff08&amp;\uff09\u3001OR\uff08|\uff09\u548cNOT\uff08~\uff09\u3002</p> </li> <li> <p>\u5e03\u5c14\u4ee3\u6570\u7684\u89c4\u5219:    - \u5305\u62ec\u4e92\u8865\u5f8b\u3001\u96f6\u5f8b\u3001\u6052\u7b49\u5f8b\u3001\u5e42\u7b49\u5f8b\u3001\u4ea4\u6362\u5f8b\u3001\u7ed3\u5408\u5f8b\u548c\u5206\u914d\u5f8b\u7b49\u3002</p> </li> <li> <p>\u5fb7\u6469\u6839\u5b9a\u5f8b:    - \u63cf\u8ff0\u4e86AND\u548cOR\u64cd\u4f5c\u7684\u5bf9\u5076\u6027\uff0c\u5982<code>A(B + C)</code>\u7b49\u540c\u4e8e<code>AB + AC</code>\u3002</p> </li> <li> <p>\u5e03\u5c14\u4ee3\u6570\u7684\u5e94\u7528:    - \u4f7f\u7528\u5e03\u5c14\u4ee3\u6570\u7b80\u5316\u7535\u8def\uff0c\u5982\u901a\u8fc7\u5e03\u5c14\u4ee3\u6570\u89c4\u5219\u7b80\u5316\u8868\u8fbe\u5f0f<code>out = AB + B + C</code>\u4e3a<code>out = B + C</code>\u3002</p> </li> <li> <p>\u771f\u503c\u8868:    - \u7528\u4e8e\u8868\u793a\u5e03\u5c14\u65b9\u7a0b\u7684\u6240\u6709\u53ef\u80fd\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u662f\u8bbe\u8ba1\u548c\u9a8c\u8bc1\u903b\u8f91\u7535\u8def\u7684\u91cd\u8981\u5de5\u5177\u3002</p> </li> <li> <p>\u903b\u8f91\u7535\u8def\u56fe:    - \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u903b\u8f91\u95e8\u5b9e\u73b0\u5e03\u5c14\u65b9\u7a0b\uff0c\u5982<code>out = AB + CD</code>\u3002</p> </li> <li> <p>\u5f02\u6216\uff08XOR\uff09\u548c\u540c\u6216\uff08XNOR\uff09\u7684\u5b9e\u73b0:    - \u63cf\u8ff0\u4e86\u5982\u4f55\u4ec5\u4f7f\u7528AND\u548cOR\u95e8\u6765\u6784\u5efaXOR\u548cXNOR\u903b\u8f91\u3002</p> </li> <li> <p>\u52a0\u6cd5\u5668\u7684\u6784\u5efa:</p> <ul> <li>\u5305\u62ec\u534a\u52a0\u5668\uff08Half Adder\uff09\u548c\u5168\u52a0\u5668\uff08Full Adder\uff09\u7684\u8bbe\u8ba1\uff0c\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u5b83\u4eec\u6784\u5efa\u591a\u4f4d\u52a0\u6cd5\u5668\u3002</li> </ul> </li> <li> <p>\u7b97\u672f\u903b\u8f91\u5355\u5143\uff08ALU\uff09:</p> <ul> <li>\u4ecb\u7ecdALU\u7684\u4f5c\u7528\uff0c\u5b83\u53ef\u4ee5\u6267\u884c\u6574\u6570\u4e8c\u8fdb\u5236\u6570\u7684\u7b97\u672f\u548c\u903b\u8f91\u64cd\u4f5c\u3002</li> </ul> </li> <li> <p>\u7ec4\u5408\u903b\u8f91:</p> <ul> <li>\u63cf\u8ff0\u4e86\u7ec4\u5408\u903b\u8f91\u7684\u7279\u6027\uff0c\u5373\u8f93\u51fa\u4ec5\u4f9d\u8d56\u4e8e\u5f53\u524d\u8f93\u5165\uff0c\u5e76\u4e14\u4e00\u65e6\u8f93\u5165\u53ef\u7528\uff0c\u8f93\u51fa\u5c31\u5f00\u59cb\u88ab\u8ba1\u7b97\u3002</li> </ul> </li> <li> <p>\u591a\u8def\u590d\u7528\u5668\uff08Multiplexer\uff09:</p> <ul> <li>2:1\u591a\u8def\u590d\u7528\u5668\u7684\u9009\u62e9\u903b\u8f91\uff0c\u53ef\u4ee5\u6839\u636e\u9009\u62e9\u4fe1\u53f7\u4ece\u4e24\u4e2a\u8f93\u5165\u4e2d\u9009\u62e9\u4e00\u4e2a\u8f93\u51fa\u3002</li> </ul> </li> <li> <p>\u5b58\u50a8\u683c\u5f0f\u793a\u4f8b:</p> <ul> <li>\u5c55\u793a\u4e86\u5982\u4f55\u5728RISC-V\u6c47\u7f16\u8bed\u8a00\u4e2d\u5b58\u50a8\u6307\u4ee4\uff0c\u4f8b\u5982<code>sw x14, 36(x5)</code>\u7684\u4e8c\u8fdb\u5236\u683c\u5f0f\u3002</li> </ul> </li> <li> <p>\u4e0d\u540c\u8868\u793a/\u89e3\u91ca\u5c42\u6b21:</p> <ul> <li>\u4ece\u9ad8\u7ea7\u8bed\u8a00\u7a0b\u5e8f\u5230\u6c47\u7f16\u8bed\u8a00\u7a0b\u5e8f\uff0c\u518d\u5230\u673a\u5668\u8bed\u8a00\u7a0b\u5e8f\uff0c\u4ee5\u53ca\u786c\u4ef6\u67b6\u6784\u63cf\u8ff0\u3002</li> </ul> </li> </ol> <p>\u8fd9\u4e9b\u8bb2\u4e49\u63d0\u4f9b\u4e86\u5bf9\u6570\u5b57\u7cfb\u7edf\u8bbe\u8ba1\u7684\u6df1\u5165\u7406\u89e3\uff0c\u5305\u62ec\u5e03\u5c14\u4ee3\u6570\u7684\u539f\u7406\u3001\u903b\u8f91\u95e8\u7684\u5de5\u4f5c\u539f\u7406\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\u6765\u6784\u5efa\u548c\u7b80\u5316\u6570\u5b57\u7535\u8def\u3002</p>"},{"location":"cs61c/cs61c_lec11/","title":"Cs61c lec11","text":"<p>\u6587\u4ef6\u662f\u5173\u4e8e\u8ba1\u7b97\u673a\u79d1\u5b6661C\u6625\u5b632022\u5e74McMahon\u548cWeaver\u8bfe\u7a0b\u7684\u4e00\u7cfb\u5217\u8bb2\u4e49\uff0c\u6db5\u76d6\u4e86\u6570\u5b57\u7cfb\u7edf\u7684\u540c\u6b65\u7279\u6027\u3001\u89e6\u53d1\u5668\u3001\u65f6\u949f\u4fe1\u53f7\u3001\u7ec4\u5408\u903b\u8f91\u4e0e\u65f6\u5e8f\u903b\u8f91\u3001\u4ee5\u53ca\u6676\u4f53\u7ba1\u7684\u57fa\u7840\u77e5\u8bc6\u3002\u4ee5\u4e0b\u662f\u6838\u5fc3\u5185\u5bb9\u7684\u6982\u8ff0:</p> <ol> <li> <p>\u540c\u6b65\u6570\u5b57\u7cfb\u7edf:    - \u6240\u6709\u64cd\u4f5c\u90fd\u7531\u65f6\u949f\u4fe1\u53f7\u534f\u8c03\u3002</p> </li> <li> <p>\u7d2f\u52a0\u5668\uff08Accumulator\uff09\u793a\u4f8b:    - \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u7d2f\u52a0\u5668\u9010\u6b65\u7d2f\u52a0\u8f93\u5165\u503c\u3002</p> </li> <li> <p>\u65f6\u949f\u4fe1\u53f7\uff08Clock Signal\uff09:    - \u65f6\u949f\u4fe1\u53f7\u5728\u9ad8\u4f4e\u72b6\u6001\u4e4b\u95f4\u632f\u8361\uff0c\u5b9a\u4e49\u4e86\u5468\u671f\uff08Period\uff09\u548c\u9891\u7387\uff08Frequency\uff09\u3002</p> </li> <li> <p>D\u89e6\u53d1\u5668\uff08D Flip-Flops\uff09:    - \u7528\u4e8e\u5b58\u50a8\u6570\u636e\uff0c\u4f9d\u8d56\u4e8e\u65f6\u949f\u4fe1\u53f7\u7684\u4e0a\u5347\u6cbf\u6216\u4e0b\u964d\u6cbf\u6765\u66f4\u65b0\u8f93\u51fa\u3002</p> </li> <li> <p>\u89e6\u53d1\u5668\u7c7b\u578b:    - \u540c\u6b65\u89e6\u53d1\u5668:\u4f9d\u8d56\u4e8e\u65f6\u949f\u4fe1\u53f7\u3002    - \u5f02\u6b65\u89e6\u53d1\u5668:\u72ec\u7acb\u4e8e\u65f6\u949f\u4fe1\u53f7\u3002</p> </li> <li> <p>\u89e6\u53d1\u5668\u7684\u65f6\u5e8f:    - \u5305\u62ecClock-to-Q\u5ef6\u8fdf\u3001\u5efa\u7acb\u65f6\u95f4\uff08Set-up Time\uff09\u3001\u4fdd\u6301\u65f6\u95f4\uff08Hold Time\uff09\u3002</p> </li> <li> <p>\u5bc4\u5b58\u5668\uff08Registers\uff09:    - \u7531\u591a\u4e2a\u89e6\u53d1\u5668\u7ec4\u6210\uff0c\u7528\u4e8e\u5b58\u50a832\u4f4d\u6570\u503c\u3002</p> </li> <li> <p>\u7ec4\u5408\u903b\u8f91\uff08Combinational Logic\uff09:    - \u63cf\u8ff0\u4e86\u7ec4\u5408\u903b\u8f91\u7684\u5ef6\u8fdf\u548c\u5982\u4f55\u901a\u8fc7\u7ec4\u5408\u903b\u8f91\u4f20\u64ad\u503c\u3002</p> </li> <li> <p>\u65f6\u949f\u5468\u671f\u65f6\u95f4\uff08Clock Cycle Time\uff09:    - \u5b9a\u4e49\u4e86\u6700\u5c0f\u65f6\u949f\u5468\u671f\u65f6\u95f4\uff0c\u5373\u4ece\u4e00\u4e2a\u72b6\u6001\u5143\u7d20\u7684\u8f93\u5165\u5230\u8fbe\u4e0b\u4e00\u4e2a\u72b6\u6001\u5143\u7d20\u7684\u8f93\u5165\u6240\u9700\u7684\u65f6\u95f4\u3002</p> </li> <li> <p>\u7535\u8def\u65f6\u5e8f\u5206\u6790:</p> <ul> <li>\u8ba8\u8bba\u4e86\u5982\u4f55\u5206\u6790\u7535\u8def\u7684\u65f6\u5e8f\uff0c\u4f46\u6ca1\u6709\u6db5\u76d6\u66f4\u590d\u6742\u7684\u4f8b\u5b50\u3002</li> </ul> </li> <li> <p>\u7ec4\u5408\u903b\u8f91\u4e0e\u65f6\u5e8f\u903b\u8f91\uff08Combinational vs Sequential Logic\uff09:</p> <ul> <li>\u7ec4\u5408\u903b\u8f91:\u8f93\u51fa\u4ec5\u4f9d\u8d56\u4e8e\u5f53\u524d\u8f93\u5165\u3002</li> <li>\u65f6\u5e8f\u903b\u8f91:\u4e0e\u65f6\u949f\u4fe1\u53f7\u540c\u6b65\uff0c\u8f93\u51fa\u4f9d\u8d56\u4e8e\u8f93\u5165\u548c\u5148\u524d\u72b6\u6001\u7684\u7ec4\u5408\u3002</li> </ul> </li> <li> <p>\u6676\u4f53\u7ba1\uff08Transistors\uff09:</p> <ul> <li>\u8ba8\u8bba\u4e86\u91d1\u5c5e\u6c27\u5316\u7269\u534a\u5bfc\u4f53\u573a\u6548\u5e94\u6676\u4f53\u7ba1\uff08MOSFET\uff09\u7684\u5de5\u4f5c\u539f\u7406\u3002</li> </ul> </li> <li> <p>CMOS\uff08\u4e92\u8865\u91d1\u5c5e\u6c27\u5316\u7269\u534a\u5bfc\u4f53\uff09:</p> <ul> <li>\u4f7f\u7528p\u578b\u548cn\u578bMOSFET\u7684\u4e92\u8865\u548c\u5bf9\u79f0\u5bf9\u6765\u6784\u5efa\u903b\u8f91\u529f\u80fd\u3002</li> </ul> </li> <li> <p>\u903b\u8f91\u95e8\u7684\u6676\u4f53\u7ba1\u5b9e\u73b0:</p> <ul> <li>\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u6676\u4f53\u7ba1\u6784\u5efa\u975e\u95e8\uff08Inverter\uff09\u3001\u4e0e\u95e8\uff08AND Gate\uff09\u3001\u6216\u95e8\uff08OR Gate\uff09\u3001\u4e0e\u975e\u95e8\uff08NAND Gate\uff09\u548c\u6216\u975e\u95e8\uff08NOR Gate\uff09\u3002</li> </ul> </li> <li> <p>\u5fb7\u6469\u6839\u5b9a\u5f8b\uff08DeMorgan\u2019s Law\uff09:</p> <ul> <li>\u63cf\u8ff0\u4e86\u5982\u4f55\u4f7f\u7528\u975e\u95e8\u3001\u4e0e\u95e8\u548c\u6216\u95e8\u6765\u5b9e\u73b0\u903b\u8f91\u529f\u80fd\u3002</li> </ul> </li> <li> <p>\u6676\u4f53\u7ba1\u6570\u91cf\u7684\u4f18\u5316:</p> <ul> <li>\u8ba8\u8bba\u4e86\u5982\u4f55\u901a\u8fc7\u5fb7\u6469\u6839\u5b9a\u5f8b\u5c06\u4e0e\u95e8\u548c\u6216\u95e8\u8f6c\u6362\u4e3a\u4e0e\u975e\u95e8\u548c\u6216\u975e\u95e8\u6765\u51cf\u5c11\u6676\u4f53\u7ba1\u6570\u91cf\u3002</li> </ul> </li> </ol> <p>\u8fd9\u4e9b\u8bb2\u4e49\u63d0\u4f9b\u4e86\u5bf9\u6570\u5b57\u7cfb\u7edf\u8bbe\u8ba1\u7684\u6df1\u5165\u7406\u89e3\uff0c\u5305\u62ec\u540c\u6b65\u64cd\u4f5c\u3001\u89e6\u53d1\u5668\u7684\u5de5\u4f5c\u539f\u7406\u3001\u65f6\u949f\u4fe1\u53f7\u7684\u91cd\u8981\u6027\u3001\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u6676\u4f53\u7ba1\u6784\u5efa\u57fa\u672c\u7684\u903b\u8f91\u95e8\u3002</p>"},{"location":"cs61c/cs61c_lec12/","title":"Cs61c lec12","text":"<p><code>lec12.pdf</code>\u6587\u4ef6\u662f\u8ba1\u7b97\u673a\u79d1\u5b6661C\u6625\u5b632022\u8bfe\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u7531McMahon\u548cWeaver\u6559\u6388\uff0c\u4e3b\u8981\u805a\u7126\u4e8eRISC-V\u5904\u7406\u5668\u8bbe\u8ba1\uff0c\u7279\u522b\u662f\u6570\u636e\u8def\u5f84\u7684\u8bbe\u8ba1\u548c\u5b9e\u73b0\u3002\u4ee5\u4e0b\u662f\u8be5\u8bb2\u5ea7\u7684\u8be6\u7ec6\u5185\u5bb9:</p> <ol> <li> <p>CMOS\u7535\u8def\u7684\u73b0\u5b9e\u95ee\u9898:    - \u8ba8\u8bba\u4e86CMOS\uff08\u4e92\u8865\u91d1\u5c5e\u6c27\u5316\u7269\u534a\u5bfc\u4f53\uff09\u7535\u8def\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u9762\u4e34\u7684\u4e00\u4e9b\u6311\u6218\uff0c\u4f8b\u5982\u6676\u4f53\u7ba1\u4e0d\u662f\u5b8c\u7f8e\u7684\u5f00\u5173\uff0c\u5b58\u5728\u6f0f\u7535\u6d41\u548c\u6709\u9650\u7684\u5bfc\u901a\u7535\u963b\uff1b\u7535\u8def\u8282\u70b9\u5177\u6709\u7535\u5bb9\uff0c\u6539\u53d8\u7535\u538b\u9700\u8981\u5145\u653e\u7535\u3002</p> </li> <li> <p>\u6676\u4f53\u7ba1\u4f5c\u4e3a\u6c34\u9600\u7684\u7c7b\u6bd4:    - \u4f7f\u7528\u6c34\u9600\u548c\u6c34\u7ba1\u7684\u7c7b\u6bd4\u6765\u89e3\u91ca\u6676\u4f53\u7ba1\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u5176\u4e2d\u7535\u5b50\u50cf\u6c34\u5206\u5b50\uff0c\u6676\u4f53\u7ba1\u7684\u7535\u963b\u7c7b\u4f3c\u4e8e\u6c34\u7ba1\u76f4\u5f84\uff0c\u7535\u5bb9\u50cf\u6c34\u6876\u3002</p> </li> <li> <p>\u903b\u8f91\u95e8\u7684\u5ef6\u8fdf:    - \u63cf\u8ff0\u4e86\u903b\u8f91\u95e8\uff08\u5982\u4e0e\u95e8\u3001\u6216\u95e8\u3001\u975e\u95e8\u7b49\uff09\u5728\u8f93\u5165\u53d8\u5316\u5230\u8f93\u51fa\u53d8\u5316\u4e4b\u95f4\u7684\u5ef6\u8fdf\uff0c\u8fd9\u79cd\u5ef6\u8fdf\u53d6\u51b3\u4e8e\u95e8\u7684\u7c7b\u578b\u3001\u8fde\u63a5\u5230\u7684\u5176\u5b83\u95e8\u7684\u6570\u91cf\u4ee5\u53ca\u96c6\u6210\u7535\u8def\u5de5\u827a\u7ec6\u8282\u3002</p> </li> <li> <p>CMOS\u7535\u8def\u7684\u80fd\u8017:    - \u8ba8\u8bba\u4e86CMOS\u7535\u8def\u5728\u8fd0\u884c\u65f6\u6d88\u8017\u7535\u80fd\u7684\u95ee\u9898\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u624b\u6301\u8bbe\u5907\u548c\u670d\u52a1\u5668\u7b49\u4e0d\u540c\u5e94\u7528\u573a\u666f\u4e0b\u7684\u80fd\u6548\u548c\u6563\u70ed\u95ee\u9898\u3002</p> </li> <li> <p>\u5f00\u5173\u80fd\u91cf:    - \u57fa\u4e8e\u57fa\u672c\u7269\u7406\u539f\u7406\uff0c\u89e3\u91ca\u4e86\u6bcf\u6b21\u903b\u8f91\u72b6\u6001\u8f6c\u6362\u90fd\u4f1a\u6d88\u8017\u80fd\u91cf\uff0c\u4ee5\u53ca\u5982\u4f55\u8ba1\u7b97\u95e8\u7684\u5f00\u5173\u80fd\u8017\u3002</p> </li> <li> <p>\u964d\u4f4e\u80fd\u8017\u7684\u65b9\u6cd5:    - \u63d0\u51fa\u4e86\u964d\u4f4e\u7535\u6e90\u7535\u538b\u548c\u4f7f\u7528\u5e76\u884c\u6027\u6765\u63d0\u9ad8\u80fd\u6548\u7684\u65b9\u6cd5\uff0c\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u964d\u4f4e\u9891\u7387\u5e76\u4e0d\u63d0\u9ad8\u80fd\u6548\u3002</p> </li> <li> <p>\u62bd\u8c61\u7684\u6982\u5ff5:    - \u8ba8\u8bba\u4e86\u5728\u5904\u7406\u5668\u8bbe\u8ba1\u4e2d\u4f7f\u7528\u62bd\u8c61\u7684\u6982\u5ff5\uff0c\u4ece\u9ad8\u7ea7\u8bed\u8a00\u5230\u6c47\u7f16\u8bed\u8a00\uff0c\u518d\u5230\u673a\u5668\u8bed\u8a00\u548c\u786c\u4ef6\u67b6\u6784\u63cf\u8ff0\u3002</p> </li> <li> <p>RV32I\u6307\u4ee4\u96c6\u67b6\u6784\uff08ISA\uff09\u7684\u72b6\u6001\u9700\u6c42:    - \u63cf\u8ff0\u4e86RV32I ISA\u5728\u6267\u884c\u6307\u4ee4\u65f6\u9700\u8981\u8bfb\u53d6\u548c\u66f4\u65b0\u7684\u72b6\u6001\uff0c\u5305\u62ec\u5bc4\u5b58\u5668\u3001\u7a0b\u5e8f\u8ba1\u6570\u5668\uff08PC\uff09\u548c\u5185\u5b58\u3002</p> </li> <li> <p>\u5355\u6307\u4ee4\u5468\u671fRISC-V\u673a\u5668:    - \u89e3\u91ca\u4e86\u5728\u5355\u6307\u4ee4\u5468\u671fRISC-V\u673a\u5668\u4e2d\uff0c\u5982\u4f55\u901a\u8fc7\u7ec4\u5408\u903b\u8f91\u548c\u65f6\u949f\u4fe1\u53f7\u5728\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u6267\u884c\u4e00\u6761\u6307\u4ee4\u3002</p> </li> <li> <p>\u6307\u4ee4\u6267\u884c\u7684\u57fa\u672c\u9636\u6bb5:</p> <ul> <li>\u63cf\u8ff0\u4e86\u6307\u4ee4\u6267\u884c\u7684\u4e94\u4e2a\u57fa\u672c\u9636\u6bb5:\u6307\u4ee4\u83b7\u53d6\uff08IF\uff09\u3001\u6307\u4ee4\u89e3\u7801/\u5bc4\u5b58\u5668\u8bfb\u53d6\uff08ID\uff09\u3001\u6267\u884c\uff08EX\uff09\u3001\u5185\u5b58\u8bbf\u95ee\uff08MEM\uff09\u548c\u5bc4\u5b58\u5668\u5199\u56de\uff08WB\uff09\u3002</li> </ul> </li> <li> <p>\u5b9e\u73b0\u7279\u5b9aRISC-V\u6307\u4ee4:</p> <ul> <li>\u901a\u8fc7<code>add</code>\u3001<code>sub</code>\u3001<code>addi</code>\u3001<code>lw</code>\u3001<code>sw</code>\u7b49\u6307\u4ee4\u7684\u4f8b\u5b50\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u5728\u6570\u636e\u8def\u5f84\u4e2d\u5b9e\u73b0\u8fd9\u4e9b\u6307\u4ee4\u3002</li> </ul> </li> <li> <p>\u6570\u636e\u8def\u5f84\u7684\u6269\u5c55:</p> <ul> <li>\u5c55\u793a\u4e86\u5982\u4f55\u5c06\u6570\u636e\u8def\u5f84\u6269\u5c55\u4ee5\u652f\u6301\u4e0d\u540c\u7c7b\u578b\u7684\u6307\u4ee4\uff0c\u4f8b\u5982\u7acb\u5373\u6570\u751f\u6210\u3001\u5206\u652f\u6307\u4ee4\u548c\u8df3\u8f6c\u6307\u4ee4\u3002</li> </ul> </li> <li> <p>\u63a7\u5236\u903b\u8f91:</p> <ul> <li>\u8ba8\u8bba\u4e86\u63a7\u5236\u903b\u8f91\u5982\u4f55\u6839\u636e\u6307\u4ee4\u6765\u6307\u5bfc\u6570\u636e\u8def\u5f84\u7684\u64cd\u4f5c\uff0c\u5305\u62ecALU\u9009\u62e9\u3001\u5185\u5b58\u8bfb\u5199\u9009\u62e9\u548c\u5bc4\u5b58\u5668\u5199\u56de\u9009\u62e9\u3002</li> </ul> </li> <li> <p>\u901a\u7528\u6570\u636e\u8def\u5f84:</p> <ul> <li>\u5f3a\u8c03\u4e86\u6570\u636e\u8def\u5f84\u662f\u6240\u6709\u6307\u4ee4\u6240\u9700\u5355\u5143\u7684\u201c\u8054\u5408\u201d\uff0c\u901a\u8fc7\u591a\u8def\u9009\u62e9\u5668\u63d0\u4f9b\u9009\u9879\uff0c\u4f46\u5e76\u975e\u6240\u6709\u786c\u4ef6\u5355\u5143\u5728\u6240\u6709\u6307\u4ee4\u4e2d\u90fd\u88ab\u4f7f\u7528\u3002</li> </ul> </li> <li> <p>\u6267\u884c\u9636\u6bb5:</p> <ul> <li>\u63cf\u8ff0\u4e86\u6307\u4ee4\u6267\u884c\u7684\u4e94\u4e2a\u9636\u6bb5\uff0c\u4ee5\u53ca\u4e0d\u662f\u6240\u6709\u6307\u4ee4\u5728\u6240\u6709\u9636\u6bb5\u90fd\u6d3b\u8dc3\u3002</li> </ul> </li> <li> <p>\u63a7\u5236\u903b\u8f91\u7684\u5b9e\u73b0:</p> <ul> <li>\u8ba8\u8bba\u4e86\u63a7\u5236\u903b\u8f91\u53ef\u4ee5\u901a\u8fc7\u67e5\u627e\u8868\uff08\u4f8b\u5982ROM\uff09\u6216\u7ec4\u5408\u903b\u8f91\u6765\u5b9e\u73b0\uff0c\u5e76\u5c55\u793a\u4e86\u63a7\u5236\u4fe1\u53f7\u7684\u771f\u503c\u8868\u3002</li> </ul> </li> </ol> <p>\u901a\u8fc7\u8fd9\u4e9b\u5185\u5bb9\uff0c<code>lec12.pdf</code>\u63d0\u4f9b\u4e86\u5bf9RISC-V\u5904\u7406\u5668\u6570\u636e\u8def\u5f84\u8bbe\u8ba1\u7684\u6df1\u5165\u7406\u89e3\uff0c\u5305\u62ec\u5982\u4f55\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u6307\u4ee4\u4ee5\u53ca\u5982\u4f55\u8bbe\u8ba1\u63a7\u5236\u903b\u8f91\u4ee5\u9a71\u52a8\u6570\u636e\u8def\u5f84\u7684\u64cd\u4f5c\u3002</p>"},{"location":"cs61c/cs61c_lec13/","title":"Cs61c lec13","text":"<p><code>lec13.pdf</code>\u6587\u4ef6\u662f\u8ba1\u7b97\u673a\u79d1\u5b6661C\u6625\u5b632020\u8bfe\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u7531Kolb\u548cWeaver\u4ee5\u53caMcMahon\u548cWeaver\u6559\u6388\uff0c\u4e3b\u8981\u8bb2\u89e3\u4e86RISC-V\u6307\u4ee4\u96c6\u67b6\u6784\u4e2d\u5355\u5468\u671f(Single-Cycle)\u548c\u6d41\u6c34\u7ebf(Pipelined)\u6570\u636e\u8def\u5f84\u7684\u8bbe\u8ba1\u548c\u63a7\u5236\u3002\u4ee5\u4e0b\u662f\u8be5\u8bb2\u5ea7\u7684\u8be6\u7ec6\u5185\u5bb9:</p> <ol> <li> <p>\u5355\u5468\u671fRISC-V\u6570\u636e\u8def\u5f84\u5b8c\u6210:    - \u4ecb\u7ecd\u4e86\u5982\u4f55\u5b8c\u6210\u5355\u5468\u671fRISC-V\u6570\u636e\u8def\u5f84\u7684\u8bbe\u8ba1\uff0c\u786e\u4fdd\u6bcf\u4e2aRISC-V\u6307\u4ee4\u53ef\u4ee5\u5728\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u5185\u6267\u884c\u3002</p> </li> <li> <p>\u63a7\u5236\u5668(Controller):    - \u63a7\u5236\u5668\u662f\u544a\u8bc9\u901a\u7528\u6570\u636e\u8def\u5f84\u5982\u4f55\u6267\u884c\u6bcf\u6761\u6307\u4ee4\u7684\u90e8\u5206\u3002\u5b83\u6839\u636e\u6307\u4ee4\u7684\u7c7b\u578b\u751f\u6210\u76f8\u5e94\u7684\u63a7\u5236\u4fe1\u53f7\u3002</p> </li> <li> <p>\u6307\u4ee4\u5b9a\u65f6(Instruction Timing):    - \u8ba8\u8bba\u4e86\u4e0d\u540c\u7c7b\u578b\u7684\u6307\u4ee4\u5728\u6267\u884c\u65f6\u6240\u9700\u7684\u65f6\u95f4\uff0c\u5305\u62ec\u53d6\u6307(IF)\u3001\u8bd1\u7801(ID)\u3001\u6267\u884c(EX)\u3001\u8bbf\u5b58(MEM)\u548c\u5199\u56de(WB)\u9636\u6bb5\u3002</p> </li> <li> <p>\u6027\u80fd\u5ea6\u91cf(Performance Measures):    - \u4ecb\u7ecd\u4e86\u8bc4\u4f30\u5904\u7406\u5668\u6027\u80fd\u7684\u4e0d\u540c\u6307\u6807\uff0c\u5982\u65f6\u949f\u9891\u7387\u3001\u6307\u4ee4\u6267\u884c\u65f6\u95f4\u3001\u541e\u5410\u91cf\u7b49\u3002</p> </li> <li> <p>\u6d41\u6c34\u7ebf\u4ecb\u7ecd(Introduction to Pipelining):    - \u8bb2\u89e3\u4e86\u6d41\u6c34\u7ebf\u7684\u6982\u5ff5\uff0c\u4ee5\u53ca\u5982\u4f55\u901a\u8fc7\u6d41\u6c34\u7ebf\u63d0\u9ad8\u5904\u7406\u5668\u7684\u6307\u4ee4\u541e\u5410\u91cf\u3002</p> </li> <li> <p>\u6d41\u6c34\u7ebfRISC-V\u6570\u636e\u8def\u5f84(Pipelined RISC-V Datapath):    - \u8be6\u7ec6\u4ecb\u7ecd\u4e86\u6d41\u6c34\u7ebfRISC-V\u6570\u636e\u8def\u5f84\u7684\u8bbe\u8ba1\uff0c\u5305\u62ec\u6d41\u6c34\u7ebf\u7684\u5404\u4e2a\u9636\u6bb5\u548c\u5b83\u4eec\u5982\u4f55\u534f\u540c\u5de5\u4f5c\u3002</p> </li> <li> <p>\u5b9e\u73b0jal\u6307\u4ee4:    - \u7279\u522b\u4ecb\u7ecd\u4e86jal\uff08\u8df3\u8f6c\u5e76\u94fe\u63a5\uff09\u6307\u4ee4\u7684\u5b9e\u73b0\uff0c\u5305\u62ec\u5982\u4f55\u5728\u5bc4\u5b58\u5668\u4e2d\u4fdd\u5b58\u8fd4\u56de\u5730\u5740\uff0c\u4ee5\u53ca\u5982\u4f55\u8bbe\u7f6e\u7a0b\u5e8f\u8ba1\u6570\u5668\u4ee5\u5b9e\u73b0\u8df3\u8f6c\u3002</p> </li> <li> <p>\u6570\u636e\u8def\u5f84\u6dfb\u52a0jal:    - \u5c55\u793a\u4e86\u5982\u4f55\u5728\u6570\u636e\u8def\u5f84\u4e2d\u6dfb\u52a0\u5bf9jal\u6307\u4ee4\u7684\u652f\u6301\uff0c\u5305\u62ec\u6240\u9700\u7684\u63a7\u5236\u4fe1\u53f7\u548c\u6570\u636e\u8def\u5f84\u7684\u53d8\u5316\u3002</p> </li> <li> <p>\u5355\u5468\u671fRV32I\u6570\u636e\u8def\u5f84\u56de\u987e:    - \u56de\u987e\u4e86\u5355\u5468\u671fRV32I\u6307\u4ee4\u96c6\u67b6\u6784\u7684\u6570\u636e\u8def\u5f84\u8bbe\u8ba1\uff0c\u5305\u62ecALU\u3001\u5bc4\u5b58\u5668\u3001\u5185\u5b58\u7b49\u7ec4\u4ef6\u3002</p> </li> <li> <p>\u901a\u7528\u6570\u636e\u8def\u5f84:    - \u8ba8\u8bba\u4e86\u901a\u7528\u6570\u636e\u8def\u5f84\u7684\u6982\u5ff5\uff0c\u5373\u6570\u636e\u8def\u5f84\u80fd\u591f\u6267\u884c\u6240\u6709RISC-V\u6307\u4ee4\uff0c\u4ee5\u53ca\u5b83\u662f\u5982\u4f55\u901a\u8fc7\u591a\u8def\u9009\u62e9\u5668\u5b9e\u73b0\u4e0d\u540c\u6307\u4ee4\u7684\u6267\u884c\u3002</p> </li> <li> <p>\u63a7\u5236\u903b\u8f91:    - \u4ecb\u7ecd\u4e86\u63a7\u5236\u903b\u8f91\u7684\u8bbe\u8ba1\uff0c\u5305\u62ec\u5982\u4f55\u4f7f\u7528\u771f\u503c\u8868\u6765\u786e\u5b9a\u6bcf\u6761\u6307\u4ee4\u6240\u9700\u7684\u63a7\u5236\u4fe1\u53f7\u3002</p> </li> <li> <p>\u63a7\u5236\u5668\u5b9e\u73b0\u9009\u9879:</p> <ul> <li>\u8ba8\u8bba\u4e86\u63a7\u5236\u5668\u7684\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f:\u53ea\u8bfb\u5b58\u50a8\u5668(ROM)\u548c\u7ec4\u5408\u903b\u8f91(Combinatorial Logic)\u3002</li> </ul> </li> <li> <p>ROM\u63a7\u5236\u5668\u5b9e\u73b0:</p> <ul> <li>\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528ROM\u6765\u5b9e\u73b0\u63a7\u5236\u5668\uff0c\u4ee5\u53ca\u5982\u4f55\u901a\u8fc7\u5730\u5740\u89e3\u7801\u6765\u751f\u6210\u63a7\u5236\u4fe1\u53f7\u3002</li> </ul> </li> <li> <p>\u6307\u4ee4\u5b9a\u65f6:</p> <ul> <li>\u5206\u6790\u4e86\u4e0d\u540c\u6307\u4ee4\u5728\u6267\u884c\u65f6\u7684\u5178\u578b\u6700\u574f\u60c5\u51b5\u65f6\u95f4\uff0c\u4ee5\u53ca\u5982\u4f55\u901a\u8fc7\u6d41\u6c34\u7ebf\u6765\u63d0\u9ad8\u65f6\u949f\u9891\u7387\u3002</li> </ul> </li> <li> <p>\u6027\u80fd\u5ea6\u91cf:</p> <ul> <li>\u8fdb\u4e00\u6b65\u8ba8\u8bba\u4e86\u6027\u80fd\u5ea6\u91cf\u7684\u6982\u5ff5\uff0c\u5305\u62ec\u5982\u4f55\u7406\u89e3\u6307\u4ee4\u6267\u884c\u65f6\u95f4\u3001\u541e\u5410\u91cf\u548c\u80fd\u6548\u3002</li> </ul> </li> <li> <p>\u8fd0\u8f93\u7c7b\u6bd4:</p> <ul> <li>\u4f7f\u7528\u8d5b\u8f66\u548c\u516c\u4ea4\u8f66\u7684\u7c7b\u6bd4\u6765\u89e3\u91ca\u6307\u4ee4\u6267\u884c\u65f6\u95f4\uff08\u5ef6\u8fdf\uff09\u3001\u6307\u4ee4\u6267\u884c\u603b\u91cf\uff08\u541e\u5410\u91cf\uff09\u548c\u6bcf\u6761\u6307\u4ee4\u7684\u80fd\u8017\uff08\u80fd\u6548\uff09\u3002</li> </ul> </li> <li> <p>\u5904\u7406\u5668\u6027\u80fd\u7684\u201c\u94c1\u5f8b\u201d:</p> <ul> <li>\u8ba8\u8bba\u4e86\u7a0b\u5e8f\u6267\u884c\u65f6\u95f4\u7531\u6307\u4ee4\u6570\u3001\u6bcf\u6761\u6307\u4ee4\u7684\u65f6\u949f\u5468\u671f\u6570\u548c\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u7684\u65f6\u95f4\u5171\u540c\u51b3\u5b9a\u7684\u539f\u7406\u3002</li> </ul> </li> <li> <p>\u7ed3\u675f\u8bed:</p> <ul> <li>\u603b\u7ed3\u4e86\u6570\u636e\u8def\u5f84\u7684\u8bbe\u8ba1\u3001\u63a7\u5236\u5668\u7684\u4f5c\u7528\u3001\u6307\u4ee4\u5b9a\u65f6\u7684\u91cd\u8981\u6027\u4ee5\u53ca\u6d41\u6c34\u7ebf\u5982\u4f55\u63d0\u9ad8\u6027\u80fd\u3002</li> </ul> </li> </ol> <p>\u8fd9\u4efd\u8bb2\u5ea7\u5e7b\u706f\u7247\u4e3a\u7406\u89e3RISC-V\u67b6\u6784\u4e2d\u5355\u5468\u671f\u548c\u6d41\u6c34\u7ebf\u6570\u636e\u8def\u5f84\u7684\u8bbe\u8ba1\u63d0\u4f9b\u4e86\u6df1\u5165\u7684\u5206\u6790\uff0c\u6db5\u76d6\u4e86\u4ece\u6307\u4ee4\u6267\u884c\u7684\u57fa\u7840\u77e5\u8bc6\u5230\u9ad8\u7ea7\u6027\u80fd\u4f18\u5316\u7684\u591a\u4e2a\u65b9\u9762\u3002</p>"},{"location":"cs61c/cs61c_lec14/","title":"Cs61c lec14","text":"<p><code>lec14.pdf</code>\u6587\u4ef6\u662f\u8ba1\u7b97\u673a\u79d1\u5b6661C\u8bfe\u7a0b\u7684\u7b2c14\u8bb2\uff0c\u7531Wawrzynek\u548cWeaver\u57282021\u5e74\u79cb\u5b63\u5b66\u671f\u8bb2\u6388\uff0c\u4e3b\u8981\u5185\u5bb9\u5305\u62ecRISC-V\u6d41\u6c34\u7ebf\u5904\u7406\u7684\u6df1\u5165\u63a2\u8ba8\u3002\u4ee5\u4e0b\u662f\u8be5\u8bb2\u5ea7\u7684\u8be6\u7ec6\u5185\u5bb9:</p> <ol> <li> <p>\u8bfe\u7a0b\u56de\u987e:    - \u56de\u987e\u4e86\u63a7\u5236\u5668\u7684\u4f5c\u7528\uff0c\u6307\u4ee4\u5b9a\u65f6\uff0c\u4ee5\u53ca\u6d41\u6c34\u7ebf\u5982\u4f55\u63d0\u9ad8\u6307\u4ee4\u7684\u541e\u5410\u91cf\uff0c\u4f46\u5e76\u4e0d\u51cf\u5c11\u5b8c\u6210\u5355\u6761\u6307\u4ee4\u6240\u9700\u7684\u65f6\u95f4\u3002    - \u8ba8\u8bba\u4e86\u4e0d\u540c\u7684\u6027\u80fd\u5ea6\u91cf\u6307\u6807\uff0c\u5982\u54cd\u5e94\u65f6\u95f4\u3001\u4efb\u52a1/\u79d2\u548c\u80fd\u6548\u3002</p> </li> <li> <p>\u5904\u7406\u5668\u7ec4\u6210:    - \u4ecb\u7ecd\u4e86\u5904\u7406\u5668\u7684\u57fa\u672c\u7ec4\u6210\u90e8\u5206\uff0c\u5305\u62ec\u63a7\u5236\u5355\u5143\u3001\u6570\u636e\u8def\u5f84\u3001\u7a0b\u5e8f\u8ba1\u6570\u5668(PC)\u3001\u5bc4\u5b58\u5668\u3001\u7b97\u672f\u903b\u8f91\u5355\u5143(ALU)\u3001\u5185\u5b58\u4ee5\u53ca\u5904\u7406\u5668-\u5185\u5b58\u63a5\u53e3\u3002</p> </li> <li> <p>\u6d41\u6c34\u7ebf\u6982\u8ff0:    - \u89e3\u91ca\u4e86\u6d41\u6c34\u7ebf\u5982\u4f55\u5e2e\u52a9\u63d0\u9ad8\u6574\u4e2a\u5de5\u4f5c\u8d1f\u8f7d\u7684\u541e\u5410\u91cf\uff0c\u800c\u4e0d\u662f\u5355\u4e2a\u4efb\u52a1\u7684\u5ef6\u8fdf\u3002    - \u8ba8\u8bba\u4e86\u6f5c\u5728\u7684\u52a0\u901f\u6bd4\uff0c\u4ee5\u53ca\u586b\u6ee1\u6d41\u6c34\u7ebf\u548c\u6392\u7a7a\u5b83\u6240\u9700\u7684\u65f6\u95f4\u5982\u4f55\u5f71\u54cd\u52a0\u901f\u6bd4\u3002</p> </li> <li> <p>RISC-V\u6d41\u6c34\u7ebf:    - \u901a\u8fc7\u793a\u4f8b\u4ee3\u7801\uff0c\u5c55\u793a\u4e86RISC-V\u6307\u4ee4\u5728\u6d41\u6c34\u7ebf\u4e2d\u7684\u6267\u884c\u8fc7\u7a0b\uff0c\u5305\u62ec\u6307\u4ee4\u83b7\u53d6\u3001\u89e3\u7801/\u5bc4\u5b58\u5668\u8bfb\u53d6\u3001ALU\u6267\u884c\u3001\u5185\u5b58\u8bbf\u95ee\u548c\u5199\u56de\u9636\u6bb5\u3002</p> </li> <li> <p>\u5355\u5468\u671fRISC-V RV32I \u6570\u636e\u8def\u5f84:    - \u63cf\u8ff0\u4e86\u5355\u5468\u671f\u6570\u636e\u8def\u5f84\u7684\u7ec4\u6210\uff0c\u5305\u62ec\u6307\u4ee4\u5185\u5b58(IMEM)\u3001ALU\u3001\u7acb\u5373\u6570\u751f\u6210\u5668(Imm. Gen)\u3001\u6570\u636e\u5185\u5b58(DMEM)\u3001\u5206\u652f\u6bd4\u8f83\u5668\u7b49\u3002</p> </li> <li> <p>\u6d41\u6c34\u7ebfRISC-V RV32I \u6570\u636e\u8def\u5f84:    - \u8be6\u7ec6\u89e3\u91ca\u4e86\u6d41\u6c34\u7ebf\u6570\u636e\u8def\u5f84\u7684\u8bbe\u8ba1\uff0c\u5305\u62ec\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u5982\u4f55\u5206\u9694\u4e0d\u540c\u7684\u9636\u6bb5\uff0c\u5e76\u4fdd\u6301\u6bcf\u6761\u6307\u4ee4\u7684\u6570\u636e\u3002</p> </li> <li> <p>\u6d41\u6c34\u7ebf\u63a7\u5236:    - \u8ba8\u8bba\u4e86\u63a7\u5236\u4fe1\u53f7\u662f\u5982\u4f55\u4ece\u6307\u4ee4\u4e2d\u6d3e\u751f\u51fa\u6765\u7684\uff0c\u4ee5\u53ca\u5982\u4f55\u5728\u6d41\u6c34\u7ebf\u7684\u5404\u4e2a\u9636\u6bb5\u4e2d\u4f7f\u7528\u6d41\u6c34\u7ebf\u5bc4\u5b58\u5668\u5b58\u50a8\u4fe1\u606f\u3002</p> </li> <li> <p>\u6d41\u6c34\u7ebf\u6027\u80fd\u63d0\u5347:    - \u901a\u8fc7\u516c\u5f0f\u89e3\u91ca\u4e86\u6d41\u6c34\u7ebf\u5982\u4f55\u901a\u8fc7\u51cf\u5c11\u6bcf\u4e2a\u5468\u671f\u7684\u65f6\u95f4\u6765\u63d0\u9ad8\u5904\u7406\u5668\u6027\u80fd\u3002</p> </li> <li> <p>\u98ce\u9669(Hazards):    - \u4ecb\u7ecd\u4e86\u6d41\u6c34\u7ebf\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u98ce\u9669\uff0c\u5305\u62ec\u7ed3\u6784\u6027\u98ce\u9669\u3001\u6570\u636e\u98ce\u9669\u548c\u63a7\u5236\u98ce\u9669\uff0c\u5e76\u8ba8\u8bba\u4e86\u5982\u4f55\u5904\u7406\u8fd9\u4e9b\u98ce\u9669\u3002</p> </li> <li> <p>\u7ed3\u6784\u6027\u98ce\u9669:</p> <ul> <li>\u89e3\u91ca\u4e86\u5f53\u6d41\u6c34\u7ebf\u4e2d\u7684\u591a\u6761\u6307\u4ee4\u7ade\u4e89\u5355\u4e00\u7269\u7406\u8d44\u6e90\u65f6\u51fa\u73b0\u7684\u95ee\u9898\uff0c\u4ee5\u53ca\u5982\u4f55\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002</li> </ul> </li> <li> <p>\u6570\u636e\u98ce\u9669:</p> <ul> <li>\u8ba8\u8bba\u4e86\u5f53\u6307\u4ee4\u4f9d\u8d56\u4e8e\u524d\u4e00\u6761\u6307\u4ee4\u7684\u7ed3\u679c\u65f6\u5982\u4f55\u5904\u7406\uff0c\u5305\u62ec\u6682\u505c(Stalling)\u548c\u8f6c\u53d1(Forwarding)\u6280\u672f\u3002</li> </ul> </li> <li> <p>\u63a7\u5236\u98ce\u9669:</p> <ul> <li>\u63cf\u8ff0\u4e86\u5206\u652f\u6307\u4ee4\u5982\u4f55\u5904\u7406\uff0c\u4ee5\u53ca\u5982\u4f55\u901a\u8fc7\u5206\u652f\u9884\u6d4b\u6765\u51cf\u5c11\u5206\u652f\u6307\u4ee4\u5e26\u6765\u7684\u6027\u80fd\u635f\u5931\u3002</li> </ul> </li> <li> <p>\u8d85\u6807\u91cf\u5904\u7406\u5668(Superscalar processors):</p> <ul> <li>\u4ecb\u7ecd\u4e86\u8d85\u6807\u91cf\u5904\u7406\u5668\u7684\u6982\u5ff5\uff0c\u5305\u62ec\u590d\u5236\u6d41\u6c34\u7ebf\u9636\u6bb5\u4ee5\u542f\u52a8\u591a\u4e2a\u6307\u4ee4\uff0c\u4ee5\u53ca\u5982\u4f55\u901a\u8fc7\u6307\u4ee4\u7ea7\u5e76\u884c\u6027\u6765\u63d0\u9ad8\u6027\u80fd\u3002</li> </ul> </li> <li> <p>\u6027\u80fd\u63d0\u5347\u7b56\u7565:</p> <ul> <li>\u8ba8\u8bba\u4e86\u63d0\u9ad8\u5355\u5904\u7406\u5668\u6838\u5fc3\u6027\u80fd\u7684\u7b56\u7565\uff0c\u5305\u62ec\u63d0\u9ad8\u65f6\u949f\u9891\u7387\u3001\u6d41\u6c34\u7ebf\u6df1\u5ea6\u548c\u8d85\u6807\u91cf\u6267\u884c\u3002</li> </ul> </li> <li> <p>\u591a\u6838\u5904\u7406\u5668:</p> <ul> <li>\u8ba8\u8bba\u4e86\u591a\u6838\u5904\u7406\u5668\u7684\u6982\u5ff5\uff0c\u4ee5\u53ca\u5982\u4f55\u5728\u4e0d\u9700\u8981\u7edd\u5bf9\u6027\u80fd\u65f6\uff0c\u5728\u80fd\u6548\u4f18\u5316\u7684\u6838\u5fc3\u4e0a\u8fd0\u884c\u4efb\u52a1\u3002</li> </ul> </li> <li> <p>\u6d41\u6c34\u7ebf\u4e0eISA\u8bbe\u8ba1:</p> <ul> <li>\u8ba8\u8bba\u4e86RISC-V ISA\u5982\u4f55\u4e3a\u6d41\u6c34\u7ebf\u8bbe\u8ba1\uff0c\u4ee5\u53ca\u5b83\u4e0ex86\u67b6\u6784\u7684\u5bf9\u6bd4\u3002</li> </ul> </li> <li> <p>\u7ed3\u8bba:</p> <ul> <li>\u603b\u7ed3\u4e86\u6d41\u6c34\u7ebf\u901a\u8fc7\u91cd\u53e0\u591a\u6761\u6307\u4ee4\u7684\u6267\u884c\u6765\u63d0\u9ad8\u541e\u5410\u91cf\uff0c\u4ee5\u53ca\u5982\u4f55\u901a\u8fc7\u7a0b\u5e8f\u5458/\u7f16\u8bd1\u5668\u7684\u5e2e\u52a9\u6765\u6700\u5927\u5316\u6027\u80fd\u3002</li> </ul> </li> </ol> <p>\u8fd9\u4efd\u8bb2\u5ea7\u5e7b\u706f\u7247\u4e3a\u7406\u89e3RISC-V\u6d41\u6c34\u7ebf\u5904\u7406\u5668\u7684\u8bbe\u8ba1\u548c\u6027\u80fd\u4f18\u5316\u63d0\u4f9b\u4e86\u6df1\u5165\u7684\u5206\u6790\uff0c\u6db5\u76d6\u4e86\u4ece\u57fa\u672c\u6982\u5ff5\u5230\u9ad8\u7ea7\u6280\u672f\u591a\u4e2a\u65b9\u9762\u3002</p>"},{"location":"cs61c/cs61c_lec15/","title":"Cs61c lec15","text":"<p><code>lec15.pdf</code>\u6587\u4ef6\u662f\u8ba1\u7b97\u673a\u79d1\u5b6661C\u6625\u5b632022\u8bfe\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u7531McMahon\u548cWeaver\u6559\u6388\uff0c\u4e3b\u8981\u8ba8\u8bba\u4e86\u8ba1\u7b97\u673a\u7f13\u5b58\uff08Caches\uff09\u7684\u6982\u5ff5\u3001\u5de5\u4f5c\u539f\u7406\u4ee5\u53ca\u5b83\u4eec\u5728\u73b0\u4ee3\u8ba1\u7b97\u673a\u67b6\u6784\u4e2d\u7684\u91cd\u8981\u6027\u3002\u4ee5\u4e0b\u662f\u8be5\u8bb2\u5ea7\u7684\u8be6\u7ec6\u5185\u5bb9:</p> <ol> <li> <p>\u8ba1\u7b97\u673a\u7ec4\u6210\u90e8\u5206:    - \u4ecb\u7ecd\u4e86\u8ba1\u7b97\u673a\u7684\u57fa\u672c\u7ec4\u6210\u90e8\u5206\uff0c\u5305\u62ec\u5904\u7406\u5668\u3001\u63a7\u5236\u5355\u5143\u3001\u6570\u636e\u8def\u5f84\u3001\u7a0b\u5e8f\u8ba1\u6570\u5668\uff08PC\uff09\u3001\u5bc4\u5b58\u5668\u3001\u7b97\u672f\u903b\u8f91\u5355\u5143\uff08ALU\uff09\u3001\u5185\u5b58\u4ee5\u53ca\u8f93\u5165/\u8f93\u51fa\u63a5\u53e3\u3002</p> </li> <li> <p>\u5904\u7406\u5668\u4e0eDRAM\u5ef6\u8fdf\u5dee\u8ddd:    - \u8ba8\u8bba\u4e86\u5904\u7406\u5668\u4e0e\u52a8\u6001\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668\uff08DRAM\uff09\u4e4b\u95f4\u7684\u8bbf\u95ee\u901f\u5ea6\u5dee\u5f02\uff0c\u4ee5\u53ca\u8fd9\u79cd\u5dee\u5f02\u5bf9CPU\u6027\u80fd\u7684\u6f5c\u5728\u5f71\u54cd\u3002</p> </li> <li> <p>\u56fe\u4e66\u9986\u7c7b\u6bd4:    - \u4f7f\u7528\u56fe\u4e66\u9986\u627e\u4e66\u7684\u7c7b\u6bd4\u6765\u89e3\u91ca\u7f13\u5b58\u7684\u6982\u5ff5\uff0c\u8bf4\u660e\u4e86\u5728\u5927\u56fe\u4e66\u9986\u4e2d\u67e5\u627e\u4e66\u7c4d\u7684\u65f6\u95f4\u5ef6\u8fdf\u95ee\u9898\uff0c\u4ee5\u53ca\u5982\u4f55\u901a\u8fc7\u5728\u684c\u9762\u4e0a\u4fdd\u7559\u4e00\u4e9b\u4e66\u7c4d\u6765\u51cf\u5c11\u67e5\u627e\u65f6\u95f4\u3002</p> </li> <li> <p>\u5185\u5b58\u7f13\u5b58:    - \u4ecb\u7ecd\u4e86\u5185\u5b58\u7f13\u5b58\u7684\u6982\u5ff5\uff0c\u5305\u62ec\u5b83\u7684\u529f\u80fd\u3001\u901a\u5e38\u4f4d\u4e8eCPU\u540c\u4e00\u82af\u7247\u4e0a\u7684\u7279\u70b9\uff0c\u4ee5\u53ca\u5b83\u6bd4DRAM\u66f4\u5feb\u4f46\u66f4\u6602\u8d35\u7684\u539f\u56e0\u3002</p> </li> <li> <p>\u5185\u5b58\u5c42\u6b21\u7ed3\u6784:    - \u63cf\u8ff0\u4e86\u4ece\u5bc4\u5b58\u5668\u5230\u7f13\u5b58\u3001\u4e3b\u5185\u5b58\u3001\u78c1\u76d8\u7684\u5185\u5b58\u5c42\u6b21\u7ed3\u6784\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u5c42\u6b21\u7684\u7279\u70b9\uff0c\u5982\u5927\u5c0f\u3001\u901f\u5ea6\u548c\u6210\u672c\u3002</p> </li> <li> <p>\u7f13\u5b58\u539f\u7406:    - \u89e3\u91ca\u4e86\u7f13\u5b58\u5de5\u4f5c\u7684\u4e24\u4e2a\u57fa\u672c\u539f\u5219:\u65f6\u95f4\u5c40\u90e8\u6027\uff08Temporal Locality\uff09\u548c\u7a7a\u95f4\u5c40\u90e8\u6027\uff08Spatial Locality\uff09\u3002</p> </li> <li> <p>\u5229\u7528\u5c40\u90e8\u6027:    - \u8fdb\u4e00\u6b65\u8ba8\u8bba\u4e86\u5982\u4f55\u901a\u8fc7\u65f6\u95f4\u5c40\u90e8\u6027\u548c\u7a7a\u95f4\u5c40\u90e8\u6027\u6765\u4f18\u5316\u7f13\u5b58\u6027\u80fd\u3002</p> </li> <li> <p>\u6dfb\u52a0\u7f13\u5b58\u5230\u8ba1\u7b97\u673a:    - \u5c55\u793a\u4e86\u5982\u4f55\u5728\u8ba1\u7b97\u673a\u67b6\u6784\u4e2d\u6dfb\u52a0\u7f13\u5b58\uff0c\u5e76\u8ba8\u8bba\u4e86\u5b83\u5982\u4f55\u4e0e\u5904\u7406\u5668\u548c\u5185\u5b58\u4ea4\u4e92\u3002</p> </li> <li> <p>\u5185\u5b58\u5f15\u7528\u6a21\u5f0f:    - \u901a\u8fc7\u56fe\u5f62\u5c55\u793a\u4e86\u826f\u597d\u7684\u5185\u5b58\u5f15\u7528\u6a21\u5f0f\uff0c\u5305\u62ec\u6307\u4ee4\u83b7\u53d6\u3001\u6808\u8bbf\u95ee\u3001\u6570\u636e\u8bbf\u95ee\u7b49\u3002</p> </li> <li> <p>\u6ca1\u6709\u7f13\u5b58\u7684\u5185\u5b58\u8bbf\u95ee:</p> <ul> <li>\u63cf\u8ff0\u4e86\u5728\u6ca1\u6709\u7f13\u5b58\u7684\u60c5\u51b5\u4e0b\uff0c\u5904\u7406\u5668\u5982\u4f55\u901a\u8fc7\u5185\u5b58\u5730\u5740\u6765\u52a0\u8f7d\u6570\u636e\u3002</li> </ul> </li> <li> <p>\u6709\u7f13\u5b58\u7684\u5185\u5b58\u8bbf\u95ee:</p> <ul> <li>\u8be6\u7ec6\u89e3\u91ca\u4e86\u5f53\u7f13\u5b58\u4ecb\u5165\u65f6\uff0c\u5185\u5b58\u8bbf\u95ee\u7684\u8fc7\u7a0b\uff0c\u5305\u62ec\u7f13\u5b58\u547d\u4e2d\u548c\u7f13\u5b58\u672a\u547d\u4e2d\u7684\u60c5\u51b5\u3002</li> </ul> </li> <li> <p>\u7f13\u5b58\u547d\u4e2d\u4e0e\u7f13\u5b58\u672a\u547d\u4e2d:</p> <ul> <li>\u5bf9\u6bd4\u4e86\u7f13\u5b58\u547d\u4e2d\u548c\u672a\u547d\u4e2d\u65f6\u7684\u5904\u7406\u8fc7\u7a0b\uff0c\u4ee5\u53ca\u5b83\u4eec\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u3002</li> </ul> </li> <li> <p>\u7f13\u5b58\u5b58\u50a8\u65b9\u5f0f:</p> <ul> <li>\u4ecb\u7ecd\u4e86\u7f13\u5b58\u4e2d\u7684\u4e09\u79cd\u6570\u636e\u5b58\u50a8\u65b9\u5f0f:\u5168\u5173\u8054\uff08Fully Associative\uff09\u3001\u76f4\u63a5\u6620\u5c04\uff08Direct Mapped\uff09\u548c\u96c6\u5408\u5173\u8054\uff08Set-Associative\uff09\u3002</li> </ul> </li> <li> <p>\u5168\u5173\u8054\u7f13\u5b58:</p> <ul> <li>\u8be6\u7ec6\u8ba8\u8bba\u4e86\u5168\u5173\u8054\u7f13\u5b58\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u5305\u62ec\u6807\u7b7e\uff08Tag\uff09\u3001\u6570\u636e\uff08Data\uff09\u3001\u6709\u6548\u4f4d\uff08Valid Bit\uff09\u548c\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\uff08LRU\uff09\u66ff\u6362\u7b56\u7565\u3002</li> </ul> </li> <li> <p>\u76f4\u63a5\u6620\u5c04\u7f13\u5b58:</p> <ul> <li>\u89e3\u91ca\u4e86\u76f4\u63a5\u6620\u5c04\u7f13\u5b58\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u5305\u62ec\u5b83\u7684\u5730\u5740\u5206\u89e3\u548c\u786c\u4ef6\u5b9e\u73b0\u3002</li> </ul> </li> <li> <p>\u96c6\u5408\u5173\u8054\u7f13\u5b58:</p> <ul> <li>\u8ba8\u8bba\u4e86\u96c6\u5408\u5173\u8054\u7f13\u5b58\u4f5c\u4e3a\u5168\u5173\u8054\u548c\u76f4\u63a5\u6620\u5c04\u7f13\u5b58\u4e4b\u95f4\u7684\u6298\u8877\u65b9\u6848\uff0c\u4ee5\u53ca\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u3002</li> </ul> </li> <li> <p>\u7f13\u5b58\u66ff\u6362\u7b56\u7565:</p> <ul> <li>\u4ecb\u7ecd\u4e86\u4e0d\u540c\u7684\u7f13\u5b58\u66ff\u6362\u7b56\u7565\uff0c\u5982\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\uff08LRU\uff09\u548c\u6700\u4e0d\u5e38\u7528\uff08LFU\uff09\u3002</li> </ul> </li> <li> <p>\u7f13\u5b58\u4e00\u81f4\u6027:</p> <ul> <li>\u8ba8\u8bba\u4e86\u5728\u5b58\u50a8\u6307\u4ee4\u6539\u53d8\u5185\u5b58\u503c\u65f6\uff0c\u5982\u4f55\u786e\u4fdd\u7f13\u5b58\u548c\u5185\u5b58\u4e4b\u95f4\u7684\u4fe1\u606f\u4e00\u81f4\u6027\u3002</li> </ul> </li> <li> <p>\u5199\u5165\u7b56\u7565:</p> <ul> <li>\u5bf9\u6bd4\u4e86\u5199\u901a\u8fc7\uff08Write-through\uff09\u548c\u5199\u56de\uff08Write-back\uff09\u4e24\u79cd\u7f13\u5b58\u5199\u5165\u7b56\u7565\u3002</li> </ul> </li> <li> <p>\u4e0b\u8282\u8bfe\u9884\u544a:</p> <ul> <li>\u9884\u544a\u4e86\u4e0b\u4e00\u8282\u8bfe\u7684\u5185\u5bb9\uff0c\u5305\u62ec\u7f13\u5b58\u6027\u80fd\u3001\u591a\u7ea7\u7f13\u5b58\u7b49\u4e3b\u9898\u3002</li> </ul> </li> </ol> <p>\u8fd9\u4e2a\u8bb2\u5ea7\u63d0\u4f9b\u4e86\u5bf9\u8ba1\u7b97\u673a\u7f13\u5b58\u7cfb\u7edf\u7684\u5168\u9762\u7406\u89e3\uff0c\u5305\u62ec\u5b83\u4eec\u7684\u8bbe\u8ba1\u3001\u5de5\u4f5c\u539f\u7406\u4ee5\u53ca\u5728\u63d0\u5347\u8ba1\u7b97\u673a\u6027\u80fd\u65b9\u9762\u7684\u4f5c\u7528\u3002</p>"},{"location":"cs61c/%E8%B7%B3%E8%BD%AC%E5%92%8C%E8%BF%94%E5%9B%9E%E7%9A%84%E5%87%BD%E6%95%B0/","title":"\u8df3\u8f6c\u548c\u8fd4\u56de\u7684\u51fd\u6570","text":"<p>\u5728\u6c47\u7f16\u8bed\u8a00\u4e2d\uff0c\u8df3\u8f6c\u548c\u8fd4\u56de\u662f\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u7684\u57fa\u672c\u673a\u5236\uff0c\u5c24\u5176\u662f\u5728\u51fd\u6570\u8c03\u7528\u548c\u5b50\u7a0b\u5e8f\u6267\u884c\u4e2d\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u8be6\u7ec6\u7684\u89e3\u91ca\u548c\u4f8b\u5b50\uff1a</p>"},{"location":"cs61c/%E8%B7%B3%E8%BD%AC%E5%92%8C%E8%BF%94%E5%9B%9E%E7%9A%84%E5%87%BD%E6%95%B0/#jal-jalr","title":"\u8df3\u8f6c\u6307\u4ee4\uff08<code>jal</code> \u548c <code>jalr</code>\uff09","text":"<ol> <li> <p><code>jal</code> - Jump-and-link:    - \u8fd9\u4e2a\u6307\u4ee4\u7528\u4e8e\u65e0\u6761\u4ef6\u8df3\u8f6c\u5230\u7a0b\u5e8f\u7684\u53e6\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5e76\u4e14\u5c06\u8fd4\u56de\u5730\u5740\u4fdd\u5b58\u5230\u5bc4\u5b58\u5668\u4e2d\u3002\u901a\u5e38\uff0c\u8fd4\u56de\u5730\u5740\u4fdd\u5b58\u5728<code>ra</code>\uff08\u8fd4\u56de\u5730\u5740\u5bc4\u5b58\u5668\uff09\u4e2d\u3002    - \u683c\u5f0f\uff1a<code>jal rd, label</code>    - \u4f8b\u5b50\uff1a      <pre><code>jal ra, func     # \u8c03\u7528func\u51fd\u6570\uff0c\u5e76\u5c06\u8fd4\u56de\u5730\u5740\u4fdd\u5b58\u5230ra\n</code></pre></p> </li> <li> <p><code>jalr</code> - Jump-and-link-register:    - \u8fd9\u4e2a\u6307\u4ee4\u7528\u4e8e\u6839\u636e\u5bc4\u5b58\u5668\u7684\u503c\u8df3\u8f6c\u5230\u4e00\u4e2a\u5730\u5740\uff0c\u5e76\u5c06\u8df3\u8f6c\u524d\u7684\u5bc4\u5b58\u5668\u503c\u4fdd\u5b58\u5230\u53e6\u4e00\u4e2a\u5bc4\u5b58\u5668\u3002\u5f53<code>imm</code>\uff08\u7acb\u5373\u6570\uff09\u4e3a0\u65f6\uff0c\u5b83\u53ef\u4ee5\u7528\u4e8e\u5b9e\u73b0\u51fd\u6570\u8fd4\u56de\u3002    - \u683c\u5f0f\uff1a<code>jalr rd, rs, imm</code>    - \u4f8b\u5b50\uff1a      <pre><code>jalr x0, ra, 0   # \u4ecera\u5bc4\u5b58\u5668\u8df3\u8f6c\uff0c\u5e76\u5c06\u8fd4\u56de\u5730\u5740\u4fdd\u5b58\u5230x0\uff08\u901a\u5e38x0\u59cb\u7ec8\u4e3a0\uff09\n</code></pre></p> </li> </ol>"},{"location":"cs61c/%E8%B7%B3%E8%BD%AC%E5%92%8C%E8%BF%94%E5%9B%9E%E7%9A%84%E5%87%BD%E6%95%B0/#jr-ret","title":"\u8fd4\u56de\u6307\u4ee4\uff08<code>jr</code> \u548c <code>ret</code>\uff09","text":"<ol> <li> <p><code>jr</code> - Jump-register:    - \u8fd9\u4e2a\u6307\u4ee4\u7528\u4e8e\u6839\u636e\u5bc4\u5b58\u5668\u7684\u503c\u8df3\u8f6c\u5230\u7a0b\u5e8f\u7684\u53e6\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5b83\u4e0d\u4fdd\u5b58\u8fd4\u56de\u5730\u5740\uff0c\u56e0\u6b64\u4e0d\u80fd\u76f4\u63a5\u7528\u4e8e\u51fd\u6570\u8fd4\u56de\u3002    - \u683c\u5f0f\uff1a<code>jr rs</code>    - \u4f8b\u5b50\uff1a      <pre><code>jr ra            # \u8df3\u8f6c\u5230ra\u5bc4\u5b58\u5668\u6307\u5411\u7684\u5730\u5740\n</code></pre></p> </li> <li> <p><code>ret</code>:    - <code>ret</code>\u4e0d\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u6c47\u7f16\u6307\u4ee4\uff0c\u800c\u662f<code>jalr</code>\u7684\u4e00\u79cd\u7279\u6b8a\u7528\u6cd5\uff0c\u7528\u4e8e\u4ece\u51fd\u6570\u8c03\u7528\u8fd4\u56de\u3002\u5b83\u901a\u8fc7\u5c06<code>jalr</code>\u7684<code>rd</code>\u8bbe\u7f6e\u4e3a\u76ee\u6807\u5bc4\u5b58\u5668\uff08\u901a\u5e38\u662f<code>zero</code>\u6216<code>x0</code>\uff09\uff0c<code>rs</code>\u8bbe\u7f6e\u4e3a\u5305\u542b\u8fd4\u56de\u5730\u5740\u7684\u5bc4\u5b58\u5668\uff08\u901a\u5e38\u662f<code>ra</code>\uff09\uff0c<code>imm</code>\u8bbe\u7f6e\u4e3a0\u6765\u5b9e\u73b0\u3002    - \u4f8b\u5b50\uff1a      <pre><code>jalr x0, ra, 0  # \u7b49\u540c\u4e8eret\u6307\u4ee4\uff0c\u4ecera\u8fd4\u56de\uff0c\u4e0d\u4fdd\u5b58\u8fd4\u56de\u5730\u5740\u5230\u4efb\u4f55\u5730\u65b9\n</code></pre></p> </li> </ol>"},{"location":"cs61c/%E8%B7%B3%E8%BD%AC%E5%92%8C%E8%BF%94%E5%9B%9E%E7%9A%84%E5%87%BD%E6%95%B0/#_1","title":"\u51fd\u6570\u8c03\u7528\u548c\u8fd4\u56de\u7684\u4f8b\u5b50","text":"<p>\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u8c03\u7528\u548c\u8fd4\u56de\u6d41\u7a0b\uff1a</p> <pre><code># \u51fd\u6570\u5b9a\u4e49\nfunc:\n    # \u51fd\u6570\u4f53\u7684\u4ee3\u7801\n    # ...\n\n    # \u8fd4\u56de\u8bed\u53e5\n    ret\n\n# \u4e3b\u7a0b\u5e8f\nmain:\n    # \u4fdd\u5b58\u8fd4\u56de\u5730\u5740\u5230ra\n    addi sp, sp, -4    # \u4e3a\u8fd4\u56de\u5730\u5740\u5206\u914d\u6808\u7a7a\u95f4\n    sw ra, 0(sp)       # \u5c06ra\u5b58\u50a8\u5230\u6808\u4e0a\n\n    # \u8c03\u7528\u51fd\u6570\n    jal ra, func\n\n    # \u6062\u590d\u8fd4\u56de\u5730\u5740\n    lw ra, 0(sp)       # \u4ece\u6808\u4e0a\u52a0\u8f7d\u8fd4\u56de\u5730\u5740\u5230ra\n    addi sp, sp, 4    # \u6062\u590d\u6808\u6307\u9488\n\n    # \u4e3b\u7a0b\u5e8f\u7ee7\u7eed\u6267\u884c\n    # ...\n</code></pre> <p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c<code>func</code>\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u4f7f\u7528<code>ret</code>\u6307\u4ee4\u6765\u8fd4\u56de\u5230\u8c03\u7528\u5b83\u7684\u4ee3\u7801\u3002\u5728\u4e3b\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u5c06\u8fd4\u56de\u5730\u5740\u4fdd\u5b58\u5230\u6808\u4e0a\uff0c\u7136\u540e\u8c03\u7528<code>func</code>\u51fd\u6570\u3002\u8c03\u7528\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u4ece\u6808\u4e0a\u6062\u590d\u8fd4\u56de\u5730\u5740\uff0c\u5e76\u7ee7\u7eed\u6267\u884c\u4e3b\u7a0b\u5e8f\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5177\u4f53\u7684\u6c47\u7f16\u8bed\u6cd5\u53ef\u80fd\u56e0\u4e0d\u540c\u7684\u67b6\u6784\u548c\u6c47\u7f16\u5668\u800c\u5f02\uff0c\u4e0a\u8ff0\u4f8b\u5b50\u4ec5\u4f9b\u53c2\u8003\u3002</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/","title":"\u89c6\u89c9SLAM\u5341\u56db\u8bb2","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#1","title":"1 \u9884\u5907\u77e5\u8bc6","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#11","title":"1.1 \u672c\u4e66\u8bb2\u4ec0\u4e48","text":"<p>simultaneous localization and mapping</p> <ul> <li>\u5b9a\u4f4d</li> <li>\u5730\u56fe\u6784\u5efa</li> <li>\u80cc\u666f\u77e5\u8bc6:<ul> <li>\u5c04\u5f71\u51e0\u4f55</li> <li>\u8ba1\u7b97\u673a\u89c6\u89c9</li> <li>\u72b6\u6001\u4f30\u8ba1\u7406\u8bba</li> <li>\u674e\u7fa4\u4e0e\u674e\u4ee3\u6570</li> </ul> </li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#12","title":"1.2 \u5982\u4f55\u4f7f\u7528\u672c\u4e66","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#121","title":"1.2.1 \u7ec4\u7ec7\u65b9\u5f0f","text":"<ul> <li>\u6570\u5b66\u57fa\u7840\u7bc7<ul> <li></li> </ul> </li> <li>\u5b9e\u8df5\u5e94\u7528\u7bc7<ul> <li></li> </ul> </li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#122","title":"1.2.2 \u4ee3\u7801","text":"<p>GitHub - gaoxiang12/slambook2: edition 2 of the slambook</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#123","title":"1.2.3 \u9762\u5411\u7684\u8bfb\u8005","text":"<ul> <li>\u57fa\u7840\u77e5\u8bc6:<ul> <li>\u9ad8\u6570\u7ebf\u4ee3\u6982\u7387\u8bba</li> <li>C++\u8bed\u8a00\u57fa\u7840\uff08C++\u6807\u51c6\u5e93\uff0c\u6a21\u677f\u7c7b\uff0c\u4e00\u90e8\u5206 C++11 \uff09</li> <li>Linux \u57fa\u7840</li> </ul> </li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#13","title":"1.3 \u98ce\u683c\u7ea6\u5b9a","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#14","title":"1.4 \u81f4\u8c22\u548c\u58f0\u660e","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#15","title":"1.5 \u4e60\u9898","text":"<ul> <li>\u9898\u76ee\uff1a\u6709\u7ebf\u6027\u65b9\u7a0b \\(A x=b\\)\uff0c\u82e5\u5df2\u77e5 \\(A, b\\)\uff0c\u9700\u8981\u6c42\u89e3 x\uff0c\u8be5\u5982\u4f55\u6c42\u89e3\uff1f\u8fd9\u5bf9 A \u548c b \u6709\u54ea\u4e9b\u8981\u6c42\uff1f\u63d0\u793a\uff1a\u4ece A \u7684\u7ef4\u5ea6\u548c\u79e9\u89d2\u5ea6\u6765\u5206\u6790\u3002</li> <li>\u7b54\u6848\uff1a\u7ebf\u6027\u65b9\u7a0b\u7ec4 \\(Ax = b\\) \u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u65b9\u6cd5\u6c42\u89e3\uff0c\u5982\u9ad8\u65af\u6d88\u5143\u6cd5\u3001\u77e9\u9635\u9006\u6cd5\u7b49\u3002\u8981\u6c42 \\(A\\) \u662f\u4e00\u4e2a\u65b9\u9635\u4e14\u53ef\u9006\uff08\u5373 \\(A\\) \u7684\u884c\u5217\u5f0f\u4e0d\u4e3a\u96f6\uff09\uff0c\u8fd9\u6837\u65b9\u7a0b\u624d\u6709\u552f\u4e00\u89e3\u3002\u5982\u679c \\(A\\) \u4e0d\u662f\u65b9\u9635\uff0c\u9700\u8981 \\(A\\) \u7684\u79e9\u7b49\u4e8e\u5217\u6570\u4e14\u7b49\u4e8e\u589e\u5e7f\u77e9\u9635 \\(\\displaystyle [A|b]\\) \u7684\u79e9\uff0c\u8fd9\u6837\u65b9\u7a0b\u7ec4\u624d\u6709\u89e3\u3002</li> <li>\u9898\u76ee\uff1a\u9ad8\u65af\u5206\u5e03\u662f\u4ec0\u4e48\uff1f\u5b83\u7684\u4e00\u7ef4\u5f62\u5f0f\u662f\u4ec0\u4e48\u6837\u5b50\uff1f\u5b83\u7684\u9ad8\u7ef4\u5f62\u5f0f\u662f\u4ec0\u4e48\u6837\u5b50\uff1f</li> <li>\u7b54\u6848\uff1a\u9ad8\u65af\u5206\u5e03\uff0c\u4e5f\u79f0\u4e3a\u6b63\u6001\u5206\u5e03\uff0c\u662f\u4e00\u79cd\u8fde\u7eed\u6982\u7387\u5206\u5e03\u3002\u4e00\u7ef4\u9ad8\u65af\u5206\u5e03\u7684\u6570\u5b66\u8868\u8fbe\u5f0f\u4e3a \\(\\displaystyle f (x) = \\frac{1}{\\sigma\\sqrt{2\\pi}} e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}\\)\uff0c\u5176\u4e2d \\(\\displaystyle \\mu\\) \u662f\u5747\u503c\uff0c\\(\\displaystyle \\sigma\\) \u662f\u6807\u51c6\u5dee\u3002\u9ad8\u7ef4\u9ad8\u65af\u5206\u5e03\u662f\u4e00\u7ef4\u9ad8\u65af\u5206\u5e03\u5728\u591a\u7ef4\u7a7a\u95f4\u7684\u63a8\u5e7f\uff0c\u5176\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4e3a \\(\\displaystyle N (\\mathbf{x}; \\mathbf{\\mu}, \\Sigma)\\)\uff0c\u5176\u4e2d \\(\\displaystyle \\mathbf{\\mu}\\) \u662f\u5747\u503c\u5411\u91cf\uff0c\\(\\displaystyle \\Sigma\\) \u662f\u534f\u65b9\u5dee\u77e9\u9635\u3002</li> <li>\u9898\u76ee\uff1a\u4f60\u77e5\u9053 C++11 \u6807\u51c6\u5417\uff1f\u4f60\u542c\u8bf4\u8fc7\u6216\u7528\u8fc7\u5176\u4e2d\u54ea\u4e9b\u65b0\u7279\u6027\uff1f\u6709\u6ca1\u6709\u5176\u4ed6\u7684\u6807\u51c6\uff1f</li> <li>\u7b54\u6848\uff1a\u662f\u7684\uff0cC++11 \u662f C++ \u8bed\u8a00\u7684\u4e00\u4e2a\u91cd\u8981\u6807\u51c6\uff0c\u5b83\u5f15\u5165\u4e86\u8bb8\u591a\u65b0\u7279\u6027\uff0c\u5982\u81ea\u52a8\u7c7b\u578b\u63a8\u5bfc\uff08auto\uff09\u3001\u57fa\u4e8e\u8303\u56f4\u7684 for \u5faa\u73af\u3001lambda \u8868\u8fbe\u5f0f\u3001\u667a\u80fd\u6307\u9488\u7b49\u3002\u9664\u4e86 C++11\uff0c\u8fd8\u6709 C++14\u3001C++17 \u548c C++20 \u7b49\u540e\u7eed\u6807\u51c6\uff0c\u5b83\u4eec\u4e5f\u5f15\u5165\u4e86\u65b0\u7684\u7279\u6027\u548c\u6539\u8fdb\u3002</li> <li>\u9898\u76ee\uff1a\u5982\u4f55\u5728 Ubuntu \u7cfb\u7edf\u4e2d\u5b89\u88c5\u8f6f\u4ef6\uff08\u4e0d\u6253\u5f00\u8f6f\u4ef6\u4e2d\u5fc3\u7684\u60c5\u51b5\u4e0b\uff09\uff1f\u8fd9\u4e9b\u8f6f\u4ef6\u88ab\u5b89\u88c5\u5728\u4ec0\u4e48\u5730\u65b9\uff1f\u5982\u679c\u53ea\u77e5\u9053\u6a21\u7cca\u7684\u8f6f\u4ef6\u540d\u79f0\uff08\u6bd4\u5982\u60f3\u8981\u88c5\u4e00\u4e2a\u540d\u79f0\u4e2d\u542b\u6709 Eigen \u7684\u5e93\uff09\uff0c\u5e94\u8be5\u5982\u4f55\u5b89\u88c5\u5b83\uff1f</li> <li>\u7b54\u6848\uff1a</li> <li>\u8f6f\u4ef6\u5b89\u88c5\uff1a\u5728 Ubuntu \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u5de5\u5177 <code>apt</code> \u6765\u5b89\u88c5\u8f6f\u4ef6\u3002\u57fa\u672c\u547d\u4ee4\u4e3a <code>sudo apt install [package-name]</code>\u3002</li> <li>\u5b89\u88c5\u4f4d\u7f6e\uff1a\u8f6f\u4ef6\u901a\u5e38\u88ab\u5b89\u88c5\u5728 <code>/usr/</code> \u76ee\u5f55\u4e0b\uff0c\u4f46\u5177\u4f53\u7684\u6587\u4ef6\u53ef\u80fd\u5206\u5e03\u5728\u591a\u4e2a\u5b50\u76ee\u5f55\u4e2d\u3002</li> <li>\u6a21\u7cca\u540d\u79f0\u5b89\u88c5\uff1a\u5982\u679c\u53ea\u77e5\u9053\u8f6f\u4ef6\u540d\u79f0\u7684\u4e00\u90e8\u5206\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>apt search</code> \u547d\u4ee4\u6765\u641c\u7d22\u3002\u4f8b\u5982\uff0c<code>sudo apt search eigen</code> \u53ef\u4ee5\u5e2e\u52a9\u627e\u5230\u6240\u6709\u5305\u542b \"eigen\" \u7684\u8f6f\u4ef6\u5305\u3002</li> <li>\u9898\u76ee\uff1a*\u82b1\u4e00\u4e2a\u5c0f\u65f6\u5b66\u4e60 Vim\uff0c\u56e0\u4e3a\u4f60\u8fdf\u65e9\u4f1a\u7528\u5b83\u3002\u4f60\u53ef\u4ee5\u5728\u7ec8\u7aef\u4e2d\u8f93\u5165 vimtutor \u9605\u8bfb\u4e00\u904d\u6240\u6709\u5185\u5bb9\u3002\u6211\u4eec\u4e0d\u9700\u8981\u4f60\u975e\u5e38\u719f\u7ec3\u5730\u64cd\u4f5c\u5b83\uff0c\u53ea\u8981\u80fd\u591f\u5728\u5b66\u4e60\u672c\u4e66\u7684\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u5b83\u8f93\u5165\u4ee3\u7801\u5373\u53ef\u3002\u4e0d\u8981\u5728\u5b83\u7684\u63d2\u4ef6\u4e0a\u6d6a\u8d39\u65f6\u95f4\uff0c\u4e0d\u8981\u60f3\u7740\u628a Vim \u7528\u6210 IDE\uff0c\u6211\u4eec\u53ea\u7528\u5b83\u505a\u6587\u672c\u7f16\u8f91\u7684\u5de5\u4f5c\u3002</li> <li>\u7b54\u6848:<ul> <li>vim \u6839\u672c\u4e0d\u719f\u7ec3\u634f</li> </ul> </li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#2-slam","title":"2 \u521d\u8bc6 SLAM","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#21","title":"2.1 \u5f15\u5b50: \u5c0f\u841d\u535c\u7684\u4f8b\u5b50","text":"<ul> <li>\u81ea\u4e3b\u8fd0\u52a8\u80fd\u529b</li> <li>\u611f\u77e5\u5468\u8fb9\u73af\u5883<ul> <li>\u72b6\u6001</li> <li>\u73af\u5883</li> </ul> </li> <li>\u5b89\u88c5\u4e8e\u73af\u5883\u4e2d\uff08\u4e0d\u592a\u597d\u53cd\u6b63\uff09</li> <li>\u673a\u5668\u4eba\u672c\u4f53\u4e0a<ul> <li>\u6fc0\u5149 SLAM</li> <li>\u89c6\u89c9 SLAM\uff08\u672c\u4e66\u91cd\u70b9\uff09<ul> <li>\u5355\u76ee\uff08Monocular\uff09<ul> <li>\u53ea\u80fd\u7528\u4e00\u4e2a\u6444\u50cf\u5934</li> <li>\u8ddd\u79bb\u611f<ul> <li>motion</li> <li>Structure</li> <li>Disparity</li> <li>Scale<ul> <li>Scale Ambiguity</li> </ul> </li> <li>\u4f46\u662f\u65e0\u6cd5\u786e\u5b9a\u6df1\u5ea6</li> </ul> </li> </ul> </li> <li>\u53cc\u76ee\uff08Sterco\uff09<ul> <li>\u4e24\u4e2a\u76f8\u673a\u7684\u8ddd\u79bb\uff08\u57fa\u7ebf Baseline\uff09\u5df2\u77e5</li> <li>\u914d\u7f6e\u4e0e\u6807\u5b9a\u6bd4\u8f83\u590d\u6742</li> </ul> </li> <li>\u6df1\u5ea6\uff08RGB-D\uff09<ul> <li>\u7ea2\u5916\u7ed3\u6784\u5173 Time-of-Flight\uff08ToF\uff09</li> <li>\u4e3b\u8981\u7528\u5728\u5ba4\u5185\uff0c\u5ba4\u5916\u4f1a\u6709\u5f88\u591a\u5f71\u54cd</li> </ul> </li> <li>\u8fd8\u6709\u4e00\u4e9b\u975e\u4e3b\u6d41\u7684: \u5168\u666f\uff0cEvent</li> </ul> </li> </ul> </li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#22-slam","title":"2.2 \u7ecf\u5178\u89c6\u89c9 SLAM \u6846\u67b6","text":"<ul> <li>\u5728\u5916\u754c\u6362\u51e0\u4e2a\u6bd4\u8f83\u7a33\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0cSLAM \u6280\u672f\u5df2\u7ecf\u6bd4\u8f83\u6210\u719f</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#221","title":"2.2.1 \u89c6\u89c9\u91cc\u7a0b\u8ba1","text":"<ul> <li>\u53ea\u901a\u8fc7\u89c6\u89c9\u91cc\u7a0b\u8ba1\u6765\u4f30\u8ba1\u8f68\u8ff9\u4f1a\u51fa\u73b0\u7d2f\u79ef\u6f02\u79fb\uff08Accumulating Drift\uff09\u3002</li> <li>\u6240\u4ee5\u9700\u8981\u56de\u73af\u68c0\u6d4b\u4e0e\u540e\u7aef\u4f18\u5316</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#222","title":"2.2.2 \u540e\u7aef\u4f18\u5316","text":"<ul> <li>\u6700\u5927\u540e\u9a8c\u6982\u7387\u4f30\u8ba1\uff08Maximum-a-Posteriori MAP\uff09</li> <li>\u524d\u7aef<ul> <li>\u56fe\u50cf\u7684\u7279\u5f81\u63d0\u53d6\u4e0e\u5339\u914d</li> </ul> </li> <li>\u540e\u7aef<ul> <li>\u6ee4\u6ce2\u4e0e\u975e\u7ebf\u6027\u7b97\u6cd5</li> </ul> </li> <li>\u5bf9\u8fd0\u52a8\u4e3b\u4f53\u81ea\u8eab\u548c\u5468\u56f4\u73af\u5883\u7a7a\u95f4\u4e0d\u786e\u5b9a\u6027\u7684\u4f30\u8ba1</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#223","title":"2.2.3 \u56de\u73af\u68c0\u6d4b","text":"<ul> <li>\u95ed\u73af\u68c0\u6d4b</li> <li>\u8bc6\u522b\u5230\u8fc7\u7684\u573a\u666f</li> <li>\u5229\u7528\u56fe\u50cf\u7684\u76f8\u4f3c\u6027</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#224","title":"2.2.4 \u5efa\u56fe","text":"<ul> <li>\u5ea6\u91cf\u5730\u56fe<ul> <li>Sparse<ul> <li>Landmark</li> <li>\u5b9a\u4f4d\u7528</li> </ul> </li> <li>Dense<ul> <li>Grid / Vocel</li> <li>\u5bfc\u822a\u7528</li> </ul> </li> </ul> </li> <li>\u62d3\u6251\u5730\u56fe     Graph</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#23-slam","title":"2.3 SLAM \u95ee\u9898\u7684\u6570\u5b66\u8868\u8ff0","text":"<ul> <li>\u8fd0\u52a8\u65b9\u7a0b<ul> <li>\\(\\displaystyle \\quad\\boldsymbol{x}_k=f\\left(\\boldsymbol{x}_{k-1},\\boldsymbol{u}_k,\\boldsymbol{w}_k\\right).\\)<ul> <li>\\(\\displaystyle \\boldsymbol{u}_{k}\\) \u662f\u8fd0\u52a8\u4f20\u611f\u5668\u7684\u8f93\u5165</li> <li>\\(\\displaystyle \\boldsymbol{w}_{k}\\) \u662f\u8fc7\u7a0b\u4e2d\u52a0\u5165\u7684\u566a\u58f0</li> </ul> </li> </ul> </li> <li>\u89c2\u6d4b\u65b9\u7a0b<ul> <li>\\(\\displaystyle \\boldsymbol{z}_{k,j} = h (\\boldsymbol{y}_{j},\\boldsymbol{x}_{k},\\boldsymbol{v}_{k,j})\\)<ul> <li>\\(\\displaystyle \\boldsymbol{v}_{k,j}\\) \u662f\u89c2\u6d4b\u91cc\u7684\u566a\u58f0</li> </ul> </li> </ul> </li> <li>\u53c8\u5f88\u591a\u53c2\u6570\u5316\u7684\u65b9\u5f0f</li> <li>\u53ef\u4ee5\u603b\u7ed3\u4e3a\u5982\u4e0b\u4e24\u4e2a\u65b9\u7a0b</li> </ul> \\[ \\begin{cases}\\boldsymbol{x}_k=f\\left(\\boldsymbol{x}_{k-1},\\boldsymbol{u}_k,\\boldsymbol{w}_k\\right),&amp;k=1,\\cdots,K\\\\\\boldsymbol{z}_{k,j}=h\\left(\\boldsymbol{y}_j,\\boldsymbol{x}_k,\\boldsymbol{v}_{k,j}\\right),&amp;(k,j)\\in\\mathcal{O}\\end{cases}. \\] <ul> <li>\u77e5\u9053\u8fd0\u52a8\u6d4b\u91cf\u7684\u8bfb\u6570 \\(\\displaystyle \\boldsymbol{u}\\) \u548c\u4f20\u611f\u5668\u7684\u8bfb\u6570 \\(\\displaystyle \\boldsymbol{z}\\)\uff0c\u5982\u4f55\u6c42\u89e3\u5b9a\u4f4d\u95ee\u9898\u548c\u5efa\u56fe\u95ee\u9898\u3002<ul> <li>\u72b6\u6001\u4f30\u8ba1\u95ee\u9898: \u5982\u4f55\u901a\u8fc7\u5e26\u6709\u566a\u58f0\u7684\u6d4b\u91cf\u6570\u636e\uff0c\u4f30\u8ba1\u5185\u90e8\u7684\u3001\u9690\u85cf\u7740\u7684\u72b6\u6001\u53d8\u91cf</li> </ul> </li> <li>Linear Gaussian -&gt; Kalman Filter</li> <li>Non-Linear Non-Gaussian -&gt; Extended Kalman Filter \u548c\u975e\u7ebf\u6027\u4f18\u5316</li> <li>EKF -&gt; Particle Filter -&gt; Graph Optimization</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#24","title":"2.4 \u5b9e\u8df5: \u7f16\u7a0b\u57fa\u7840","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#241-linux","title":"2.4.1 \u5b89\u88c5 Linux \u64cd\u4f5c\u7cfb\u7edf","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#242-hello-slam","title":"2.4.2 Hello SLAM","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#243-cmake","title":"2.4.3 \u4f7f\u7528 cmake","text":"<pre><code>cmake_minimum_required( VERSION 2.8)\n\nproject(HelloSLAM)\n\nadd_executable(helloSLAM helloSLAM.cpp)\n</code></pre> <p>\u5bf9\u4e2d\u95f4\u6587\u4ef6\u7684\u5904\u7406:</p> <pre><code>mkdir build\ncd build\ncmake ..\nmake\n</code></pre>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#244","title":"2.4.4 \u4f7f\u7528\u5e93","text":"<pre><code>add_library(hello libHelloSLAM.cpp)\n</code></pre> <ul> <li>\u9759\u6001\u5e93<ul> <li>.a \u4f5c\u4e3a\u540e\u7f00\u540d\uff0c\u6bcf\u6b21\u8c03\u7528\u90fd\u6709\u4e00\u4e2a\u526f\u672c</li> </ul> </li> <li>\u5171\u4eab\u5e93<ul> <li>.so\uff0c\u53ea\u6709\u4e00\u4e2a\u526f\u672c</li> </ul> </li> </ul> <pre><code>add_library(hello_shared SHARED libHelloSLAM.cpp)\n</code></pre> <ul> <li>\u8fd8\u8981\u4e00\u4e2a\u5934\u6587\u4ef6\u6765\u8bf4\u660e\u5e93\u91cc\u90fd\u6709\u4ec0\u4e48</li> </ul> <pre><code>#ifndef LIBHELLOSLAM_H_\n#define LIBHELLOSLAM_H_\n\nvoid printHello()\n\n#endif\n</code></pre> <ul> <li>\u6700\u540e\u5199\u4e00\u4e2a\u53ef\u6267\u884c\u7a0b\u5e8f:</li> </ul> <pre><code>#include \"libHelloSLAM.h\"\n\nint main(int argc, char **argv) {\n    printHello();\n    return 0;   \n}\n</code></pre> <ul> <li>\u5728 CMakeLists. txt \u4e2d\u6dfb\u52a0\u53ef\u6267\u884c\u547d\u4ee4\u7684\u751f\u6210\u547d\u4ee4\uff0c\u94fe\u63a5\u5230\u5e93\u4e0a:</li> </ul> <pre><code>add_executable(useHello useHello.cpp)\ntarget_link_libraries(useHello hello_shared)\n</code></pre>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#245-ide","title":"2.4.5 \u4f7f\u7528 IDE","text":"<ul> <li>KDevelop</li> <li>Clion</li> <li>\u8fd8\u6ca1\u5199</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#3","title":"3 \u4e09\u7ef4\u7a7a\u95f4\u521a\u4f53\u8fd0\u52a8","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#31","title":"3.1 \u65cb\u8f6c\u77e9\u9635","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#311","title":"3.1.1 \u70b9\u3001\u5411\u91cf\u548c\u5750\u6807\u7cfb","text":"<ul> <li>Skew-symmetric Matrix</li> </ul> \\[ a\\times b =  \\begin{Vmatrix}e_1&amp;e_2&amp;e_3\\\\ \\\\ a_1&amp;a_2&amp;a_3\\\\ \\\\ b_1&amp;b_2&amp;b_3 \\\\ \\end{Vmatrix} = \\begin{bmatrix} a_2b_3-a_3b_2\\\\ \\\\ a_3b_1-a_1b_3\\\\ \\\\ a_1b_2-a_2b_1  \\end{bmatrix} = \\begin{bmatrix}  0&amp;-a_3&amp;a_2\\\\ \\\\ a_3&amp;0&amp;-a_1\\\\ \\\\ -a_2&amp;a_1&amp;0  \\end{bmatrix} \\boldsymbol{b}\\overset{\\mathrm{def}}{\\operatorname*{=}}\\boldsymbol{a}^{\\wedge}\\boldsymbol{b}. \\] <ul> <li>\u4e8e\u662f\u5c31\u628a\u5916\u79ef\u53d8\u6210\u4e86\u7ebf\u6027\u8fd0\u7b97</li> <li>\u5373</li> </ul> \\[ \\displaystyle \\boldsymbol{a}^{\\wedge}=\\begin{bmatrix} 0  &amp; -a_{3}  &amp; a_{2} \\\\ a_{3} &amp; 0 &amp; -a_{1} \\\\ -a_{2} &amp; a_{1} &amp; 0 \\end{bmatrix} \\]"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#312","title":"3.1.2 \u5750\u6807\u7cfb\u95f4\u7684\u6b27\u5f0f\u53d8\u6362","text":"<ul> <li>Euclidean Transform</li> </ul> \\[ \\begin{bmatrix}a_1\\\\ \\\\ a_2\\\\\\\\a_3\\end{bmatrix}=\\begin{bmatrix}e_1^\\mathrm{T}e_1^{\\prime}&amp;e_1^\\mathrm{T}e_2^{\\prime}&amp;e_1^\\mathrm{T}e_3^{\\prime}\\\\e_2^\\mathrm{T}e_1^{\\prime}&amp;e_2^\\mathrm{T}e_2^{\\prime}&amp;e_2^\\mathrm{T}e_3^{\\prime}\\\\e_3^\\mathrm{T}e_1^{\\prime}&amp;e_3^\\mathrm{T}e_2^{\\prime}&amp;e_3^\\mathrm{T}e_3^{\\prime}\\end{bmatrix}\\begin{bmatrix}a_1^{\\prime}\\\\\\\\a_2^{\\prime}\\\\\\\\a_3^{\\prime}\\end{bmatrix}\\stackrel{\\mathrm{def}}{=}Ra^{\\prime} \\] <ul> <li>\\(\\displaystyle \\boldsymbol{R}\\) \u662f\u65cb\u8f6c\u77e9\u9635\u3001\u65b9\u5411\u4f59\u5f26\u77e9\u9635</li> <li>Special Orthogonal Group \\(\\displaystyle \\mathrm{SO}(n)=\\{\\boldsymbol{R}\\in \\mathbb{R}^{n \\times n}|\\boldsymbol{R}\\boldsymbol{R}^{\\mathrm{T}}=\\boldsymbol{I},\\det(\\boldsymbol{R})=1\\}\\)</li> <li>\\(\\displaystyle a^{\\prime}=R^{-1}a=R^{\\intercal}a.\\)</li> <li>\u65cb\u8f6c+\u5e73\u79fb: \\(\\displaystyle a^{\\prime}=Ra+t.\\)</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#313","title":"3.1.3 \u53d8\u6362\u77e9\u9635\u4e0e\u9f50\u6b21\u5750\u6807","text":"<ul> <li>\u4f46\u662f\u8fd9\u91cc\u7684\u53d8\u6362\u5173\u7cfb\u4e0d\u662f\u4e00\u4e2a\u7ebf\u6027\u5173\u7cfb</li> <li>\\(\\displaystyle c=R_2\\left(R_1a+t_1\\right)+t_2\\)</li> <li>\u6211\u4eec\u6539\u5199\u4e00\u4e0b\u5f62\u5f0f:<ul> <li>\\(\\displaystyle \\begin{bmatrix}a'\\\\\\\\1\\end{bmatrix}=\\begin{bmatrix}R&amp;t\\\\\\\\\\mathbf{0}^\\mathrm{T}&amp;1\\end{bmatrix}\\begin{bmatrix}a\\\\\\\\1\\end{bmatrix}\\overset{\\mathrm{def}}{=}T\\begin{bmatrix}a\\\\\\\\1\\end{bmatrix}\\)</li> <li>\u8fd9\u5c31\u662f\u9f50\u6b21\u5750\u6807\uff0c\\(\\displaystyle \\boldsymbol{T}\\) \u79f0\u4e3a\u53d8\u6362\u77e9\u9635\uff08Transform matrix\uff09</li> </ul> </li> <li>\\(\\displaystyle \\tilde{b}=T_1\\tilde{\\boldsymbol{a}}, \\tilde{\\boldsymbol{c}}=T_2\\tilde{\\boldsymbol{b}}\\quad\\Rightarrow\\tilde{\\boldsymbol{c}}=T_2T_1\\tilde{\\boldsymbol{a}}.\\)</li> <li>\u5e76\u4e14 \\(\\displaystyle \\boldsymbol{T}\\) \u79f0\u4e3a\u7279\u6b8a\u6b27\u5f0f\u7fa4\uff08Special Euclidean Group\uff09<ul> <li>\\(\\displaystyle \\mathrm{SE}(3)=\\left\\{T=\\begin{bmatrix}R&amp;t\\\\\\mathbf{0}^\\mathrm{T}&amp;1\\end{bmatrix}\\in\\mathbb{R}^{4\\times4}|\\boldsymbol{R}\\in\\mathrm{SO}(3),\\boldsymbol{t}\\in\\mathbb{R}^3\\right\\}\\)</li> </ul> </li> <li>\\(\\displaystyle T^{-1}=\\begin{bmatrix}R^\\mathrm{T}&amp;-R^\\mathrm{T}t\\\\0^\\mathrm{T}&amp;1\\end{bmatrix}\\)</li> <li>\u5728 C++\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u4f7f\u7528\u8fd0\u7b97\u7b26\u91cd\u8f7d\u6765\u5904\u7406\u9f50\u6b21\u548c\u975e\u9f50\u6b21\u7684\u60c5\u51b5</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#32-eigen","title":"3.2 \u5b9e\u8df5:Eigen","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n#include &lt;ctime&gt;\n\n#include &lt;eigen3&gt;\nusing namespace Eigen;\n\n#define MATRIX_SIZE 50\n\nint main(int argc, char **argv) {\n    Matrix&lt;float, 2, 3&gt; matrix_23;\n// \u5982\u4e0b\u90fd\u662f\u4e09\u7ef4\u5411\u91cf\n    Vector3d v_3d;\n    Matrix&lt;float, 3, 1&gt; vd_3d;\n// \u5982\u4e0b\u662f3*3\u77e9\u9635\n    Matrix3d matrix_33 = Matrix3d::Zero();\n// \u4e24\u4e2a\u52a8\u6001\u5206\u914d\n    Matrix&lt;double, Dynamic, Dynamic&gt; matrix_dynamic;\n    MatrixXd matrix_x;\n\n    matrix_23 &lt;&lt; 1, 2, 3, 4, 5, 6;\n    cout&lt;&lt; \"matrix 2*3 from 1 to 6: \\n\" &lt;&lt; matrix_23 &lt;&lt; endl;\n\n    cout &lt;&lt; \"print matrix 2*3:\" &lt;&lt; endl;\n    for (int i = 0; i &lt; 2; i++) {\n        for (int j = 0; j &lt; 3; j+) cout &lt;&lt; matrix_23(i, j) &lt;&lt; \"\\t\";\n        cout &lt;&lt; endl;\n    }\n\n    v_3d &lt;&lt; 3, 2, 1;\n    vd_3d &lt;&lt; 4, 5, 6;\n\n    Matrix&lt;double, 2, 1&gt; result = matrix_23.cast&lt;double&gt;() * v_3d;\n    cout &lt;&lt; \"[1, 2, 3; 4, 5, 6] * [3, 2, 1] =\" &lt;&lt; result.transpose() &lt;&lt; endl;\n\n    matrix_22 = Matrix3d::Random();\n\n    // \u4e00\u4e9b\u77e9\u9635\u7684\u64cd\u4f5c:\n    // transpose()\n    // sum()\n    // trace()\n    // inverse()\n    // determinant()\n\n    SelfAdjointEigenSolver&lt;Matrix3d&gt; eigen_solver(matrix_33.transpose() * matrix_33);\n    cout &lt;&lt; eigen_solver.eigenvalues() &lt;&lt; endl;\n    cout &lt;&lt; eigen_solver.eigenvectors() &lt;&lt; endl;\n\n    // solve the equation\n    Matrix&lt;double, MATRIX_SIZE, MATRIX_SIZE&gt; matrix_NN = MatrixXd::Random(MATRIX_SIZE, MATRIX_SIZE);\n    matrix_NN = matrix_NN * matrix_NN.transpose()\n    Matrix&lt;double, MATRIX_SIZE, 1&gt; v_Nd = MatrixXd::random(MATRIX_SIZE, 1);\n\n    // \u7b2c\u4e00\u79cd:\u76f4\u63a5\u6c42\u9006\n    Matrix&lt;double, MATRIX_SIZE, 1&gt; x = matrix_NN.inverse() * v_Nd;\n\n    // \u7b2c\u4e8c\u79cd:\u77e9\u9635\u5206\u89e3\n    x = matrix_NN.colPivHouseholderQr().solve(v_Nd);\n\n}\n</code></pre> <ul> <li>Eigen \u4e0d\u652f\u6301\u81ea\u52a8\u7c7b\u578b\u63d0\u5347\uff0c\u5373\u4e0d\u4f1a\u9690\u5f0f\u8f6c\u6362</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#33","title":"3.3 \u65cb\u8f6c\u5411\u91cf\u548c\u6b27\u62c9\u89d2","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#331","title":"3.3.1 \u65cb\u8f6c\u5411\u91cf","text":"<ul> <li>Axis-Angle</li> <li>Rodrigues's Formula<ul> <li>\\(\\displaystyle \\boldsymbol{R}=\\cos\\theta\\boldsymbol{I}+\\left(1-\\cos\\theta\\right)\\boldsymbol{n}\\boldsymbol{n}^\\mathrm{T}+\\sin\\theta\\boldsymbol{n}^\\mathrm{\\wedge}.\\)</li> </ul> </li> </ul> \\[ \\begin{aligned} \\mathrm{tr}\\left(R\\right)&amp; =\\cos\\theta\\operatorname{tr}\\left(\\boldsymbol{I}\\right)+\\left(1-\\cos\\theta\\right)\\operatorname{tr}\\left(\\boldsymbol{n}\\boldsymbol{n}^\\mathrm{T}\\right)+\\sin\\theta\\operatorname{tr}(\\boldsymbol{n}^\\mathrm{\\Lambda}) \\\\ &amp;=3\\cos\\theta+(1-\\cos\\theta) \\\\ &amp;=1+2\\cos\\theta  \\end{aligned} \\] <p>thus:</p> \\[ \\theta=\\arccos\\frac{\\mathrm{tr}(R)-1}{2}. \\] \\[ Rn=n. \\] <ul> <li>\u5373 \\(\\displaystyle \\boldsymbol{n}\\) \u662f\u77e9\u9635 \\(\\displaystyle \\boldsymbol{R}\\) \u7279\u5f81\u503c 1 \u5bf9\u5e94\u7684\u7279\u8bca\u5411\u91cf</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#332","title":"3.3.2 \u6b27\u62c9\u89d2","text":"<ul> <li>\u6bd4\u8f83\u5e38\u7528\u7684\u4e00\u79cd yaw-pitch-roll<ul> <li>ZYX</li> </ul> </li> <li>\u4f46\u4f1a\u6709 Gimbal Lock \u95ee\u9898<ul> <li>\u6240\u4ee5\u6b27\u62c9\u89d2\u6bd4\u8f83\u9002\u5408\u7528\u4e8e\u5feb\u901f\u68c0\u9a8c\u7ed3\u679c\u662f\u5426\u6709\u9519</li> </ul> </li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#34","title":"3.4 \u56db\u5143\u6570","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#341","title":"3.4.1 \u56db\u5143\u6570\u7684\u5b9a\u4e49","text":"<ul> <li>\u6211\u4eec\u627e\u4e0d\u5230\u4e0d\u5e26\u5947\u5f02\u6027\u7684\u4e09\u4f4d\u5411\u91cf\u63cf\u8ff0\u65b9\u5f0f<ul> <li>\u627e\u4e0d\u5230\u4e00\u4e2a\u6d41\u5f62\uff1f</li> </ul> </li> <li>Quaternion<ul> <li>\u7d27\u51d1\u53c8\u6ca1\u6709\u5947\u5f02\u6027</li> <li>\u53ea\u662f\u4e0d\u591f\u76f4\u89c2+\u8fd0\u7b97\u590d\u6742</li> </ul> </li> <li>\\(\\displaystyle q=q_0+q_1\\mathrm{i}+\\mathrm{q}_2\\mathrm{j}+\\mathrm{q}_3\\mathrm{k}\\)</li> </ul> \\[ \\begin{cases}\\mathbf{i}^2=\\mathbf{j}^2=\\mathbf{k}^2=-1\\\\\\mathbf{ij}=\\mathbf{k},\\mathbf{ji}=-\\mathbf{k}\\\\\\mathbf{jk}=\\mathbf{i},\\mathbf{kj}=-\\mathbf{i}\\\\\\mathbf{ki}=\\mathbf{j},\\mathbf{ik}=-\\mathbf{j}\\end{cases} \\] <ul> <li>(\u4e5f\u8bb8\u53ef\u4ee5\u7528\u5ea6\u89c4\u6765\u8868\u793a\uff1f)</li> <li>\\(\\displaystyle \\boldsymbol{q}=\\left[s,\\boldsymbol{v}\\right]^\\mathrm{T},\\quad s=q_0\\in\\mathbb{R},\\quad\\boldsymbol{v}=\\left[q_1,q_2,q_3\\right]^\\mathrm{T}\\in\\mathbb{R}^3.\\)</li> <li>\u4e66\u4e0a\u6ca1\u5199\u76f4\u89c2\u7684\u51e0\u4f55\u5bf9\u5e94</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#342","title":"3.4.2 \u56db\u5143\u6570\u7684\u8fd0\u7b97","text":"<ul> <li>\u4e58\u6cd5: \\(\\displaystyle \\boldsymbol{q}_a\\boldsymbol{q}_b=\\begin{bmatrix}s_as_b-\\boldsymbol{v}_a^\\mathrm{T}\\boldsymbol{v}_b,s_a\\boldsymbol{v}_b+s_b\\boldsymbol{v}_a+\\boldsymbol{v}_a\\times\\boldsymbol{v}_b\\end{bmatrix}^\\mathrm{T}.\\)<ul> <li>\u7531\u4e8e\u6700\u540e\u4e00\u9879\u7684\u5b58\u5728\uff0c\u4e58\u6cd5\u4e0d\u5177\u6709\u4ea4\u6362\u5f8b</li> </ul> </li> <li>\u5171\u8f6d: \\(\\displaystyle q_a^*=s_a-x_a\\mathrm{i}-\\mathrm{y_aj}-\\mathrm{z_ak}=[\\mathrm{s_a},-\\mathrm{v_a}]^\\mathrm{T}.\\)<ul> <li>\\(\\displaystyle q^*q=qq^*=[s_a^2+\\boldsymbol{v}^\\mathrm{T}\\boldsymbol{v},\\boldsymbol{0}]^\\mathrm{T}.\\)</li> </ul> </li> <li>\u9006: \\(\\displaystyle q^{-1}=q^*/\\|q\\|^2.\\)<ul> <li>\\(\\displaystyle (\\boldsymbol{q}_a\\boldsymbol{q}_b)^{-1}=\\boldsymbol{q}_b^{-1}\\boldsymbol{q}_a^{-1}.\\)</li> </ul> </li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#343","title":"3.4.3 \u7528\u56db\u5143\u6570\u8868\u793a\u65cb\u8f6c","text":"<ul> <li>\u5148\u8868\u793a\u4e09\u7ef4\u7a7a\u95f4\u70b9:<ul> <li>\\(\\displaystyle p=[0,x,y,z]^{\\mathrm{T}}=[0,\\boldsymbol{v}]^{\\mathrm{T}}.\\)</li> </ul> </li> <li>\u518d\u65cb\u8f6c:<ul> <li>\\(\\displaystyle p'=qpq^{-1}.\\)</li> </ul> </li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#344","title":"3.4.4 \u56db\u5143\u6570\u5230\u5176\u4ed6\u65cb\u8f6c\u8868\u793a\u7684\u8f6c\u6362","text":"<ul> <li>\u8bbe \\(\\displaystyle \\boldsymbol{q} = [s,\\boldsymbol{v}]^\\mathrm{T}\\)<ul> <li>\\(\\displaystyle \\boldsymbol{q}^+=\\begin{bmatrix}s&amp;-\\boldsymbol{v}^\\mathrm{T}\\\\\\\\\\boldsymbol{v}&amp;s\\boldsymbol{I}+\\boldsymbol{v}^\\wedge\\end{bmatrix},\\quad\\boldsymbol{q}^\\oplus=\\begin{bmatrix}s&amp;-\\boldsymbol{v}^\\mathrm{T}\\\\\\\\\\boldsymbol{v}&amp;s\\boldsymbol{I}-\\boldsymbol{v}^\\wedge\\end{bmatrix}.\\)</li> <li>\\(\\displaystyle q_1^+q_2=\\begin{bmatrix}s_1&amp;-\\boldsymbol{v}_1^\\mathrm{T}\\\\\\\\\\boldsymbol{v}_1&amp;s_1\\boldsymbol{I}+\\boldsymbol{v}_1^\\wedge\\end{bmatrix}\\begin{bmatrix}s_2\\\\\\\\\\boldsymbol{v}_2\\end{bmatrix}=\\begin{bmatrix}-\\boldsymbol{v}_1^\\mathrm{T}\\boldsymbol{v}_2+s_1s_2\\\\\\\\s_1\\boldsymbol{v}_2+s_2\\boldsymbol{v}_1+\\boldsymbol{v}_1^\\wedge\\boldsymbol{v}_2\\end{bmatrix}=\\boldsymbol{q}_1\\boldsymbol{q}_2.\\)</li> <li>\u540c\u7406\u53ef\u8bc1:<ul> <li>\\(\\displaystyle q_1q_2=q_1^+q_2=q_2^\\oplus q_1.\\)</li> </ul> </li> </ul> </li> <li>\u518d\u6765\u8003\u8651\u65cb\u8f6c:<ul> <li>\\(\\displaystyle \\begin{aligned}p^{\\prime}&amp;=qpq^{-1}=q^{+}p^{+}q^{-1}\\\\&amp;=q^{+}q^{-1^{\\oplus}}p.\\end{aligned}\\)</li> <li>\u4e8e\u662f\u53ef\u4ee5\u5f97\u5230:<ul> <li>\\(\\displaystyle \\boldsymbol{q}^{+}\\big(\\boldsymbol{q}^{-1}\\big)^{\\oplus}=\\begin{bmatrix}s&amp;-\\boldsymbol{v}^{\\mathrm{T}}\\\\\\boldsymbol{v}&amp;s\\boldsymbol{I}+\\boldsymbol{v}^{\\wedge}\\end{bmatrix}\\begin{bmatrix}s&amp;\\boldsymbol{v}^{\\mathrm{T}}\\\\-\\boldsymbol{v}&amp;s\\boldsymbol{I}+\\boldsymbol{v}^{\\wedge}\\end{bmatrix}=\\begin{bmatrix}1&amp;\\boldsymbol{0}\\\\\\boldsymbol{0}^{\\mathrm{T}}&amp;\\boldsymbol{v}\\boldsymbol{v}^{\\mathrm{T}}+s^{2}\\boldsymbol{I}+2s\\boldsymbol{v}^{\\wedge}+\\left(\\boldsymbol{v}^{\\wedge}\\right)^{2}\\end{bmatrix}.\\)</li> <li>\u5373: \\(\\displaystyle R=\\boldsymbol{v}\\boldsymbol{v}^\\mathrm{T}+s^2\\boldsymbol{I}+2s\\boldsymbol{v}^\\wedge+\\left(\\boldsymbol{v}^\\wedge\\right)^2.\\)</li> </ul> </li> </ul> </li> </ul> \\[ \\begin{aligned} \\operatorname{tr}(R)&amp; =\\mathbf{tr}(\\boldsymbol{vv}^\\mathrm{T}+3s^2+2s\\cdot0+\\mathbf{tr}((\\boldsymbol{v}^\\wedge)^2) \\\\ &amp;=v_{1}^{2}+v_{2}^{2}+v_{3}^{2}+3s^{2}-2(v_{1}^{2}+v_{2}^{2}+v_{3}^{2}) \\\\ &amp;=(1-s^2)+3s^2-2(1-s^2) \\\\ &amp;=4s^2-1. \\end{aligned} \\] <ul> <li>\u5373 \\(\\displaystyle \\theta=2\\arccos s.\\)</li> <li>\u518d\u52a0\u4e0a\u65cb\u8f6c\u8f74:</li> </ul> \\[ \\begin{cases}\\theta=2\\arccos q_0\\\\ [n_x,n_y,n_z]^\\mathrm{T}=[q_1,q_2,q_3]^\\mathrm{T}/\\sin\\frac{\\theta}{2}\\end{cases}. \\]"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#35","title":"3.5 \u76f8\u4f3c\u3001\u4eff\u5c04\u3001\u5c04\u5f71\u53d8\u6362","text":"<ol> <li>\u76f8\u4f3c\u53d8\u6362:</li> </ol> \\[ \\boldsymbol{T}_S=\\begin{bmatrix}s\\boldsymbol{R}&amp;t\\\\\\mathbf{0}^\\mathrm{T}&amp;1\\end{bmatrix}. \\] <p>\u5141\u8bb8\u7f29\u653e\uff0c\u76f8\u4f3c\u53d8\u6362\u7fa4: Sim (3) 2. \u4eff\u5c04\u53d8\u6362:</p> \\[ T_A=\\begin{bmatrix}A&amp;t\\\\\\mathbf{0}^\\mathrm{T}&amp;1\\end{bmatrix}. \\] <p>\u53ea\u4fdd\u8bc1\u5e73\u884c\u5173\u7cfb 3. \u5c04\u5f71\u53d8\u6362</p> \\[ T_P=\\begin{bmatrix}A&amp;t\\\\\\\\a^\\mathrm{T}&amp;v\\end{bmatrix}. \\] <p>\u603b\u7ed3\u4e00\u4e0b:</p> \\[ \\begin{array}{c|c|c|c}\\hline\\text{\u53d8\u6362\u540d\u79f0}&amp;\\text{\u77e9\u9635\u5f62\u5f0f}&amp;\\text{\u81ea\u7531\u5ea6}&amp;\\text{\u4e0d\u53d8\u6027\u8d28}\\\\\\hline\\text{\u6b27\u6c0f\u53d8\u6362}&amp;\\begin{bmatrix}R&amp;t\\\\0^\\mathrm{T}&amp;1\\end{bmatrix}&amp;6&amp;\\text{\u957f\u5ea6\u3001\u5939\u89d2\u3001\u4f53\u79ef}\\\\\\text{\u76f8\u4f3c\u53d8\u6362}&amp;\\begin{bmatrix}sR&amp;t\\\\0^\\mathrm{T}&amp;1\\end{bmatrix}&amp;7&amp;\\text{\u4f53\u79ef\u6bd4}\\\\\\text{\u4eff\u5c04\u53d8\u6362}&amp;\\begin{bmatrix}A&amp;t\\\\0^\\mathrm{T}&amp;1\\end{bmatrix}&amp;12&amp;\\text{\u5e73\u884c\u6027\u3001\u4f53\u79ef\u6bd4}\\\\\\text{\u5c04\u5f71\u53d8\u6362}&amp;\\begin{bmatrix}A&amp;t\\\\a^\\mathrm{T}&amp;v\\end{bmatrix}&amp;15&amp;\\text{\u63a5\u89e6\u5e73\u9762\u7684\u76f8\u4ea4\u548c\u76f8\u5207}\\\\\\hline\\end{array} \\]"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#36-eigen","title":"3.6 \u5b9e\u8df5: Eigen \u51e0\u4f55\u6a21\u5757","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#361-eigen","title":"3.6.1 Eigen \u51e0\u4f55\u6a21\u5757\u7684\u6570\u636e\u6f14\u793a","text":"<p>\u518d\u8bf4\u5427\u3002</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#362","title":"3.6.2 \u5b9e\u9645\u7684\u5750\u6807\u53d8\u6362\u4f8b\u5b50","text":"<p>TODO</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#37","title":"3.7 \u53ef\u89c6\u5316\u6f14\u793a","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#371","title":"3.7.1 \u663e\u793a\u8fd0\u52a8\u8f68\u8ff9","text":"<ul> <li>\u7528 Pangolin \u5e93</li> <li>TODO</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#372","title":"3.7.2 \u663e\u793a\u76f8\u673a\u7684\u4f4d\u59ff","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#38","title":"3.8 \u4e60\u9898","text":"<p>TODO</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#4","title":"4 \u674e\u7fa4\u548c\u674e\u4ee3\u6570","text":"<ul> <li>\u7531\u4e8e\u65cb\u8f6c\u77e9\u9635\u672c\u8eab\u5e26\u6709\u7ea6\u675f\uff08\u6b63\u4ea4\u4e14\u884c\u5217\u5f0f\u4e3a 1\uff09\uff0c\u8ba9\u4f18\u5316\u53d8\u5f97\u56f0\u96be\u3002</li> <li>\u6240\u4ee5\u6211\u4eec\u5f15\u5165\u674e\u7fa4-\u674e\u4ee3\u6570\u95f4\u7684\u8f6c\u6362\u5173\u7cfb\uff0c\u628a\u4f4d\u59ff\u4f30\u8ba1\u53d8\u6210\u65e0\u7ea6\u675f\u7684\u4f18\u5316\u95ee\u9898</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#41","title":"4.1 \u674e\u7fa4\u548c\u674e\u4ee3\u6570\u57fa\u7840","text":"<ul> <li>\u4e09\u7ef4\u65cb\u8f6c\u77e9\u9635\u6784\u6210\u4e86\u7279\u6b8a\u6b63\u4ea4\u7fa4 \\(\\displaystyle \\boldsymbol{SO}(3)\\)</li> <li>\u53d8\u6362\u77e9\u9635\u6784\u6210\u4e86\u7279\u6b8a\u6b27\u6c0f\u7fa4 \\(\\displaystyle \\boldsymbol{SE}(3)\\)<ul> <li>\u4f46\u662f\u4ed6\u4eec\u90fd\u5bf9\u52a0\u6cd5\u4e0d\u5c01\u95ed</li> <li>\u5bf9\u4e58\u6cd5\u5c01\u95ed</li> </ul> </li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#411","title":"4.1.1 \u7fa4","text":"<ul> <li>\\(\\displaystyle G = (A,\\cdot)\\) \u6ee1\u8db3:<ul> <li>\u5c01\u95ed\u6027</li> <li>\u7ed3\u5408\u5f8b</li> <li>\u5e7a\u5143</li> <li>\u9006</li> </ul> </li> <li>\u674e\u7fa4\u662f\u5177\u6709\u8fde\u7eed\uff08\u5149\u6ed1\uff09\u6027\u8d28\u7684\u7fa4</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#412","title":"4.1.2 \u674e\u4ee3\u6570\u7684\u5f15\u51fa","text":"<ul> <li>\\(\\displaystyle \\boldsymbol{R}\\boldsymbol{R}^\\mathrm{T} = \\boldsymbol{I}\\)</li> <li>\u6211\u4eec\u6613\u5f97: \\(\\displaystyle \\dot{\\boldsymbol{R}}(t)\\boldsymbol{R}(t)^\\mathrm{T}=-\\left(\\dot{\\boldsymbol{R}}(t)\\boldsymbol{R}(t)^\\mathrm{T}\\right)^\\mathrm{T}.\\)<ul> <li>\u5373 \\(\\displaystyle \\dot{\\boldsymbol{R}}(t)\\boldsymbol{R}(t)^\\mathrm{T}\\) \u662f\u53cd\u5bf9\u79f0</li> </ul> </li> <li>\u800c\u5bf9\u4e8e\u4efb\u610f\u53cd\u5bf9\u79f0\u77e9\u9635\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u627e\u5230\u552f\u4e00\u4e0e\u4e4b\u5bf9\u5e94\u7684\u5411\u91cf<ul> <li>\\(\\displaystyle \\dot{\\boldsymbol{R}}(t)\\boldsymbol{R}(t)^\\mathrm{T}=\\boldsymbol{\\phi}(t)^{\\wedge}.\\)</li> <li>\\(\\displaystyle \\dot{\\boldsymbol{R}}(t)=\\phi(t)^{\\wedge}\\boldsymbol{R}(t)=\\begin{bmatrix}0&amp;-\\phi_3&amp;\\phi_2\\\\\\phi_3&amp;0&amp;-\\phi_1\\\\-\\phi_2&amp;\\phi_1&amp;0\\end{bmatrix}\\boldsymbol{R}(t).\\) \u8003\u8651 \\(\\displaystyle t_{0} = 0\\) \u548c \\(\\displaystyle \\boldsymbol{R}(0) = \\boldsymbol{I}\\) \u65f6:</li> </ul> </li> </ul> \\[ \\begin{aligned} R(t)&amp; \\approx\\boldsymbol{R}\\left(t_{0}\\right)+\\dot{\\boldsymbol{R}}\\left(t_{0}\\right)\\left(t-t_{0}\\right) \\\\ &amp;=I+\\phi(t_0)^{\\wedge}(t). \\end{aligned} \\] <p>\u4e8e\u662f\u6c42\u5bfc-&gt;\u4e00\u4e2a\u7b97\u7b26 \\(\\displaystyle \\phi\\) \uff0c\u88ab\u79f0\u4e3a \\(\\displaystyle \\boldsymbol{SO}(3)\\) \u539f\u70b9\u9644\u8fd1\u7684\u6b63\u5207\u7a7a\u95f4\uff08Tangent Space\uff09 \u8bbe\u5728 \\(\\displaystyle t_{0}\\) \u9644\u8fd1\uff0c\\(\\displaystyle \\phi\\) \u4fdd\u6301\u5e38\u6570 \\(\\displaystyle \\phi(t_{0})=\\phi_{0}\\)\uff0c</p> \\[ \\dot{\\boldsymbol{R}}(t)=\\boldsymbol{\\phi}(t_0)^\\wedge\\boldsymbol{R}(t)=\\boldsymbol{\\phi}_0^\\wedge\\boldsymbol{R}(t). \\] <p>\u518d\u6709 \\(\\displaystyle \\boldsymbol{R}(0) = \\boldsymbol{I}\\)\uff0c\u89e3\u7684:</p> \\[ \\boldsymbol{R}(t)=\\exp\\left(\\boldsymbol{\\phi}_{0}^{\\wedge}t\\right). \\] <ul> <li>\\(\\displaystyle \\phi\\) \u6b63\u662f\u5bf9\u5e94\u5230 \\(\\displaystyle SO(3)\\) \u4e0a\u7684\u674e\u4ee3\u6570 \\(\\displaystyle \\mathfrak{so}(3)\\)</li> <li>\\(\\displaystyle \\begin{aligned}&amp;\\text{\u5176\u6b21,\u7ed9\u5b9a\u67d0\u4e2a\u5411\u91cf }\\phi\\text{ \u65f6,\u77e9\u9635\u6307\u6570}\\exp(\\phi^{\\wedge})\\text{ \u5982\u4f55\u8ba1\u7b97? \u53cd\u4e4b,\u7ed9\u5b9a }R\\text{ \u65f6,\u80fd\u5426\u6709\u76f8\u53cd}\\\\&amp;\\text{\u7684\u8fd0\u7b97\u6765\u8ba1\u7b97 }\\phi?\\text{ \u4e8b\u5b9e\u4e0a,\u8fd9\u6b63\u662f\u674e\u7fa4\u4e0e\u674e\u4ee3\u6570\u95f4\u7684\u6307\u6570}/\\text{\u5bf9\u6570\u6620\u5c04\u3002}\\end{aligned}\\)</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#413","title":"4.1.3 \u674e\u4ee3\u6570\u7684\u5b9a\u4e49","text":"<p>\u674e\u4ee3\u6570\u7531\u4e00\u4e2a\u96c6\u5408 \\(\\displaystyle \\mathbb{V}\\)\u3001\u4e00\u4e2a\u6570\u57df \\(\\displaystyle \\mathbb{F}\\) \u548c\u4e00\u4e2a\u4e8c\u5143\u8fd0\u7b97 \\(\\displaystyle [,]\\) \u7ec4\u6210\u3002\u5982\u679c\u6ee1\u8db3\u4ee5\u4e0b\u51e0\u6761\u6027\u8d28\uff0c\u5219\u79f0 ( \\(\\displaystyle \\mathbb{V},\\mathbb{F},[,]\\)) \u4e3a\u4e00\u4e2a\u674e\u4ee3\u6570\uff0c\u8bb0\u4f5c \\(\\displaystyle \\mathfrak{g}\\)\u3002</p> <ol> <li>\u5c01\u95ed\u6027</li> <li>\u53cc\u7ebf\u6027</li> <li>\u81ea\u53cd\u6027 \\(\\displaystyle \\quad\\forall \\boldsymbol{X}\\in\\mathbb{V},[\\boldsymbol{X},\\boldsymbol{X}]=0\\)</li> <li>\u96c5\u53ef\u6bd4\u7b49\u4ef7 \\(\\displaystyle \\forall X,Y,Z\\in\\mathbb{V},[X,[Y,Z]]+[Z,[X,Y]]+[Y,[Z,X]]=0.\\) \u5176\u4e2d\u4e8c\u5143\u8fd0\u7b97\u88ab\u79f0\u4e3a\u674e\u62ec\u53f7\u3002 eg: \u53c9\u79ef\u662f\u4e00\u79cd\u674e\u62ec\u53f7</li> </ol>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#414-displaystyle-mathfrakso3","title":"4.1.4 \u674e\u4ee3\u6570 \\(\\displaystyle \\mathfrak{so}(3)\\)","text":"<p>\\(\\displaystyle \\boldsymbol{\\Phi}=\\boldsymbol{\\phi}^{\\wedge}=\\begin{bmatrix}0&amp;-\\phi_3&amp;\\phi_2\\\\\\\\\\phi_3&amp;0&amp;-\\phi_1\\\\\\\\-\\phi_2&amp;\\phi_1&amp;0\\end{bmatrix}\\in\\mathbb{R}^{3\\times3}.\\) \u6240\u4ee5\u4e24\u4e2a\u5411\u91cf \\(\\displaystyle \\phi_{1},\\phi_{2}\\) \u7684\u674e\u62ec\u53f7\u4e3a:</p> \\[ [\\phi_1,\\phi_2]=(\\boldsymbol{\\Phi}_1\\boldsymbol{\\Phi}_2-\\boldsymbol{\\Phi}_2\\boldsymbol{\\Phi}_1)^\\vee. \\] \\[ \\mathfrak{so}(3)=\\left\\{\\phi\\in\\mathbb{R}^3,\\boldsymbol{\\Phi}=\\phi^\\wedge\\in\\mathbb{R}^{3\\times3}\\right\\}. \\] \\[ R=\\exp(\\phi^{\\wedge}). \\]"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#415-displaystyle-mathfrakse3","title":"4.1.5 \u674e\u4ee3\u6570 \\(\\displaystyle \\mathfrak{se}(3)\\)","text":"\\[ \\mathfrak{se}(3)=\\left\\{\\boldsymbol{\\xi}=\\begin{bmatrix}\\boldsymbol{\\rho}\\\\\\boldsymbol{\\phi}\\end{bmatrix}\\in\\mathbb{R}^6,\\boldsymbol{\\rho}\\in\\mathbb{R}^3,\\boldsymbol{\\phi}\\in\\mathfrak{so}(3),\\boldsymbol{\\xi}^\\wedge=\\begin{bmatrix}\\boldsymbol{\\phi}^\\wedge&amp;\\boldsymbol{\\rho}\\\\\\boldsymbol{0}^\\mathrm{T}&amp;0\\end{bmatrix}\\in\\mathbb{R}^{4\\times4}\\right\\}. \\] <p>\u524d\u4e09\u7ef4\u4e3a\u5e73\u79fb\uff0c\u540e\u4e09\u7ef4\u4e3a\u65cb\u8f6c\uff08\u5b9e\u8d28\u4e0a\u662f \\(\\displaystyle \\mathfrak{so}(3)\\) \u5143\u7d20\uff09</p> \\[ \\xi^\\wedge=\\begin{bmatrix}\\phi^\\wedge&amp;\\rho\\\\0^\\mathrm{T}&amp;0\\end{bmatrix}\\in\\mathbb{R}^{4\\times4}. \\] <p>\u540c\u6837\u674e\u4ee3\u6570 \\(\\displaystyle \\mathfrak{se}(3)\\) \u4e5f\u6709\u7c7b\u4f3c\u4e8e \\(\\displaystyle \\mathfrak{so}(3)\\) \u7684\u674e\u62ec\u53f7:</p> \\[ [\\xi_1,\\xi_2]=\\left(\\xi_1^\\wedge\\xi_2^\\wedge-\\xi_2^\\wedge\\xi_1^\\wedge\\right)^\\vee. \\]"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#42","title":"4.2 \u6307\u6570\u4e0e\u5bf9\u6570\u6620\u5c04","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#421-so3","title":"4.2.1 SO(3)\u4e0a\u7684\u6307\u6570\u6620\u5c04","text":"<ul> <li>Exponential Map</li> <li>\u9996\u5148\u4efb\u610f\u77e9\u9635\u7684\u6307\u6570\u6620\u5c04\u53ef\u4ee5\u5199\u6210\u4e00\u4e2a\u6cf0\u52d2\u5c55\u5f00\uff08\u6536\u655b\u7684\u65f6\u5019\uff09</li> </ul> \\[ \\exp(A)=\\sum_{n=0}^\\infty\\frac1{n!}A^n. \\] <ul> <li>\u5e94\u7528\u5230 \\(\\displaystyle \\mathfrak{so}(3)\\) \u4e2d:</li> </ul> \\[ \\exp(\\phi^\\wedge)=\\sum_{n=0}^\\infty\\frac{1}{n!}(\\phi^\\wedge)^n. \\] <ul> <li>\u6211\u4eec\u53ef\u4ee5\u628a \\(\\displaystyle \\phi\\) \u8868\u793a\u6210 \\(\\displaystyle \\theta \\boldsymbol{a}\\)\uff0c\u5bf9\u4e8e \\(\\displaystyle \\boldsymbol{a}^\\wedge\\):</li> </ul> \\[ \\boldsymbol{a}^{\\wedge}\\boldsymbol{a}^{\\wedge}=\\begin{bmatrix}-a_2^2-a_3^2&amp;a_1a_2&amp;a_1a_3\\\\\\\\a_1a_2&amp;-a_1^2-a_3^2&amp;a_2a_3\\\\\\\\a_1a_3&amp;a_2a_3&amp;-a_1^2-a_2^2\\end{bmatrix}=\\boldsymbol{a}\\boldsymbol{a}^\\mathrm{T}-\\boldsymbol{I}, \\] <p>\u548c</p> \\[ a^{\\wedge}a^{\\wedge}a^{\\wedge}=a^{\\wedge}(aa^{\\mathrm{T}}-I)=-a^{\\wedge}. \\] <p>\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5316\u7b80:</p> \\[ \\begin{aligned} \\exp\\left(\\phi^\\wedge\\right)&amp; =\\exp\\left(\\theta\\boldsymbol{a}^\\wedge\\right)=\\sum_{n=0}^\\infty\\frac1{n!}\\left(\\theta\\boldsymbol{a}^\\wedge\\right)^n \\\\ &amp;=I+\\theta\\boldsymbol{a}^{\\wedge}+\\frac{1}{2!}\\theta^{2}\\boldsymbol{a}^{\\wedge}\\boldsymbol{a}^{\\wedge}+\\frac{1}{3!}\\theta^{3}\\boldsymbol{a}^{\\wedge}\\boldsymbol{a}^{\\wedge}\\boldsymbol{a}^{\\wedge}+\\frac{1}{4!}\\theta^{4}(\\boldsymbol{a}^{\\wedge})^{4}+\\cdots \\\\ &amp;=\\boldsymbol{a}\\boldsymbol{a}^{\\mathrm{T}}-\\boldsymbol{a}^{\\wedge}\\boldsymbol{a}^{\\wedge}+\\theta\\boldsymbol{a}^{\\wedge}+\\frac{1}{2!}\\theta^{2}\\boldsymbol{a}^{\\wedge}\\boldsymbol{a}^{\\wedge}-\\frac{1}{3!}\\theta^{3}\\boldsymbol{a}^{\\wedge}-\\frac{1}{4!}\\theta^{4}(\\boldsymbol{a}^{\\wedge})^{2}+\\cdots \\\\ &amp;=\\boldsymbol{a}\\boldsymbol{a}^{\\mathsf{T}}+\\underbrace{\\left(\\theta-\\frac{1}{3!}\\theta^{3}+\\frac{1}{5!}\\theta^{5}-\\cdots\\right)}_{\\sin\\theta}\\boldsymbol{a}^{\\wedge}-\\underbrace{\\left(1-\\frac{1}{2!}\\theta^{2}+\\frac{1}{4!}\\theta^{4}-\\cdots\\right)}_{\\cos\\theta}\\boldsymbol{a}^{\\wedge}\\boldsymbol{a}^{\\wedge} \\\\ &amp;=a^\\wedge a^\\wedge+I+\\sin\\theta a^\\wedge-\\cos\\theta a^\\wedge a^\\wedge \\\\ &amp;=(1-\\cos\\theta)\\boldsymbol{a}^\\wedge\\boldsymbol{a}^\\wedge+\\boldsymbol{I}+\\sin\\theta\\boldsymbol{a}^\\wedge \\\\ &amp;=\\cos\\theta\\boldsymbol{I}+(1-\\cos\\theta)\\boldsymbol{aa}^\\mathrm{T}+\\sin\\theta\\boldsymbol{a}^\\mathrm{\\wedge}. \\end{aligned} \\] <p>\u6700\u540e\u5f97\u5230:</p> \\[ \\exp(\\theta\\boldsymbol{a}^\\wedge)=\\cos\\theta\\boldsymbol{I}+(1-\\cos\\theta)\\boldsymbol{a}\\boldsymbol{a}^\\mathrm{T}+\\sin\\theta\\boldsymbol{a}^\\wedge. \\] <p>\u6240\u4ee5 \\(\\displaystyle \\mathfrak{so}(3)\\) \u5c31\u662f\u65cb\u91cf\u5411\u91cf\u7ec4\u6210\u7684\u7a7a\u95f4\uff0c\u800c\u6307\u6570\u6620\u5c04\u5373\u7f57\u5fb7\u91cc\u683c\u65af\u516c\u5f0f\u3002</p> <ul> <li>\u901a\u8fc7\u4e0a\u9762\u7684\u516c\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u628a \\(\\displaystyle \\mathfrak{so}(3)\\) \u4e2d\u4efb\u610f\u5411\u91cf\u5bf9\u5e94\u5230 SO (3) \u4e2d\u7684\u65cb\u8f6c\u77e9\u9635</li> <li>\u53cd\u8fc7\u6765\u4e5f\u662f\u53ef\u4ee5\u7684</li> </ul> \\[ \\phi=\\ln\\left(\\boldsymbol{R}\\right)^\\vee=\\left(\\sum_{n=0}^\\infty\\frac{\\left(-1\\right)^n}{n+1}\\left(\\boldsymbol{R}-\\boldsymbol{I}\\right)^{n+1}\\right)^\\vee. \\]"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#422-se-3","title":"4.2.2 SE (3) \u4e0a\u7684\u6307\u6570\u6620\u5c04","text":"<p>\u540c\u6837\u7684\u63a8\u5bfc\u65b9\u5f0f:</p> \\[ \\begin{aligned} \\exp\\left(\\xi^{\\wedge}\\right)&amp; =\\begin{bmatrix}\\sum_{n=0}^{\\infty}\\frac{1}{n!}(\\phi^{\\wedge})^{n}&amp;\\sum_{n=0}^{\\infty}\\frac{1}{(n+1)!}(\\phi^{\\wedge})^{n}\\rho\\\\\\\\\\mathbf{0}^{\\mathrm{T}}&amp;1\\end{bmatrix} \\\\ &amp;\\stackrel{\\Delta}{=}\\begin{bmatrix}R&amp;J\\rho\\\\\\\\0^\\mathrm{T}&amp;1\\end{bmatrix}=T. \\end{aligned} \\] \\[ \\begin{aligned} \\sum_{n=0}^{\\infty}\\frac{1}{(n+1)!}(\\phi^{\\wedge})^{n}&amp; =\\boldsymbol{I}+\\frac{1}{2!}\\theta\\boldsymbol{a}^{\\wedge}+\\frac{1}{3!}\\theta^{2}{(\\boldsymbol{a}^{\\wedge})}^{2}+\\frac{1}{4!}\\theta^{3}{(\\boldsymbol{a}^{\\wedge})}^{3}+\\frac{1}{5!}\\theta^{4}{(\\boldsymbol{a}^{\\wedge})}^{4}\\cdots  \\\\ &amp;=\\frac{1}{\\theta}\\left(\\frac{1}{2!}\\theta^{2}-\\frac{1}{4!}\\theta^{4}+\\cdots\\right)(\\boldsymbol{a}^{\\wedge})+\\frac{1}{\\theta}\\left(\\frac{1}{3!}\\theta^{3}-\\frac{1}{5}\\theta^{5}+\\cdots\\right)(\\boldsymbol{a}^{\\wedge})^{2}+\\boldsymbol{I} \\\\ &amp;=\\frac1\\theta\\left(1-\\cos\\theta\\right)\\left(\\boldsymbol{a}^{\\wedge}\\right)+\\frac{\\theta-\\sin\\theta}\\theta\\left(\\boldsymbol{a}\\boldsymbol{a}^{\\mathrm{T}}-\\boldsymbol{I}\\right)+\\boldsymbol{I} \\\\ &amp;=\\frac{\\sin\\theta}\\theta\\boldsymbol{I}+\\left(1-\\frac{\\sin\\theta}\\theta\\right)\\boldsymbol{aa}^\\mathrm{T}+\\frac{1-\\cos\\theta}\\theta\\boldsymbol{a}^\\mathrm{\\wedge}\\overset{\\mathrm{def}}{\\operatorname*{=}}\\boldsymbol{J}. \\end{aligned} \\] \\[ \\boldsymbol{J}=\\frac{\\sin\\theta}{\\theta}\\boldsymbol{I}+\\left(1-\\frac{\\sin\\theta}{\\theta}\\right)\\boldsymbol{a}\\boldsymbol{a}^\\mathrm{T}+\\frac{1-\\cos\\theta}{\\theta}\\boldsymbol{a}^\\mathrm{\\wedge}. \\] <p>4.28 \u6ca1\u770b\u61c2 </p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#43","title":"4.3 \u674e\u4ee3\u6570\u6c42\u5bfc\u4e0e\u6270\u52a8\u6a21\u578b","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#431-bch","title":"4.3.1 BCH \u516c\u5f0f\u4e0e\u8fd1\u4f3c\u5f62\u5f0f","text":"<p>\u63a2\u7a76\u5982\u4e0b\u5f0f\u5b50\u662f\u5426\u6210\u7acb:</p> \\[ \\ln\\left(\\exp\\left(A\\right)\\exp\\left(B\\right)\\right)=A+B ? \\] <p>\u4f46\u5b83\u5e76\u4e0d\u6210\u7acb\u3002\u4e24\u4e2a\u674e\u4ee3\u6570\u6307\u6570\u6620\u5c04\u4e58\u79ef\u7684\u5b8c\u6574\u5f62\u5f0f\uff0c\u7531 Baker-Campbell-Hausdorff \u7ed9\u51fa:</p> \\[ \\ln\\left(\\exp\\left(A\\right)\\exp\\left(B\\right)\\right)=A+B+\\frac{1}{2}\\left[A,B\\right]+\\frac{1}{12}\\left[A,\\left[A,B\\right]\\right]-\\frac{1}{12}\\left[B,\\left[A,B\\right]\\right]+\\cdots \\] <p>\u7279\u522b\u7684\uff0c\u5f53 \\(\\displaystyle \\phi_{1}\\) \u6216 \\(\\displaystyle \\phi_{2}\\) \u4e3a\u5c0f\u91cf\u65f6\uff0c\u5c0f\u91cf\u4e8c\u6b21\u4ee5\u4e0a\u7684\u9879\u90fd\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u6b64\u65f6\u7684\u7ebf\u6027\u8fd1\u4f3c\u8868\u8fbe:</p> \\[ \\ln\\left(\\exp\\left(\\phi_1^\\wedge\\right)\\exp\\left(\\phi_2^\\wedge\\right)\\right)^\\vee\\approx\\begin{cases}J_l(\\phi_2)^{-1}\\phi_1+\\phi_2&amp;\\text{\u5f53}\\phi_1\\text{\u4e3a\u5c0f\u91cf},\\\\J_r(\\phi_1)^{-1}\\phi_2+\\phi_1&amp;\\text{\u5f53}\\phi_2\\text{\u4e3a\u5c0f\u91cf}.\\end{cases} \\] \\[ \\boldsymbol{J}_{l}=\\frac{\\sin\\theta}{\\theta}\\boldsymbol{I}+\\left(1-\\frac{\\sin\\theta}{\\theta}\\right)\\boldsymbol{a}\\boldsymbol{a}^\\mathrm{T}+\\frac{1-\\cos\\theta}{\\theta}\\boldsymbol{a}^\\mathrm{\\wedge}. \\] \\[ \\boldsymbol{J}_{\\ell}^{-1}=\\frac{\\theta}{2}\\cot\\frac{\\theta}{2}\\boldsymbol{I}+\\left(1-\\frac{\\theta}{2}\\cot\\frac{\\theta}{2}\\right)\\boldsymbol{a}\\boldsymbol{a}^{\\mathrm{T}}-\\frac{\\theta}{2}\\boldsymbol{a}^{\\wedge}. \\] \\[ J_{r}(\\phi)=J_{l}(-\\phi). \\] <p>\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u8c08\u8bba\u674e\u7fa4\u4e58\u6cd5\u4e0e\u674e\u4ee3\u6570\u52a0\u6cd5\u7684\u5173\u7cfb\u4e86\u3002 \\(\\displaystyle \\boldsymbol{R}\\) \u5bf9\u5e94 \\(\\displaystyle \\phi\\)\uff0c\u6211\u4eec\u7ed9\u5b83\u5de6\u4e58\u4e00\u4e2a\u5fae\u5c0f\u65cb\u8f6c\uff0c\u8bb0\u4f5c \\(\\displaystyle \\Delta \\boldsymbol{R}\\)</p> \\[ \\exp\\left(\\Delta\\phi^{\\wedge}\\right)\\exp\\left(\\phi^{\\wedge}\\right)=\\exp\\left(\\left(\\phi+J_{l}^{-1}\\left(\\phi\\right)\\Delta\\phi\\right)^{\\wedge}\\right). \\] \\[ \\exp\\left(\\left(\\phi+\\Delta\\phi\\right)^{\\wedge}\\right)=\\exp\\left(\\left(J_{l}\\Delta\\phi\\right)^{\\wedge}\\right)\\exp\\left(\\phi^{\\wedge}\\right)=\\exp\\left(\\phi^{\\wedge}\\right)\\exp\\left(\\left(J_{r}\\Delta\\phi\\right)^{\\wedge}\\right). \\] <p>\u5bf9\u4e8e SE (3) \u6211\u4eec\u4e5f\u6709:</p> \\[ \\exp\\left(\\Delta\\xi^{\\wedge}\\right)\\exp\\left(\\xi^{\\wedge}\\right)\\approx\\exp\\left(\\left(\\mathcal{J}_{l}^{-1}\\Delta\\xi+\\xi\\right)^{\\wedge}\\right) \\] \\[ exp\\left(\\xi^{\\wedge}\\right)\\exp\\left(\\Delta\\xi^{\\wedge}\\right)\\approx\\exp\\left(\\left(\\mathcal{J}_{r}^{-1}\\Delta\\xi+\\xi\\right)^{\\wedge}\\right). \\] <p>\u552f\u4e00\u4e0d\u540c\u7684\u662f\u8fd9\u91cc\u7684 \\(\\displaystyle J_{l}\\) \u6bd4\u8f83\u590d\u6742\u3002</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#432-so-3","title":"4.3.2 SO (3) \u4e0a\u7684\u674e\u4ee3\u6570\u6c42\u5bfc","text":"\\[ z=T\\boldsymbol{p}+\\boldsymbol{w}. \\] <p>\u5176\u4e2d \\(\\displaystyle \\boldsymbol{w}\\) \u662f\u968f\u673a\u566a\u58f0\u3002</p> \\[ e=z-Tp. \\] <p>\u5047\u8bbe\u4e00\u5171\u6709 N \u4e2a\u8fd9\u6837\u7684\u8def\u6807\u70b9\u548c\u89c2\u6d4b:</p> \\[ \\min_{\\boldsymbol{T}}J(\\boldsymbol{T})=\\sum_{i=1}^N\\left\\|\\boldsymbol{z}_i-\\boldsymbol{T}\\boldsymbol{p}_i\\right\\|_2^2. \\] <p>most importantly\uff0c\u6211\u4eec\u4f1a\u6784\u5efa\u4e0e\u4f4d\u59ff\u6709\u5173\u7684\u51fd\u6570\uff0c\u5e76\u8ba8\u8bba\u8be5\u51fd\u6570\u5173\u4e8e\u4f4d\u59ff\u7684\u5bfc\u6570\uff0c\u4ee5\u8c03\u6574\u5f53\u524d\u7684\u4f30\u8ba1\u503c\u3002 \u4f7f\u7528\u674e\u4ee3\u6570\u89e3\u51b3\u6c42\u5bfc\u95ee\u9898\u7684\u601d\u8def\u5206\u4e3a\u4e24\u79cd:</p> <ol> <li>\u7528\u674e\u4ee3\u6570\u8868\u793a\u59ff\u6001\uff0c\u7136\u540e\u6839\u636e\u674e\u4ee3\u6570\u52a0\u6cd5\u5bf9\u674e\u4ee3\u6570\u6c42\u5bfc\u3002</li> <li>\u5bf9\u674e\u7fa4\u5de6\u4e58\u6216\u53f3\u4e58\u5fae\u5c0f\u6270\u52a8\uff0c\u7136\u540e\u5bf9\u8be5\u6270\u52a8\u6c42\u5bfc\uff0c\u79f0\u4e3a\u5de6\u6270\u52a8\u548c\u53f3\u6270\u52a8\u6a21\u578b\u3002</li> </ol>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#44","title":"4.4 \u674e\u4ee3\u6570\u6c42\u5bfc","text":"<p>\u8981\u8ba1\u7b97 \\(\\displaystyle \\frac{\\partial\\left(Rp\\right)}{\\partial R}\\), \u7531\u4e8eSO\uff083\uff09\u6ca1\u6709\u52a0\u6cd5\uff0c\u6211\u4eec\u8f6c\u800c\u8ba1\u7b97: \\(\\displaystyle \\frac{\\partial\\left(\\exp\\left(\\phi^{\\wedge}\\right)\\boldsymbol{p}\\right)}{\\partial\\boldsymbol{\\phi}}.\\)</p> \\[ \\begin{aligned} \\frac{\\partial\\left(\\exp\\left(\\phi^{\\wedge}\\right)\\boldsymbol{p}\\right)}{\\partial\\phi}&amp; =\\lim_{\\delta\\boldsymbol{\\phi}\\to0}\\frac{\\exp\\left(\\left(\\boldsymbol{\\phi}+\\delta\\boldsymbol{\\phi}\\right)^{\\wedge}\\right)\\boldsymbol{p}-\\exp\\left(\\boldsymbol{\\phi}^{\\wedge}\\right)\\boldsymbol{p}}{\\delta\\boldsymbol{\\phi}} \\\\ &amp;=\\lim_{\\delta\\phi\\to0}\\frac{\\exp\\left(\\left(\\boldsymbol{J}_i\\delta\\boldsymbol{\\phi}\\right)^\\wedge\\right)\\exp\\left(\\boldsymbol{\\phi}^\\wedge\\right)\\boldsymbol{p}-\\exp\\left(\\boldsymbol{\\phi}^\\wedge\\right)\\boldsymbol{p}}{\\delta\\boldsymbol{\\phi}} \\\\ &amp;=\\lim_{\\delta\\phi\\to0}\\frac{\\left(\\boldsymbol{I}+\\left(\\boldsymbol{J}_{l}\\delta\\boldsymbol{\\phi}\\right)^{\\wedge}\\right)\\exp\\left(\\boldsymbol{\\phi}^{\\wedge}\\right)\\boldsymbol{p}-\\exp\\left(\\boldsymbol{\\phi}^{\\wedge}\\right)\\boldsymbol{p}}{\\delta\\phi} \\\\ &amp;=\\lim_{\\delta\\phi\\to0}\\frac{\\left(\\boldsymbol{J}_{l}\\delta\\phi\\right)^{\\wedge}\\exp\\left(\\boldsymbol{\\phi}^{\\wedge}\\right)\\boldsymbol{p}}{\\delta\\phi} \\\\ &amp;=\\lim_{\\delta\\boldsymbol{\\phi}\\to0}\\frac{-(\\exp\\left(\\boldsymbol{\\phi}^{\\wedge}\\right)\\boldsymbol{p})^{\\wedge}\\boldsymbol{J}_{l}\\delta\\boldsymbol{\\phi}}{\\delta\\boldsymbol{\\phi}}=-(\\boldsymbol{R}\\boldsymbol{p})^{\\wedge}\\boldsymbol{J}_{l}. \\end{aligned} \\] <p>BCH \u7ebf\u6027\u8fd1\u4f3c+\u6cf0\u52d2\u5c55\u5f00\u53d6\u7ebf\u6027\u9879:</p> \\[ \\frac{\\partial\\left(\\boldsymbol{Rp}\\right)}{\\partial\\boldsymbol{\\phi}}=\\left(-\\boldsymbol{Rp}\\right)^{\\wedge}\\boldsymbol{J}_{l}. \\] <p>\u4f46\u662f\u8fd9\u91cc\u4ecd\u7136\u6709 \\(\\displaystyle \\boldsymbol{J}_{l}\\)</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#441","title":"4.4.1 \u6270\u52a8\u6a21\u578b\uff08\u5de6\u4e58\uff09","text":"<p>\\(\\displaystyle \\varphi\\) \u5bf9\u5e94\u5de6\u6270\u52a8 \\(\\displaystyle \\Delta \\boldsymbol{R}\\)</p> \\[ \\begin{aligned} \\frac{\\partial\\left(Rp\\right)}{\\partial\\varphi}&amp; =\\lim_{\\varphi\\to0}\\frac{\\exp\\left(\\varphi^{\\wedge}\\right)\\exp\\left(\\phi^{\\wedge}\\right)p-\\exp\\left(\\phi^{\\wedge}\\right)p}{\\varphi} \\\\ &amp;=\\lim_{\\varphi\\to0}\\frac{(\\boldsymbol{I}+\\boldsymbol{\\varphi}^{\\wedge})\\exp\\left(\\boldsymbol{\\phi}^{\\wedge}\\right)\\boldsymbol{p}-\\exp\\left(\\boldsymbol{\\phi}^{\\wedge}\\right)\\boldsymbol{p}}{\\varphi} \\\\ &amp;=\\lim_{\\varphi\\to0}\\frac{\\varphi^\\wedge Rp}\\varphi=\\lim_{\\varphi\\to0}\\frac{-\\left(Rp\\right)^\\wedge\\varphi}\\varphi=-\\left(Rp\\right)^\\wedge. \\end{aligned} \\]"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#442-se-3","title":"4.4.2 SE (3) \u4e0a\u7684\u674e\u4ee3\u6570\u6c42\u5bfc","text":"\\[ \\begin{aligned} \\frac{\\partial\\left(\\boldsymbol{T}\\boldsymbol{p}\\right)}{\\partial\\delta\\boldsymbol{\\xi}}&amp;=\\lim_{\\delta\\boldsymbol{\\xi}\\to\\boldsymbol{0}}\\frac{\\exp\\left(\\delta\\boldsymbol{\\xi}^{\\wedge}\\right)\\exp\\left(\\boldsymbol{\\xi}^{\\wedge}\\right)\\boldsymbol{p}-\\exp\\left(\\boldsymbol{\\xi}^{\\wedge}\\right)\\boldsymbol{p}}{\\delta\\xi} \\\\ &amp;=\\lim_{\\delta\\boldsymbol{\\xi}\\to\\mathbf{0}}\\frac{\\left(\\boldsymbol{I}+\\delta\\boldsymbol{\\xi}^{\\wedge}\\right)\\exp\\left(\\boldsymbol{\\xi}^{\\wedge}\\right)\\boldsymbol{p}-\\exp\\left(\\boldsymbol{\\xi}^{\\wedge}\\right)\\boldsymbol{p}}{\\delta\\boldsymbol{\\xi}} \\\\ &amp;=\\lim_{\\delta\\boldsymbol{\\xi}\\to0}\\frac{\\delta\\boldsymbol{\\xi}^{\\wedge}\\exp\\left(\\boldsymbol{\\xi}^{\\wedge}\\right)\\boldsymbol{p}}{\\delta\\boldsymbol{\\xi}} \\\\ &amp;=\\lim_{\\delta\\boldsymbol{\\xi}\\to\\mathbf{0}}\\frac{\\begin{bmatrix}\\delta\\boldsymbol{\\phi}^\\wedge&amp;\\delta\\boldsymbol{\\rho}\\\\\\\\\\mathbf{0}^\\mathrm{T}&amp;0\\end{bmatrix}\\begin{bmatrix}\\boldsymbol{R}\\boldsymbol{p}+\\boldsymbol{t}\\\\\\\\1\\end{bmatrix}}{\\delta\\boldsymbol{\\xi}} \\\\ &amp;=\\lim_{\\delta\\boldsymbol{\\xi}\\to\\boldsymbol{0}}\\frac{\\begin{bmatrix}\\delta\\boldsymbol{\\phi}^{\\wedge}\\left(\\boldsymbol{R}\\boldsymbol{p}+\\boldsymbol{t}\\right)+\\delta\\boldsymbol{\\rho}\\\\\\boldsymbol{0}^{\\mathrm{T}}\\end{bmatrix}}{[\\delta\\boldsymbol{\\rho},\\delta\\boldsymbol{\\phi}]^{\\mathrm{T}}}=\\begin{bmatrix}\\boldsymbol{I}&amp;-(\\boldsymbol{R}\\boldsymbol{p}+\\boldsymbol{t})^{\\wedge}\\\\\\boldsymbol{0}^{\\mathrm{T}}&amp;\\boldsymbol{0}^{\\mathrm{T}}\\end{bmatrix}\\stackrel{\\mathrm{def}}{=}(\\boldsymbol{T}\\boldsymbol{p})^{\\odot}. \\end{aligned} \\] \\[ \\frac{\\mathrm{d}\\begin{bmatrix}a\\\\b\\end{bmatrix}}{\\mathrm{d}\\begin{bmatrix}x\\\\y\\end{bmatrix}}=\\left(\\frac{\\mathrm{d}[a,b]^\\mathrm{T}}{\\mathrm{d}\\begin{bmatrix}x\\\\y\\end{bmatrix}}\\right)^\\mathrm{T}=\\begin{bmatrix}\\frac{\\mathrm{d}a}{\\mathrm{d}x}&amp;\\frac{\\mathrm{d}b}{\\mathrm{d}x}\\\\\\frac{\\mathrm{d}a}{\\mathrm{d}y}&amp;\\frac{\\mathrm{d}b}{\\mathrm{d}y}\\end{bmatrix}^\\mathrm{T}=\\begin{bmatrix}\\frac{\\mathrm{d}a}{\\mathrm{d}x}&amp;\\frac{\\mathrm{d}a}{\\mathrm{d}y}\\\\\\frac{\\mathrm{d}b}{\\mathrm{d}x}&amp;\\frac{\\mathrm{d}b}{\\mathrm{d}y}\\end{bmatrix} \\]"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#45-sophus","title":"4.5 \u5b9e\u8df5:Sophus","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#451-sophus","title":"4.5.1 Sophus \u7684\u57fa\u672c\u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#452","title":"4.5.2 \u4f8b\u5b50: \u8bc4\u4f30\u8f68\u8ff9\u7684\u8bef\u5dee","text":"<ul> <li>\u7edd\u5bf9\u8f68\u8ff9\u8bef\u5dee\uff08Absolute Trajectory Error, ATE\uff09</li> </ul> \\[ \\mathrm{ATE}_{\\mathrm{all}}=\\sqrt{\\frac{1}{N}\\sum_{i=1}^{N}\\|\\log(T_{\\mathrm{gt},i}^{-1}T_{\\mathrm{esti},i})^{\\vee}\\|_{2}^{2}}, \\] <p>\u5373\u5747\u65b9\u6839\u8bef\u5dee\uff08Root-Mean-Squared Error, RMSE\uff09</p> <ul> <li>\u7edd\u5bf9\u5e73\u79fb\u8bef\u5dee\uff08Average Translational Error\uff09</li> </ul> \\[ \\mathrm{ATE}_{\\mathrm{all}}=\\sqrt{\\frac{1}{N}\\sum_{i=1}^{N}\\|\\log(T_{\\mathrm{gt},i}^{-1}T_{\\mathrm{esti},i})^{\\vee}\\|_{2}^{2}}, \\] <ul> <li>\u76f8\u5bf9\u4f4d\u59ff\u8bef\u5dee\uff08Relative Pose Error, RPE\uff09</li> </ul> \\[ \\mathrm{RPE}_{\\mathrm{all}}=\\sqrt{\\frac{1}{N-\\Delta t}\\sum_{i=1}^{N-\\Delta t}\\|\\log\\left(\\left(\\boldsymbol{T}_{\\mathrm{gt},i}^{-1}\\boldsymbol{T}_{\\mathrm{gt},i+\\Delta t}\\right)\\right)^{-1}\\left(\\boldsymbol{T}_{\\mathrm{est},i}^{-1}\\boldsymbol{T}_{\\mathrm{est},i+\\Delta t}\\right))^{\\vee}\\|_{2}^{2}}, \\] \\[ \\mathrm{RPE}_{\\mathrm{trans}}=\\sqrt{\\frac{1}{N-\\Delta t}\\sum_{i=1}^{N-\\Delta t}\\|\\mathrm{trans}\\left(\\left(T_{gt,i}^{-1}T_{gt,i+\\Delta t}\\right)\\right)^{-1}\\left(T_{\\mathrm{esti},i}^{-1}T_{\\mathrm{esti},i+\\Delta t}\\right))\\|_{2}^{2}}. \\] <p>\u4ee3\u7801\u8ba1\u7b97:</p> <pre><code>TODO\n</code></pre>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#46","title":"4.6 \u76f8\u4f3c\u53d8\u6362\u4e0e\u674e\u4ee3\u6570","text":"<p>\u5728\u8fd9\u91cc\u6211\u4eec\u8ba8\u8bba Sim (3) \u548c\u5bf9\u5e94\u7684\u674e\u4ee3\u6570 \\(\\displaystyle \\mathfrak{sim}(3)\\)\u3002 \u5bf9\u4e8e\u4f4d\u4e8e\u7a7a\u95f4\u7684\u70b9 \\(\\displaystyle \\boldsymbol{p}\\)\uff0c\u5728\u76f8\u673a\u5750\u6807\u7cfb\u4e0b\u8981\u7ecf\u8fc7\u4e00\u4e2a\u76f8\u4f3c\u53d8\u6362\uff0c\u800c\u975e\u6b27\u6c0f\u53d8\u6362:</p> \\[ \\boldsymbol{p}'=\\begin{bmatrix}s\\boldsymbol{R}&amp;\\boldsymbol{t}\\\\\\boldsymbol{0}^\\mathrm{T}&amp;1\\end{bmatrix}\\boldsymbol{p}=s\\boldsymbol{R}\\boldsymbol{p}+\\boldsymbol{t}. \\] \\[ \\mathrm{Sim}(3)=\\left\\{S=\\begin{bmatrix}sR&amp;t\\\\\\\\\\mathbf{0}^\\mathrm{T}&amp;1\\end{bmatrix}\\in\\mathbb{R}^{4\\times4}\\right\\}. \\] \\[ \\sin(3)=\\left\\{\\zeta|\\zeta=\\begin{bmatrix}\\rho\\\\\\\\\\phi\\\\\\\\\\sigma\\end{bmatrix}\\in\\mathbb{R}^7,\\zeta^\\wedge=\\begin{bmatrix}\\sigma\\boldsymbol{I}+\\phi^\\wedge&amp;\\rho\\\\\\\\\\mathbf{0}^\\mathrm{T}&amp;0\\end{bmatrix}\\in\\mathbb{R}^{4\\times4}\\right\\}. \\] \\[ \\exp\\left(\\zeta^{\\wedge}\\right)=\\begin{bmatrix}\\mathrm{e}^{\\sigma}\\exp\\left(\\phi^{\\wedge}\\right)&amp;J_{s}\\rho\\\\0^{\\mathrm{T}}&amp;1\\end{bmatrix}. \\] <p>\u5176\u4e2d\uff0c\\(\\displaystyle \\boldsymbol{J}_{S}\\) \u7684\u5f62\u5f0f\u662f:</p> \\[ \\begin{aligned} \\text{J}&amp; =\\frac{\\mathrm{e}^{\\sigma}-1}{\\sigma}I+\\frac{\\sigma\\mathrm{e}^{\\sigma}\\sin\\theta+\\left(1-\\mathrm{e}^{\\sigma}\\cos\\theta\\right)\\theta}{\\sigma^{2}+\\theta^{2}}\\boldsymbol{a}^{\\wedge} \\\\ &amp;+\\left(\\frac{\\mathrm{e}^\\sigma-1}{\\sigma}-\\frac{\\left(\\mathrm{e}^\\sigma\\cos\\theta-1\\right)\\sigma+\\left(\\mathrm{e}^\\sigma\\sin\\theta\\right)\\theta}{\\sigma^2+\\theta^2}\\right)\\boldsymbol{a}^\\wedge\\boldsymbol{a}^\\wedge. \\end{aligned} \\] <p>\u4e8e\u662f\uff0c\u674e\u4ee3\u6570\u4e0e\u674e\u7fa4\u7684\u5173\u7cfb:</p> \\[ s=\\mathrm{e}^\\sigma, R=\\exp(\\phi^\\wedge), t=J_s\\rho. \\] \\[ \\frac{\\partial\\boldsymbol{Sp}}{\\partial\\boldsymbol{\\zeta}}=\\begin{bmatrix}\\boldsymbol{I}&amp;-\\boldsymbol{q}^\\wedge&amp;\\boldsymbol{q}\\\\\\boldsymbol{0}^\\mathrm{T}&amp;\\boldsymbol{0}^\\mathrm{T}&amp;0\\end{bmatrix}. \\]"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#47","title":"4.7 \u4e60\u9898","text":"<p>TODO</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#5","title":"5 \u76f8\u673a\u4e0e\u56fe\u50cf","text":"<ul> <li>\u89c2\u6d4b\u4e3b\u8981\u662f\u6307\u76f8\u673a\u6210\u50cf\u7684\u8fc7\u7a0b\u3002</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#51","title":"5.1 \u76f8\u673a\u6a21\u578b","text":"<ul> <li>\u9488\u5b54\u6a21\u578b</li> <li>\u900f\u955c\u4f1a\u4ea7\u751f\u7578\u53d8</li> <li>\u5185\u53c2\u6570\uff08Intrinsics\uff09</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#511","title":"5.1.1 \u9488\u5b54\u76f8\u673a\u6a21\u578b","text":"\\[ \\frac{Z}{f}=-\\frac{X}{X'}=-\\frac{Y}{Y'}. \\] <p>\u53bb\u6389\u8d1f\u53f7:</p> \\[ \\frac Zf=\\frac X{X^{\\prime}}=\\frac Y{Y^{\\prime}}. \\] \\[ \\begin{aligned}X'&amp;=f\\frac{X}{Z}\\\\Y'&amp;=f\\frac{Y}{Z}\\end{aligned}. \\] <p>\u8fd8\u6709\u4e00\u4e2a\u50cf\u7d20\u5750\u6807\u7cfb\uff0cu \u8f74\u4e0e x \u8f74\u5e73\u884c\uff0cv \u8f74\u4e0e y \u8f74\u5e73\u884c:</p> \\[ \\begin{cases}u=\\alpha X'+c_x\\\\[2ex]v=\\beta Y'+c_y\\end{cases}. \\] \\[ \\begin{cases}u=f_x\\frac{X}{Z}+c_x\\\\\\\\v=f_y\\frac{Y}{Z}+c_y\\end{cases}. \\] \\[ Z\\begin{pmatrix}u\\\\\\\\v\\\\\\\\1\\end{pmatrix}=\\begin{pmatrix}f_x&amp;0&amp;c_x\\\\0&amp;f_y&amp;c_y\\\\\\\\0&amp;0&amp;1\\end{pmatrix}\\begin{pmatrix}X\\\\\\\\Y\\\\\\\\Z\\end{pmatrix}\\overset{\\text{def}}{=}\\boldsymbol{KP}. \\] <p>\u6700\u4e2d\u95f4\u7684\u77e9\u9635\u79f0\u4e3a\u76f8\u673a\u7684\u5185\u53c2\u6570\uff08Camera Inrinsics\uff09\u77e9\u9635 \\(\\displaystyle \\boldsymbol{K}\\)\u3002 \u6807\u5b9a: \u786e\u5b9a\u76f8\u673a\u7684\u5185\u53c2</p> \\[ Z\\boldsymbol{P}_{uv}=Z\\begin{bmatrix}u\\\\\\\\v\\\\\\\\1\\end{bmatrix}=\\boldsymbol{K}\\left(\\boldsymbol{R}\\boldsymbol{P}_\\mathrm{w}+\\boldsymbol{t}\\right)=\\boldsymbol{K}\\boldsymbol{T}\\boldsymbol{P}_\\mathrm{w}. \\] <p>\u5176\u4e2d \\(\\displaystyle \\boldsymbol{R},\\boldsymbol{t}\\) \u53c8\u79f0\u4e3a\u76f8\u673a\u7684\u5916\u53c2\u6570\uff08Camera Extrinsics\uff09</p> \\[ (\\boldsymbol{RP_\\mathrm{w}}+\\boldsymbol{t})=\\underbrace{[X,Y,Z]^\\mathrm{T}}_{\\text{\u76f8\u673a\u5750\u6807}}\\to\\underbrace{[X/Z,Y/Z,1]^\\mathrm{T}}_{\\text{\u5f52\u4e00\u5316\u5750\u6807}} . \\] <ul> <li>\u5f52\u4e00\u5316\u5e73\u9762</li> <li>\u70b9\u7684\u6df1\u5ea6\u5728\u6295\u5f71\u8fc7\u7a0b\u4e2d\u88ab\u4e22\u5931\u4e86</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#512","title":"5.1.2 \u7578\u53d8\u6a21\u578b","text":"<ul> <li>\u7578\u53d8 (Distortion \u5931\u771f) \u5f84\u5411\u7578\u53d8<ul> <li>\u7b52\u5f62\u7578\u53d8</li> <li>\u6795\u5f62\u7578\u53d8 </li> </ul> </li> <li>\u5f84\u5411\u7578\u53d8\u5373 \\(\\displaystyle r\\) \u53d8\u5316</li> <li>\u5207\u5411\u7578\u53d8\u5373 \\(\\displaystyle \\theta\\) \u53d8\u5316 \u6211\u4eec\u53ef\u4ee5\u5047\u8bbe:</li> </ul> \\[ \\begin{align} x_{\\mathrm{distorted}}&amp;=x(1+k_1r^2+k_2r^4+k_3r^6) \\\\ y_{\\mathrm{distorted}}&amp;=y(1+k_1r^2+k_2r^4+k_3r^6). \\end{align} \\] \\[ \\begin{align} x_{\\mathrm{distorted}}&amp;=x+2p_1xy+p_2(r^2+2x^2) \\\\ y_{\\mathrm{distorted}}&amp;=y+p_1(r^2+2y^2)+2p_2xy \\end{align} \\] <p>\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u70b9\u5728\u50cf\u7d20\u5e73\u9762\u4e0a\u7684\u6b63\u786e\u4f4d\u7f6e:</p> <ol> <li>\u5c06\u4e09\u7ef4\u7a7a\u95f4\u70b9\u6295\u5f71\u5230\u5f52\u4e00\u5316\u56fe\u50cf\u5e73\u9762\u3002\u8bbe\u5b83\u7684\u5f52\u4e00\u5316\u5750\u6807\u4e3a \\(\\displaystyle [x, y]^\\mathrm{T}\\)\u3002</li> <li>\u5bf9\u5f52\u4e00\u5316\u5e73\u9762\u4e0a\u7684\u70b9\u8ba1\u7b97\u5f84\u5411\u7578\u53d8\u548c\u5207\u5411\u7578\u53d8</li> </ol> \\[ \\begin{cases}x_\\text{distorted}=x(1+k_1r^2+k_2r^4+k_3r^6)+2p_1xy+p_2(r^2+2x^2)\\\\y_\\text{distorted}=y(1+k_1r^2+k_2r^4+k_3r^6)+p_1(r^2+2y^2)+2p_2xy\\end{cases} \\] <ol> <li>\u5c06\u7578\u53d8\u540e\u7684\u70b9\u901a\u8fc7\u5185\u53c2\u6570\u77e9\u9635\u6295\u5f71\u5230\u50cf\u7d20\u5e73\u9762\uff0c\u5f97\u5230\u8be5\u70b9\u5728\u56fe\u50cf\u4e0a\u7684\u6b63\u786e\u4f4d\u7f6e\u3002</li> </ol> \\[ \\begin{cases}u=f_xx_\\text{distorted}+c_x\\\\\\\\v=f_yy_\\text{distorted}+c_y\\end{cases}. \\] <p>\u8fd8\u6709\u5f88\u591a\u7684\u76f8\u673a\u6a21\u578b\u6bd4\u5982: \u4eff\u5c04\u6a21\u578b\uff0c\u900f\u89c6\u6a21\u578b\u3002</p> <p>\u603b\u7ed3\u4e00\u4e0b\u5355\u76ee\u76f8\u673a\u7684\u6210\u50cf\u8fc7\u7a0b:</p> <ol> <li>\u4e16\u754c\u5750\u6807\u7cfb\u4e0b\u6709\u4e00\u4e2a\u56fa\u5b9a\u7684\u70b9 \\(\\displaystyle P\\)\uff0c\u4e16\u754c\u5750\u6807\u4e3a \\(\\displaystyle \\boldsymbol{P}_{w}\\)\u3002</li> <li>\u7531\u4e8e\u76f8\u673a\u5728\u8fd0\u52a8\uff0c\u5b83\u7684\u8fd0\u52a8\u7531 \\(\\displaystyle \\boldsymbol{R},\\boldsymbol{t}\\) \u6216\u53d8\u6362\u77e9\u9635 \\(\\displaystyle \\boldsymbol{T}\\in SE(3)\\) \u63cf\u8ff0\u3002\\(\\displaystyle P\\) \u7684\u76f8\u673a\u5750\u6807\u4e3a \\(\\displaystyle \\tilde{P_{c}} = \\boldsymbol{R}\\boldsymbol{P}_{w}+\\boldsymbol{t}\\)\u3002</li> <li>\u8fd9\u65f6\u7684 \\(\\displaystyle \\tilde{\\boldsymbol{P}_{c}}\\) \u7684\u5206\u91cf\u662f \\(\\displaystyle X,Y,Z\\) \uff0c\u628a\u5b83\u4eec\u6295\u5f71\u5230\u5f52\u4e00\u5316\u5e73\u9762 \\(\\displaystyle Z = 1\\) \u4e0a\uff0c\u5f97\u5230 \\(\\displaystyle P\\) \u7684\u5f52\u4e00\u5316\u5750\u6807: \\(\\displaystyle \\boldsymbol{P}_{c} = \\left[ \\frac{X}{Z},   \\frac{Y}{Z}, 1 \\right]^\\mathrm{T}\\)\u3002</li> <li>\u6709\u7578\u53d8\u65f6\uff0c\u6839\u636e\u7578\u53d8\u53c2\u6570\u8ba1\u7b97 \\(\\displaystyle \\boldsymbol{P}_{c}\\) \u53d1\u751f\u7578\u53d8\u540e\u7684\u5750\u6807\u3002</li> <li>\\(\\displaystyle P\\) \u7684\u5f52\u4e00\u5316\u5750\u6807\u7ecf\u8fc7\u5185\u53c2\u540e\uff0c\u5bf9\u5e94\u5230\u5b83\u7684\u50cf\u7d20\u5750\u6807: \\(\\displaystyle \\boldsymbol{P}_{uv} = \\boldsymbol{K} \\boldsymbol{P}_{c}\\)\u3002</li> </ol>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#513","title":"5.1.3 \u53cc\u76ee\u76f8\u673a\u6a21\u578b","text":"<p> \u4e24\u8005\u4e4b\u95f4\u7684\u8ddd\u79bb\u79f0\u4e3a\u53cc\u76ee\u76f8\u673a\u7684\u57fa\u7ebf</p> \\[ z=\\frac{fb}{d},\\quad d\\stackrel{\\mathrm{def}}{=}u_{\\mathrm{L}}-u_{\\mathrm{R}}. \\] <ul> <li>d \u5b9a\u4e49\u4e3a\u5de6\u53f3\u56fe\u7684\u6a2a\u5750\u6807\u4e4b\u5dee\uff0c\u79f0\u4e3a\u89c6\u5dee\u3002<ul> <li>\u7531\u4e8e\u89c6\u5dee\u6700\u5c0f\u4e3a\u4e00\u4e2a\u50cf\u7d20\uff0c\u6240\u4ee5\u53cc\u76ee\u7684\u6df1\u5ea6\u5b58\u5728\u4e00\u4e2a\u7406\u8bba\u4e0a\u7684\u6700\u5927\u503c\u3002</li> </ul> </li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#514-rgb-d","title":"5.1.4 RGB-D \u76f8\u673a\u6a21\u578b","text":"<ul> <li>\u7ea2\u5916\u7ed3\u6784\u5149\uff08Structured lightning\uff09</li> <li>\u98de\u884c\u65f6\u95f4\uff08Time-of-Flight, ToF\uff09 </li> <li>ToF \u76f8\u673a\u53ef\u4ee5\u83b7\u5f97\u6574\u4e2a\u56fe\u50cf\u7684\u50cf\u7d20\u6df1\u5ea6</li> <li>\u8f93\u51fa\u5f69\u8272\u56fe\u548c\u6df1\u5ea6\u56fe\uff0c\u751f\u6210\u70b9\u4e91\uff08Point Cloud\uff09</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#52","title":"5.2 \u56fe\u50cf","text":"\\[ I(x,y):\\mathbb{R}^2\\mapsto\\mathbb{R}. \\] <ul> <li>channel</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#53","title":"5.3 \u5b9e\u8df5: \u8ba1\u7b97\u673a\u4e2d\u7684\u56fe\u50cf","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#531-opencv","title":"5.3.1 OpenCV \u7684\u57fa\u672c\u4f7f\u7528\u65b9\u6cd5","text":"<p>TODO</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#532","title":"5.3.2 \u56fe\u50cf\u53bb\u7578\u53d8","text":"<p>TODO</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#54-3-d","title":"5.4 \u5b9e\u8df5: 3 D \u89c6\u89c9","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#541","title":"5.4.1 \u53cc\u76ee\u89c6\u89c9","text":"<p>TODO</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#542-rgb-d","title":"5.4.2 RGB-D \u89c6\u89c9","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#55","title":"5.5 \u4e60\u9898","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#6","title":"6 \u975e\u7ebf\u6027\u4f18\u5316","text":"<p>\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u641e\u6e05\u695a\u4e86\u8fd0\u52a8\u65b9\u7a0b\u548c\u89c2\u6d4b\u65b9\u7a0b\u7684\u6765\u6e90\uff0c\u73b0\u5728\u6211\u4eec\u5f00\u59cb\u8ba8\u8bba\u566a\u58f0\u3002</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#61","title":"6.1 \u72b6\u6001\u4f30\u8ba1\u95ee\u9898","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#611","title":"6.1.1 \u6279\u91cf\u72b6\u6001\u4f30\u8ba1\u4e0e\u6700\u5927\u540e\u9a8c\u4f30\u8ba1","text":"\\[ \\begin{cases}\\boldsymbol{x}_k=f\\left(\\boldsymbol{x}_{k-1},\\boldsymbol{u}_k\\right)+\\boldsymbol{w}_k\\\\\\boldsymbol{z}_{k,j}=h\\left(\\boldsymbol{y}_j,\\boldsymbol{x}_k\\right)+\\boldsymbol{v}_{k,j}\\end{cases}. \\] \\[ s\\boldsymbol{z}_{k,j}=\\boldsymbol{K}(R_k\\boldsymbol{y}_j+\\boldsymbol{t}_k). \\] <p>\u5176\u4e2d \\(\\displaystyle s\\) \u4e3a\u50cf\u7d20\u70b9\u7684\u8ddd\u79bb\u3002 \u6211\u4eec\u901a\u5e38\u5047\u8bbe\u566a\u58f0\u9879\u6ee1\u8db3\u96f6\u5747\u503c\u7684\u9ad8\u65af\u5206\u5e03:</p> \\[ \\boldsymbol{w}_k\\sim\\mathcal{N}\\left(\\boldsymbol{0},\\boldsymbol{R}_k\\right),\\boldsymbol{v}_k\\sim\\mathcal{N}\\left(\\boldsymbol{0},\\boldsymbol{Q}_{k,j}\\right). \\] <p>\u6709\u4e24\u79cd\u65b9\u6cd5\u6765\u89e3\u51b3\u72b6\u6001\u4f30\u8ba1\u95ee\u9898:</p> <ul> <li>\u7528\u65b0\u7684\u6570\u636e\u6765\u66f4\u65b0\u5f53\u524d\u65f6\u523b\u7684\u4f30\u8ba1\u72b6\u6001\uff0c\u589e\u91cf/\u6e10\u8fdb (incremental) \u7684\u65b9\u6cd5\uff0c\u6216\u8005\u6559\u6ee4\u6ce2\u5668</li> <li>\u4e5f\u53ef\u4ee5\u628a\u6570\u636e\u90fd\u6512\u8d77\u6765\uff0c\u79f0\u4e3a\u6279\u91cf (batch) \u7684\u65b9\u6cd5 SfM (Structure from Motion) \u7efc\u5408\u4e00\u4e0b\u5c31\u6709\u4e86\u6ed1\u52a8\u7a97\u53e3\u4f30\u8ba1\u6cd5</li> </ul> \\[ \\boldsymbol{x}=\\{\\boldsymbol{x}_1,\\ldots,\\boldsymbol{x}_N\\},\\quad\\boldsymbol{y}=\\{\\boldsymbol{y}_1,\\ldots,\\boldsymbol{y}_M\\}. \\] \\[ P(\\boldsymbol{x},\\boldsymbol{y}|z,\\boldsymbol{u}). \\] \\[ P\\left(\\boldsymbol{x},\\boldsymbol{y}|\\boldsymbol{z},\\boldsymbol{u}\\right)=\\frac{P\\left(\\boldsymbol{z},\\boldsymbol{u}|\\boldsymbol{x},\\boldsymbol{y}\\right)P\\left(\\boldsymbol{x},\\boldsymbol{y}\\right)}{P\\left(\\boldsymbol{z},\\boldsymbol{u}\\right)}\\propto\\underbrace{P\\left(\\boldsymbol{z},\\boldsymbol{u}|\\boldsymbol{x},\\boldsymbol{y}\\right)}_{\\text{\u4f3c\u7136}}\\underbrace{P\\left(\\boldsymbol{x},\\boldsymbol{y}\\right)}_{\\text{\u5148\u9a8c}}. \\] <p>\u53ef\u4ee5\u5148\u6c42\u4e00\u4e2a\u72b6\u6001\u6700\u4f18\u4f30\u8ba1:</p> \\[ (\\boldsymbol{x},\\boldsymbol{y})^*_{\\mathrm{MAP}}=\\arg\\max P(\\boldsymbol{x},\\boldsymbol{y}|\\boldsymbol{z},\\boldsymbol{u})=\\arg\\max P(\\boldsymbol{z},\\boldsymbol{u}|\\boldsymbol{x},\\boldsymbol{y})P(\\boldsymbol{x},\\boldsymbol{y}). \\] <p>\u6c42\u89e3\u6700\u5927\u540e\u9a8c\u6982\u7387\u7b49\u4ef7\u4e8e\u6700\u5927\u5316\u4f3c\u7136\u548c\u5148\u9a8c\u7684\u4e58\u79ef\u3002 \u4f46\u5982\u679c\u6ca1\u6709\u7684\u5148\u9a8c\uff0c\u90a3\u4e48\u53ef\u4ee5\u6c42\u89e3\u6700\u5927\u4f3c\u7136\u4f30\u8ba1 (Maximize Likelihood Estimation\uff0c MLE):</p> \\[ (\\boldsymbol{x},\\boldsymbol{y})^*{}_{\\mathrm{MLE}}=\\arg\\max P(\\boldsymbol{z},\\boldsymbol{u}|\\boldsymbol{x},\\boldsymbol{y}). \\] <p>\u6700\u5927\u4f3c\u7136\u4f30\u8ba1: \u5728\u4ec0\u4e48\u6837\u7684\u72b6\u6001\u4e0b\uff0c\u6700\u53ef\u80fd\u4ea7\u751f\u73b0\u5728\u89c2\u6d4b\u5230\u7684\u6570\u636e\u3002</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#612","title":"6.1.2 \u6700\u5c0f\u4e8c\u4e58\u7684\u5f15\u51fa","text":"<p>\u5bf9\u4e8e\u67d0\u4e00\u6b21\u89c2\u6d4b:</p> \\[ z_{k,j}=h\\left(y_{j},x_{k}\\right)+v_{k,j}, \\] \\[ P(\\boldsymbol{z}_{j,k}|\\boldsymbol{x}_k,\\boldsymbol{y}_j)=N\\left(h(\\boldsymbol{y}_j,\\boldsymbol{x}_k),\\boldsymbol{Q}_{k,j}\\right). \\] <p>\u53ef\u4ee5\u4f7f\u7528\u6700\u5c0f\u5316\u8d1f\u5bf9\u6570\u6765\u6c42\u4e00\u4e2a\u9ad8\u65af\u5206\u5e03\u7684\u6700\u5927\u4f3c\u7136\u3002</p> \\[ P\\left(\\boldsymbol{x}\\right)=\\frac{1}{\\sqrt{\\left(2\\pi\\right)^{N}\\det\\left(\\boldsymbol{\\Sigma}\\right)}}\\exp\\left(-\\frac{1}{2}(\\boldsymbol{x}-\\boldsymbol{\\mu})^{\\mathrm{T}}\\boldsymbol{\\Sigma}^{-1}\\left(\\boldsymbol{x}-\\boldsymbol{\\mu}\\right)\\right). \\] \\[ -\\ln\\left(P\\left(\\boldsymbol{x}\\right)\\right)=\\frac12\\ln\\left(\\left(2\\pi\\right)^N\\det\\left(\\boldsymbol{\\Sigma}\\right)\\right)+\\frac12\\left(\\boldsymbol{x}-\\boldsymbol{\\mu}\\right)^\\mathrm{T}\\boldsymbol{\\Sigma}^{-1}\\left(\\boldsymbol{x}-\\boldsymbol{\\mu}\\right). \\] \\[ \\begin{aligned} (x_{k},y_{j})^{*}&amp; =\\arg\\max\\mathcal{N}(h(\\boldsymbol{y}_{j},\\boldsymbol{x}_{k}),\\boldsymbol{Q}_{k,j}) \\\\ &amp;=\\arg\\min\\left(\\left(\\boldsymbol{z}_{k,j}-h\\left(\\boldsymbol{x}_k,\\boldsymbol{y}_j\\right)\\right)^\\mathrm{T}\\boldsymbol{Q}_{k,j}^{-1}\\left(\\boldsymbol{z}_{k,j}-h\\left(\\boldsymbol{x}_k,\\boldsymbol{y}_j\\right)\\right)\\right). \\end{aligned} \\] <p>\u8be5\u5f0f\u7b49\u4ef7\u4e8e\u6700\u5c0f\u5316\u566a\u58f0\u9879\u7684\u4e00\u4e2a\u4e8c\u6b21\u578b\uff0c\u9a6c\u54c8\u62c9\u8bfa\u6bd4\u65af\u8ddd\u79bb (Mahalanobis distance)\u3002\u5176\u4e2d \\(\\displaystyle \\boldsymbol{Q}_{k,j}^{-1}\\) \u53eb\u4fe1\u606f\u77e9\u9635\uff0c\u5373\u9ad8\u65af\u5206\u5e03\u534f\u65b9\u5dee\u77e9\u9635\u4e4b\u9006\u3002 \u5047\u8bbe\u5404\u4e2a\u65f6\u523b\u7684\u8f93\u5165\u548c\u89c2\u6d4b\u90fd\u662f\u72ec\u7acb\u7684\uff0c\u90a3\u4e48:</p> \\[ P\\left(\\boldsymbol{z},\\boldsymbol{u}|\\boldsymbol{x},\\boldsymbol{y}\\right)=\\prod_kP\\left(\\boldsymbol{u}_k|\\boldsymbol{x}_{k-1},\\boldsymbol{x}_k\\right)\\prod_{k,j}P\\left(\\boldsymbol{z}_{k,j}|\\boldsymbol{x}_k,\\boldsymbol{y}_j\\right), \\] \\[ \\begin{align} e_{u,k} &amp;=\\boldsymbol{x}_k-f\\left(\\boldsymbol{x}_{k-1},\\boldsymbol{u}_k\\right) \\\\ e_{z,j,k} &amp;=\\boldsymbol{z}_{k,j}-h\\left(\\boldsymbol{x}_k,\\boldsymbol{y}_j\\right),  \\end{align} \\] \\[ \\min J(\\boldsymbol{x},\\boldsymbol{y})=\\sum_{k}\\boldsymbol{e}_{\\boldsymbol{u},k}^{\\mathrm{T}}\\boldsymbol{R}_{k}^{-1}\\boldsymbol{e}_{\\boldsymbol{u},k}+\\sum_{k}\\sum_{j}\\boldsymbol{e}_{\\boldsymbol{z},k,j}^{\\mathrm{T}}\\boldsymbol{Q}_{k,j}^{-1}\\boldsymbol{e}_{\\boldsymbol{z},k,j}. \\] <p>\u8fd9\u6837\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898 (Least Square Problem) </p> <ul> <li>\u6574\u4e2a\u95ee\u9898\u6709\u4e00\u79cd\u7a00\u758f\u7684\u5f62\u5f0f\u3002</li> <li>\u7528\u674e\u4ee3\u6570\u8868\u793a\u589e\u91cf\u4f1a\u6709\u65e0\u7ea6\u675f\u7684\u4f18\u52bf\u3002</li> <li>\u7528\u4e8c\u6b21\u578b\u5ea6\u91cf\u8bef\u5dee\uff0c\u90a3\u4e48\u8bef\u5dee\u7684\u5206\u5e03\u4f1a\u5f71\u54cd\u6b64\u9879\u5728\u6574\u4e2a\u95ee\u9898\u4e2d\u7684\u6743\u91cd\u3002 \u63a5\u4e0b\u4fe9\u8bb2\u4e00\u4e9b\u975e\u7ebf\u6027\u4f18\u5316\u7684\u57fa\u672c\u77e5\u8bc6\uff0c\u6765\u5e2e\u52a9\u6211\u4eec\u6c42\u89e3\u8fd9\u4e2a\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\u3002</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#613","title":"6.1.3 \u4f8b\u5b50: \u6279\u91cf\u72b6\u6001\u4f30\u8ba1","text":"<p>\u8003\u8651\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u79bb\u6563\u65f6\u95f4\u7cfb\u7edf:</p> \\[ \\begin{aligned}&amp;x_{k}=x_{k-1}+u_{k}+w_{k},&amp;&amp;\\boldsymbol{w}_{k}\\sim\\mathcal{N}\\left(0,\\boldsymbol{Q}_{k}\\right)\\\\&amp;\\boldsymbol{z}_{k}=\\boldsymbol{x}_{k}+\\boldsymbol{n}_{k},&amp;&amp;\\boldsymbol{n}_{k}\\sim\\mathcal{N}\\left(0,\\boldsymbol{R}_{k}\\right)\\end{aligned} \\] \\[ \\begin{gathered} x_{map}^{*} =\\arg\\max P(\\boldsymbol{x}|\\boldsymbol{u},\\boldsymbol{z})=\\arg\\max P(\\boldsymbol{u},\\boldsymbol{z}|\\boldsymbol{x}) \\\\ =\\prod_{k=1}^3P(\\boldsymbol{u}_k|\\boldsymbol{x}_{k-1},\\boldsymbol{x}_k)\\prod_{k=1}^3P(\\boldsymbol{z}_k|\\boldsymbol{x}_k),  \\end{gathered} \\] <p>\u800c\u5bf9\u4e8e\u5177\u4f53\u7684\u6bcf\u4e00\u9879\uff0c\u6211\u4eec\u6709:</p> \\[ P(\\boldsymbol{u}_k|\\boldsymbol{x}_{k-1},\\boldsymbol{x}_k)=\\mathcal{N}(\\boldsymbol{x}_k-\\boldsymbol{x}_{k-1},\\boldsymbol{Q}_k), \\] \\[ P\\left(\\boldsymbol{z}_{k}|\\boldsymbol{x}_{k}\\right)=\\mathcal{N}\\left(\\boldsymbol{x}_{k},\\boldsymbol{R}_{k}\\right). \\] <p>\u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u8bef\u5dee\u53d8\u91cf:</p> \\[ e_{\\boldsymbol{u},k}=\\boldsymbol{x}_k-\\boldsymbol{x}_{k-1}-\\boldsymbol{u}_k,\\quad\\boldsymbol{e}_{z,k}=\\boldsymbol{z}_k-\\boldsymbol{x}_k, \\] <p>\u4e8e\u662f\u6700\u5c0f\u4e8c\u4e58\u7684\u76ee\u6807\u51fd\u6570\u4e3a:</p> \\[ \\min\\sum_{k=1}^{3}e_{u,k}^{\\mathrm{T}}Q_{k}^{-1}e_{u,k}+\\sum_{k=1}^{3}e_{z,k}^{\\mathrm{T}}R_{k}^{-1}e_{z,k}. \\] <p>\u5b9a\u4e49\u5411\u91cf \\(\\displaystyle \\boldsymbol{y} = [\\boldsymbol{u},\\boldsymbol{z}]^\\mathrm{T}\\)</p> \\[ y-Hx=e\\sim\\mathcal{N}(\\mathbf{0},\\boldsymbol{\\Sigma}). \\] \\[ H=\\begin{bmatrix}1&amp;-1&amp;0&amp;0\\\\0&amp;1&amp;-1&amp;0\\\\0&amp;0&amp;1&amp;-1\\\\\\hline0&amp;1&amp;0&amp;0\\\\0&amp;0&amp;1&amp;0\\\\0&amp;0&amp;0&amp;1\\end{bmatrix}, \\] <p>\u4e14 \\(\\displaystyle \\Sigma = diag(\\boldsymbol{Q_{1}},\\boldsymbol{Q_{2}},\\boldsymbol{Q_{3}},\\boldsymbol{R_{1}},\\boldsymbol{R_{2}},\\boldsymbol{R_{3}})\\)\u3002 \u95ee\u9898\u5c31\u8f6c\u5316\u6210:</p> \\[ x_{\\mathrm{map}}^*=\\arg\\min e^{\\mathrm{T}}\\Sigma^{-1}e, \\] <p>\u5b83\u7684\u552f\u4e00\u89e3\u662f:</p> \\[ x_{\\mathrm{map}}^{*}=(H^{\\mathrm{T}}\\Sigma^{-1}H)^{-1}H^{\\mathrm{T}}\\Sigma^{-1}y. \\]"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#62","title":"6.2 \u975e\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58","text":"<p>\u5148\u8003\u8651\u4e00\u4e2a\u7b80\u5355\u7684\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898:</p> \\[ \\min_{x}F(x)=\\frac12\\|f\\left(x\\right)\\|_{2}^{2}.` \\] <p>\u5bf9\u4e8e\u4e0d\u65b9\u4fbf\u76f4\u63a5\u6c42\u89e3\u7684\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u8fed\u4ee3\u7684\u65b9\u5f0f\uff0c\u4ece\u4e00\u4e2a\u521d\u59cb\u503c\u51fa\u53d1\uff0c\u4e0d\u65ad\u5730\u66f4\u65b0\u5f53\u524d\u7684\u4f18\u5316\u53d8\u91cf\uff0c\u4f7f\u76ee\u6807\u51fd\u6570\u4e0b\u964d:</p> <ol> <li>\u7ed9\u5b9a\u67d0\u4e2a\u521d\u59cb\u503c \\(\\displaystyle \\boldsymbol{x_{0}}\\)\u3002</li> <li>\u5bf9\u4e8e\u7b2c \\(\\displaystyle k\\) \u6b21\u8fed\u4ee3\uff0c\u5bfb\u627e\u4e00\u4e2a\u589e\u91cf \\(\\displaystyle \\Delta x_{k}\\)\uff0c\u4f7f\u5f97 \\(\\displaystyle \\left\\|f\\left(\\boldsymbol{x}_{k}+\\Delta\\boldsymbol{x}_{k}\\right)\\right\\|_{2}^{2}\\) \u8fbe\u5230\u6700\u5c0f\u503c\u3002</li> <li>\u82e5 \\(\\displaystyle \\Delta x_k\\) \u8db3\u591f\u5c0f\uff0c\u5219\u505c\u6b62\u3002</li> <li>\u5426\u5219\uff0c\u4ee4 \\(\\displaystyle x_{k+1} = x_{k} + \\Delta x_{k}\\)\uff0c\u8fd4\u56de\u7b2c\u4e8c\u6b65 \u4e8e\u662f\u6c42\u89e3\u5bfc\u51fd\u6570\u4e3a\u96f6 -&gt; \u5bfb\u627e\u4e0b\u964d\u589e\u91cf \\(\\displaystyle \\Delta x_{k}\\) </li> </ol> <p>\u4e0b\u9762\u662f\u4e00\u4e9b\u5e7f\u6cdb\u4f7f\u7528\u7684\u7ed3\u679c\u3002</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#621","title":"6.2.1 \u4e00\u9636\u548c\u4e8c\u9636\u68af\u5ea6\u6cd5","text":"<p>\u4f7f\u7528\u6cf0\u52d2\u5c55\u5f00:</p> \\[ F(\\boldsymbol{x}_k+\\Delta\\boldsymbol{x}_k)\\approx F(\\boldsymbol{x}_k)+\\boldsymbol{J}\\left(\\boldsymbol{x}_k\\right)^\\mathrm{T}\\Delta\\boldsymbol{x}_k+\\frac{1}{2}\\Delta\\boldsymbol{x}_k^\\mathrm{T}\\boldsymbol{H}(\\boldsymbol{x}_k)\\Delta\\boldsymbol{x}_k. \\] <p>\u5176\u4e2d \\(\\displaystyle \\boldsymbol{J}(x_{k})\\) \u662f \\(\\displaystyle F(x)\\) \u5173\u4e8e \\(\\displaystyle x\\) \u7684\u4e00\u9636\u5bfc\u6570\uff08\u68af\u5ea6\u3001\u96c5\u53ef\u6bd4\u77e9\u9635\uff09\uff0c\\(\\displaystyle \\boldsymbol{H}\\) \u662f\u4e8c\u9636\u5bfc\u6570\uff08\u6d77\u585e\u77e9\u9635\uff09\u3002</p> \\[ \\Delta\\boldsymbol{x}^*=-\\boldsymbol{J}(\\boldsymbol{x}_k). \\] \\[ \\Delta\\boldsymbol{x}^*=\\arg\\min\\left(F\\left(\\boldsymbol{x}\\right)+\\boldsymbol{J}\\left(\\boldsymbol{x}\\right)^\\mathrm{T}\\Delta\\boldsymbol{x}+\\frac{1}{2}\\Delta\\boldsymbol{x}^\\mathrm{T}\\boldsymbol{H}\\Delta\\boldsymbol{x}\\right). \\] <p>\u5bf9 \\(\\displaystyle \\Delta x\\) \u6c42\u5bfc\uff0c\u5e76\u4ee4\u5b83\u7b49\u4e8e\u96f6\uff0c\u5f97\u5230:</p> \\[ J+H\\Delta x=\\mathbf{0}\\Rightarrow H\\Delta x=-J. \\] <p>\u8fd9\u4e2a\u65b9\u6cd5\u53c8\u53eb\u725b\u987f\u6cd5\u3002</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#622","title":"6.2.2 \u9ad8\u65af\u725b\u987f\u6cd5","text":"<p>\u6362\u4e00\u4e2a\u51fd\u6570\u5c55\u5f00:</p> \\[ f\\left(x+\\Delta x\\right)\\approx f\\left(x\\right)+\\boldsymbol{J}\\left(\\boldsymbol{x}\\right)^{\\mathrm{T}}\\Delta\\boldsymbol{x}. \\] \\[ \\Delta x^{*}=\\arg\\min_{\\Delta x}\\frac{1}{2}\\Big\\|f\\left(\\boldsymbol{x}\\right)+\\boldsymbol{J}\\left(\\boldsymbol{x}\\right)^{\\mathrm{T}}\\Delta\\boldsymbol{x}\\Big\\|^{2}. \\] \\[ \\begin{aligned} \\frac12\\left\\|f\\left(\\boldsymbol{x}\\right)+\\boldsymbol{J}\\left(\\boldsymbol{x}\\right)^\\mathrm{T}\\Delta\\boldsymbol{x}\\right\\|^2&amp; =\\frac12\\Big(f\\left(\\boldsymbol{x}\\right)+\\boldsymbol{J}\\left(\\boldsymbol{x}\\right)^\\mathrm{T}\\Delta\\boldsymbol{x}\\Big)^\\mathrm{T}\\Big(f\\left(\\boldsymbol{x}\\right)+\\boldsymbol{J}\\left(\\boldsymbol{x}\\right)^\\mathrm{T}\\Delta\\boldsymbol{x}\\Big) \\\\ &amp;=\\frac12\\left(\\|f(\\boldsymbol{x})\\|_2^2+2f\\left(\\boldsymbol{x}\\right)\\boldsymbol{J}(\\boldsymbol{x})^\\intercal\\Delta\\boldsymbol{x}+\\Delta\\boldsymbol{x}^\\intercal\\boldsymbol{J}(\\boldsymbol{x})\\boldsymbol{J}(\\boldsymbol{x})^\\intercal\\Delta\\boldsymbol{x}\\right). \\end{aligned} \\] \\[ \\boldsymbol{J}(\\boldsymbol{x})f\\left(\\boldsymbol{x}\\right)+\\boldsymbol{J}(\\boldsymbol{x})\\boldsymbol{J}^\\mathrm{T}\\left(\\boldsymbol{x}\\right)\\Delta\\boldsymbol{x}=\\boldsymbol{0}. \\] \\[ \\underbrace{\\boldsymbol{J}(\\boldsymbol{x})\\boldsymbol{J}^{\\intercal}}_{\\boldsymbol{H}(\\boldsymbol{x})}\\left(\\boldsymbol{x}\\right)\\Delta\\boldsymbol{x}=\\underbrace{-\\boldsymbol{J}(\\boldsymbol{x})f\\left(\\boldsymbol{x}\\right)}_{\\boldsymbol{g}(\\boldsymbol{x})}. \\] <p>\u589e\u91cf\u65b9\u7a0b or Gauss-Newton equation or Normal equation</p> \\[ H\\Delta x=g. \\] <p>\u6c42\u89e3\u589e\u91cf\u65b9\u7a0b\u662f\u6574\u4e2a\u4f18\u5316\u95ee\u9898\u7684\u6838\u5fc3\u6240\u5728 \u603b\u7ed3\u4e00\u4e0b:</p> <ol> <li>\u7ed9\u5b9a\u521d\u59cb\u503c \\(\\displaystyle \\boldsymbol{x}_{0}\\)\u3002</li> <li>\u5bf9\u4e8e\u7b2c \\(\\displaystyle k\\) \u6b21\u8fed\u4ee3\uff0c\u6c42\u89e3\u5f53\u524d\u7684\u96c5\u53ef\u6bd4\u77e9\u9635 \\(\\displaystyle \\boldsymbol{J}(x)\\) \u548c\u8bef\u5dee \\(\\displaystyle f(\\boldsymbol{x}_{k})\\)\u3002</li> <li>\u6c42\u89e3\u589e\u91cf\u65b9\u7a0b: \\(\\displaystyle \\boldsymbol{H} \\Delta x_{k} = \\boldsymbol{g}\\)\u3002</li> <li>\u82e5 \\(\\displaystyle \\Delta x_{k}\\) \u8db3\u591f\u5c0f\uff0c\u5219\u505c\u6b62\u3002\u5426\u5219\uff0c\u4ee4 \\(\\displaystyle x_{k+1} = x_{k}+ \\Delta x_{k}\\)\uff0c\u8fd4\u56de\u7b2c 2 \u6b65\u3002</li> </ol>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#623","title":"6.2.3 \u5217\u6587\u4f2f\u683c\u2014\u2014\u9a6c\u5938\u5c14\u7279\u65b9\u6cd5","text":"<p>Damped Newton Method Trust Region Trust Region Method</p> \\[ \\rho=\\frac{f\\left(\\boldsymbol{x}+\\Delta\\boldsymbol{x}\\right)-f\\left(\\boldsymbol{x}\\right)}{\\boldsymbol{J}\\left(\\boldsymbol{x}\\right)^{\\intercal}\\Delta\\boldsymbol{x}}. \\] <p>\u6846\u67b6:</p> <ol> <li>\u7ed9\u5b9a\u521d\u59cb\u503c \\(\\displaystyle \\boldsymbol{x}_{0}\\)\uff0c\u4ee5\u53ca\u521d\u59cb\u4f18\u5316\u534a\u5f84 \\(\\displaystyle \\mu\\)\u3002</li> <li>\u5bf9\u4e8e\u7b2c \\(\\displaystyle k\\) \u6b21\u8fed\u4ee3\uff0c\u5728\u9ad8\u65af\u725b\u987f\u6cd5\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u4fe1\u8d56\u533a\u57df\uff0c\u6c42\u89e3: \\(\\displaystyle \\min_{\\Delta\\boldsymbol{x}_{k}}\\frac{1}{2}\\Big\\|f\\left(\\boldsymbol{x}_{k}\\right)+\\boldsymbol{J}\\left(\\boldsymbol{x}_{k}\\right)^{\\mathrm{T}}\\Delta\\boldsymbol{x}_{k}\\Big\\|^{2},\\quad\\mathrm{s.t.}\\quad\\left\\|\\boldsymbol{D}\\Delta\\boldsymbol{x}_{k}\\right\\|^{2}\\leqslant\\mu,\\) </li> <li>\u8ba1\u7b97 \\(\\displaystyle \\rho\\)</li> <li>\u5bf9\u4e8e \\(\\displaystyle \\frac{1}{4}  \\frac{3}{4}\\) \u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba</li> <li>\u5224\u65ad\u9608\u503c\uff0c\u5faa\u73af</li> </ol> <p>\u8fd9\u662f\u5e26\u4e0d\u7b49\u5f0f\u7ea6\u675f\u7684\u4f18\u5316\u95ee\u9898:</p> \\[ \\mathcal{L}(\\Delta\\boldsymbol{x}_{k},\\lambda)=\\frac{1}{2}\\left\\|f\\left(\\boldsymbol{x}_{k}\\right)+\\boldsymbol{J}\\left(\\boldsymbol{x}_{k}\\right)^{\\mathrm{T}}\\Delta\\boldsymbol{x}_{k}\\right\\|^{2}+\\frac{\\lambda}{2}\\left(\\left\\|\\boldsymbol{D}\\Delta\\boldsymbol{x}_{k}\\right\\|^{2}-\\mu\\right). \\] \\[ (H+\\lambda D^\\mathrm{T}D) \\Delta x_k=g. \\]"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#63","title":"6.3 \u5b9e\u8df5: \u66f2\u7ebf\u62df\u5408\u95ee\u9898","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#631","title":"6.3.1 \u624b\u5199\u9ad8\u65af\u725b\u987f\u6cd5","text":"<p>TODO</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#632-ceres","title":"6.3.2 \u4f7f\u7528 Ceres \u8fdb\u884c\u66f2\u7ebf\u62df\u5408","text":"<p>TODO</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#633-g2o","title":"6.3.3 \u4f7f\u7528 g2o\u8fdb\u884c\u66f2\u7ebf\u62df\u5408","text":"<p>TODO</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#7-1","title":"7 \u89c6\u89c9\u91cc\u7a0b\u8ba1 1","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#71","title":"7.1 \u7279\u5f81\u70b9\u6cd5","text":"<ul> <li>\u7279\u5f81\u70b9\u6cd5<ul> <li>\u4e24\u89c6\u56fe\u51e0\u4f55\uff08Two-view geometry\uff09</li> </ul> </li> <li>\u76f4\u63a5\u6cd5</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#711","title":"7.1.1 \u7279\u5f81\u70b9","text":"<ul> <li>\u5982\u4f55\u6839\u636e\u56fe\u50cf\u4f30\u8ba1\u76f8\u673a\u8fd0\u52a8</li> <li>\u8def\u6807: \u56fe\u50cf\u7279\u5f81</li> <li>\u7279\u5f81\u70b9\u5728\u76f8\u673a\u8fd0\u52a8\u4e4b\u540e\u4fdd\u6301\u7a33\u5b9a<ul> <li>\u89d2\u70b9</li> </ul> </li> <li>\u4eba\u5de5\u8bbe\u8ba1\u7684\u7279\u5f81\u70b9:<ul> <li>Repeatability</li> <li>Distinctiveness</li> <li>Efficiency</li> <li>Locality</li> </ul> </li> <li>\u7531\u4e24\u90e8\u5206\u7ec4\u6210:<ul> <li>\u5173\u952e\u70b9\uff08Key-point\uff09</li> <li>\u63cf\u8ff0\u5b50\uff08Descriptor\uff09</li> </ul> </li> <li>SIFT (\u5c3a\u5ea6\u4e0d\u53d8\u7279\u5f81\u53d8\u6362\uff0cScale-Invariant Feature Transform)<ul> <li>\u8003\u8651\u5145\u5206\uff0c\u4f46\u662f\u8ba1\u7b97\u91cf\u6bd4\u8f83\u5927</li> </ul> </li> <li>ORB (Oriented FAST and Rotated BRIEF)</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#712-orb","title":"7.1.2 ORB \u7279\u5f81","text":"<ol> <li>FAST \u89d2\u70b9\u63d0\u53d6: ORB \u4e2d\u8ba1\u7b97\u4e86\u7279\u5f81\u70b9\u7684\u4e3b\u65b9\u5411\uff0c\u4e3a\u540e\u7eed\u7684 BRIEF \u63cf\u8ff0\u5b50\u589e\u52a0\u4e86\u65cb\u8f6c\u4e0d\u53d8\u7279\u6027</li> <li>BRIEF \u63cf\u8ff0\u5b50: \u5bf9\u524d\u4e00\u6b65\u63d0\u53d6\u51fa\u7279\u5f81\u70b9\u7684\u5468\u56f4\u56fe\u50cf\u533a\u57df\u8fdb\u884c\u63cf\u8ff0\u3002\u4f7f\u7528\u5148\u524d\u8ba1\u7b97\u7684\u65b9\u5411\u4fe1\u606f\u3002 - FAST \u5173\u952e\u70b9  Non-maximal suppression \u5c3a\u5ea6\u4e0d\u53d8\u6027\u7531\u6784\u5efa\u56fe\u50cf\u91d1\u5b57\u5854 \u7279\u5f81\u7684\u65cb\u8f6c: Intensity Centroid \u65cb\u8f6c\u65b9\u9762\uff0c\u6211\u4eec\u8ba1\u7b97\u7279\u5f81\u70b9\u9644\u8fd1\u7684\u56fe\u50cf\u7070\u5ea6\u8d28\u5fc3\u3002</li> <li>\u5b9a\u4e49\u56fe\u50cf\u7684\u77e9: \\(\\displaystyle m_{pq} = \\Sigma _{x,y \\in B} x^p x^q I(x, y),p,q \\in \\{0, 1\\}\\).</li> <li>\u627e\u5230\u56fe\u50cf\u5757\u7684\u8d28\u5fc3: \\(\\displaystyle C=\\left(\\frac{m_{10}}{m_{00}},\\frac{m_{01}}{m_{00}}\\right).\\)</li> <li>\u5f97\u5230\u4e00\u4e2a\u51e0\u4f55\u4e2d\u5fc3\u5230\u8d28\u5fc3\u7684\u65b9\u5411\u5411\u91cf: \\(\\displaystyle \\theta=\\arctan(m_{01}/m_{10}).\\) - BRIEF \u63cf\u8ff0\u5b50 \u4e8c\u8fdb\u5236\u8868\u8fbe+\u968f\u673a\u9009\u70b9\u6bd4\u8f83</li> </ol>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#713","title":"7.1.3 \u7279\u5f81\u5339\u914d","text":"<p>data association Brute-Force Matcher</p> <ul> <li>\u901a\u8fc7\u6d4b\u91cf\u63cf\u8ff0\u5b50\u7684\u8ddd\u79bb\u6765\u53bb\u6700\u8fd1\u7684\u4e00\u4e2a\u4f5c\u4e3a\u5339\u914d\u70b9\u3002\u63cf\u8ff0\u778e\u5b50\u8ddd\u79bb\u8868\u793a\u4e86\u4e24\u4e2a\u7279\u5f81\u4e4b\u95f4\u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002<ul> <li>\u6b27\u6c0f\u8ddd\u79bb</li> <li>\u6c49\u660e\u8ddd\u79bb<ul> <li>\u4e24\u4e2a\u4e8c\u8fdb\u5236\u4e32\u7684\u4e0d\u540c\u4f4d\u6570\u7684\u4e2a\u6570</li> </ul> </li> </ul> </li> <li>\u5feb\u901f\u8fd1\u4f3c\u6700\u8fd1\u90bb\uff08FLANN\uff09</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#72","title":"7.2 \u5b9e\u8df5: \u7279\u5f81\u63d0\u53d6\u548c\u5339\u914d","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#721-opencv-orb","title":"7.2.1 OpenCV \u7684 ORB \u7279\u5f81","text":"<p>TODO</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#722-orb","title":"7.2.2 \u624b\u5199 ORB \u7279\u5f81","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#723","title":"7.2.3 \u8ba1\u7b97\u76f8\u673a\u8fd0\u52a8","text":"<ol> <li>\u5f53\u76f8\u673a\u4e3a\u5355\u76ee\u65f6\uff0c\u6211\u4eec\u901a\u8fc7\u5bf9\u6781\u51e0\u4f55\u6765\u89e3\u51b3\u4e24\u7ec4 2 D \u70b9\u4f30\u8ba1\u8fd0\u52a8\u7684\u95ee\u9898</li> <li>\u5f53\u76f8\u673a\u4e3a\u53cc\u76ee\u3001RGB-D \u65f6\uff0c\u901a\u8fc7 ICP \u6765\u89e3\u51b3\u4e24\u7ec4 3 D \u70b9\u4f30\u8ba1\u8fd0\u52a8\u7684\u95ee\u9898</li> <li>\u4e00\u4e2a\u662f 2 D \u4e00\u4e2a\u662f 3 D \u65f6\uff0c\u901a\u8fc7 PnP \u6765\u6c42\u89e3</li> </ol>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#73-d-2-d","title":"7.3 D-2 D: \u5bf9\u6781\u51e0\u4f55","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#731","title":"7.3.1 \u5bf9\u6781\u7ea6\u675f","text":"<ul> <li>Epipolar plane</li> <li>Epipoles</li> <li>Epipolar line </li> </ul> \\[ P=[X,Y,Z]^{\\mathrm{T}}. \\] \\[ s_{1}p_{1}=KP,\\quad s_{2}p_{2}=K\\left(RP+t\\right). \\] <p>\u6210\u6295\u5f71\u5173\u7cfb:\u5c3a\u5ea6\u610f\u4e49\u4e0b\u76f8\u7b49 (equal up to scale)</p> \\[ sp\\simeq p. \\] \\[ p_1\\simeq KP,\\quad p_2\\simeq K\\left(RP+t\\right). \\] \\[ x_1=K^{-1}p_1,\\quad x_2=K^{-1}p_2. \\] \\[ x_2\\simeq Rx_1+t. \\] \\[ t^{\\wedge}x_{2}\\simeq t^{\\wedge}Rx_{1}. \\] \\[ x_2^\\mathrm{T}t^\\wedge x_2\\simeq x_2^\\mathrm{T}t^\\wedge Rx_1. \\] \\[ x_2^\\mathrm{T}t^\\wedge Rx_1=0. \\] \\[ p_2^\\mathrm{T}K^{-\\mathrm{T}}t^\\wedge RK^{-1}p_1=0. \\] <p>\u5bf9\u6781\u7ea6\u675f</p> \\[ E=t^{\\wedge}R,\\quad F=K^{-\\mathrm{T}}EK^{-1},\\quad x_{2}^{\\mathrm{T}}Ex_{1}=p_{2}^{\\mathrm{T}}Fp_{1}=0. \\] <ol> <li>\u6839\u636e\u914d\u5bf9\u70b9\u7684\u50cf\u7d20\u4f4d\u7f6e\u6c42\u51fa \\(\\displaystyle \\boldsymbol{E}\\) \u6216\u8005 \\(\\displaystyle \\boldsymbol{F}\\)\u3002</li> <li>\u6839\u636e \\(\\displaystyle \\boldsymbol{E}\\) \u6216\u8005 \\(\\displaystyle \\boldsymbol{F}\\) \u6c42\u51fa \\(\\displaystyle \\boldsymbol{R},\\boldsymbol{t}\\)\u3002 \\(\\displaystyle \\boldsymbol{E}\\) \u548c \\(\\displaystyle \\boldsymbol{F}\\) \u53ea\u76f8\u5dee\u4e86\u76f8\u673a\u5185\u53c2\uff0c\u6240\u4ee5\u5b9e\u8df5\u4e2d\u5f80\u5f80\u4f7f\u7528\u5f62\u5f0f\u66f4\u7b80\u5355\u7684 \\(\\displaystyle \\boldsymbol{E}\\)\u3002</li> </ol>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#732","title":"7.3.2 \u672c\u8d28\u77e9\u9635","text":"<p>\u672c\u8d28\u77e9\u9635: \\(\\displaystyle E=t^{\\wedge}R\\)</p> <ul> <li>\\(\\displaystyle \\boldsymbol{E}\\) \u4e0d\u540c\u5c3a\u5ea6\u4e0b\u662f\u7b49\u4ef7\u7684\u3002</li> <li>\u53ef\u4ee5\u8bc1\u660e\uff0c\u672c\u8d28\u77e9\u9635 \\(\\displaystyle \\boldsymbol{E}\\) \u7684\u5947\u5f02\u503c\u5fc5\u5b9a\u662f \\(\\displaystyle [\\sigma,\\sigma,0]^\\mathrm{T}\\) \u7684\u5f62\u5f0f\uff0c\u8fd9\u79f0\u4e3a\u672c\u8d28\u77e9\u9635\u7684\u5185\u5728\u6027\u8d28\u3002</li> <li>\\(\\displaystyle \\boldsymbol{E}\\) \u5b9e\u9645\u4e0a\u6709 5 \u4e2a\u81ea\u7531\u5ea6\u3002 \u516b\u70b9\u6cd5 (Eight-point-algorithm) \u8003\u8651\u4e00\u5806\u914d\u5bf9\u70b9\uff0c\u5b83\u4eec\u7684\u5f52\u4e00\u5316\u5750\u6807\u4e3a \\(\\displaystyle x_{1}=[u_{1},v_{1},1]^{\\mathrm{T}},x_{2}=[u_{2},v_{2},1]^{\\mathrm{T}}\\)\u3002\u6839\u636e\u5bf9\u6781\u7ea6\u675f\uff0c\u6709</li> </ul> \\[ \\begin{pmatrix}u_2,v_2,1\\end{pmatrix}\\begin{pmatrix}e_1&amp;e_2&amp;e_3\\\\\\\\e_4&amp;e_5&amp;e_6\\\\\\\\e_7&amp;e_8&amp;e_9\\end{pmatrix}\\begin{pmatrix}u_1\\\\\\\\v_1\\\\\\\\1\\end{pmatrix}=0. \\] \\[ \\boldsymbol{e}=[e_1,e_2,e_3,e_4,e_5,e_6,e_7,e_8,e_9]^\\mathrm{T}, \\] \\[ [u_2u_1,u_2v_1,u_2,v_2u_1,v_2v_1,v_2,u_1,v_1,1]\\cdot e=0. \\] <p>\u6211\u4eec\u628a\u6240\u6709\u70b9\u90fd\u653e\u5230\u4e00\u4e2a\u65b9\u7a0b\u4e2d\uff0c\u53d8\u6210\u7ebf\u6027\u65b9\u7a0b\u7ec4:</p> \\[ \\begin{pmatrix}u_2^1u_1^1&amp;u_2^1v_1^1&amp;u_2^1&amp;v_2^1u_1^1&amp;v_2^1v_1^1&amp;v_2^1&amp;u_1^1&amp;v_1^1&amp;1\\\\u_2^2u_1^2&amp;u_2^2v_1^2&amp;u_2^2&amp;v_2^2u_1^2&amp;v_2^2v_1^2&amp;v_2^2&amp;u_1^2&amp;v_1^2&amp;1\\\\\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots&amp;\\vdots\\\\u_2^8u_1^8&amp;u_2^8v_1^8&amp;u_2^8&amp;v_2^8u_1^8&amp;v_2^8u_1^8&amp;u_1^8&amp;v_1^8&amp;1\\end{pmatrix}\\begin{pmatrix}e_1\\\\e_2\\\\e_3\\\\e_4\\\\e_5\\\\e_6\\\\e_7\\\\e_8\\\\e_9\\end{pmatrix}=0. \\] \\[ E=U\\Sigma V^{\\mathrm{T}}, \\] \\[ \\begin{aligned}&amp;t_{1}^{\\wedge}=UR_{Z}(\\frac{\\pi}{2})\\Sigma U^{\\mathrm{T}},\\quad R_{1}=UR_{Z}^{\\mathrm{T}}(\\frac{\\pi}{2})V^{\\mathrm{T}}\\\\&amp;t_{2}^{\\wedge}=UR_{Z}(-\\frac{\\pi}{2})\\Sigma U^{\\mathrm{T}},\\quad R_{2}=UR_{Z}^{\\mathrm{T}}(-\\frac{\\pi}{2})V^{\\mathrm{T}}.\\end{aligned} \\] <p></p> \\[ \\boldsymbol{E}=\\boldsymbol{U}\\mathrm{diag}(\\frac{\\sigma_1+\\sigma_2}2,\\frac{\\sigma_1+\\sigma_2}2,0)\\boldsymbol{V}^\\mathrm{T}. \\]"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#733","title":"7.3.3 \u5355\u5e94\u77e9\u9635","text":"<p>Homography</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#8-2","title":"8 \u89c6\u89c9\u91cc\u7a0b\u8ba1 2","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#81","title":"8.1 \u76f4\u63a5\u6cd5\u7684\u5f15\u51fa","text":"<ul> <li>\u7279\u5f81\u70b9\u6cd5\u7684\u7f3a\u70b9<ul> <li>\u5173\u952e\u70b9\u7684\u63d0\u53d6\u4e0e\u63cf\u8ff0\u5b50\u7684\u8ba1\u7b97\u975e\u5e38\u8017\u65f6</li> <li>\u4f7f\u7528\u7279\u5f81\u70b9\u65f6\uff0c\u4f1a\u5ffd\u7565\u9664\u7279\u5f81\u70b9\u4ee5\u5916\u7684\u6240\u6709\u4fe1\u606f</li> <li>\u76f8\u673a\u6709\u65f6\u4f1a\u8fd0\u52a8\u5230\u7279\u5f81\u7f3a\u5931\u7684\u5730\u65b9</li> </ul> </li> <li>\u90a3\u4e48\u5982\u4f55\u514b\u670d\u8fd9\u4e9b\u7f3a\u70b9<ul> <li>\u4fdd\u7559\u7279\u5f81\u70b9\uff0c\u4f46\u53ea\u8ba1\u7b97\u5173\u952e\u70b9\uff0c\u4e0d\u8ba1\u7b97\u63cf\u8ff0\u5b50\u3002\u4f7f\u7528\u5149\u6d41\u6cd5\uff08Optical Flow\uff09\u8ddf\u8e2a\u7279\u5f81\u70b9\u7684\u8fd0\u52a8</li> <li>\u53ea\u8ba1\u7b97\u5173\u952e\u70b9\uff0c\u4e0d\u8ba1\u7b97\u63cf\u8ff0\u5b50\u3002\u4f7f\u7528\u76f4\u63a5\u6cd5\uff08Direct Method\uff09</li> </ul> </li> <li>\u7b2c\u4e00\u79cd\u65b9\u6cd5\u4ecd\u7136\u4f7f\u7528\u7279\u5f81\u70b9\uff0c\u53ea\u662f\u628a\u5339\u914d\u63cf\u8ff0\u5b57\u66ff\u6362\u6210\u4e86\u5149\u6d41\u8ddf\u8e2a\uff0c\u4f30\u8ba1\u76f8\u673a\u8fd0\u52a8\u65f6\u4ecd\u7136\u662f\u54e6\u90a3\u4e2a\u5bf9\u6781\u51e0\u4f55\u3001PnP \u6216 ICP \u7b97\u6cd5\uff08\u5373\uff0c\u6211\u4eec\u9700\u8981\u63d0\u5230\u89d2\u70b9\uff09</li> <li>\u7279\u5f81\u70b9\u6cd5:\u901a\u8fc7\u6700\u5c0f\u5316\u91cd\u6295\u5f71\u8bef\u5dee\uff08Reprojection error\uff09\u4f18\u5316\u76f8\u673a\u8fd0\u52a8</li> <li>\u76f4\u63a5\u6cd5: \u901a\u8fc7\u6700\u5c0f\u5316\u5149\u5ea6\u8bef\u5dee\uff08Photometric error\uff09</li> <li>\u53ea\u8981\u573a\u666f\u4e2d\u5b58\u5728\u660e\u6697\u53d8\u5316\u5c31\u53ef\u4ee5\u5de5\u4f5c<ul> <li>\u7a20\u5bc6</li> <li>\u534a\u7a20\u5bc6</li> <li>\u7a00\u758f</li> </ul> </li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#82-d","title":"8.2 D \u5149\u6d41","text":"<ul> <li>\u8ba1\u7b97\u90e8\u5206\u50cf\u7d20\u8fd0\u52a8: \u7a00\u758f\u5149\u6d41<ul> <li>Lucas-Kanasde</li> </ul> </li> <li>\u8ba1\u7b97\u6240\u6709\u50cf\u7d20\u8fd0\u52a8: \u7a20\u5bc6\u5149\u6d41<ul> <li>Horn-Schunck Lucas-Kanade \u5149\u6d41</li> </ul> </li> <li>\u7070\u5ea6\u4e0d\u53d8\u5047\u8bbe: \u540c\u4e00\u4e2a\u7a7a\u95f4\u70b9\u7684\u50cf\u7d20\u7070\u5ea6\u503c\uff0c\u5728\u5404\u4e2a\u56fe\u50cf\u4e2d\u65f6\u56fa\u5b9a\u4e0d\u53d8\u7684</li> </ul> \\[ I(x+\\mathrm{d}x,y+\\mathrm{d}y,t+\\mathrm{d}t)=I(x,y,t). \\] \\[ \\boldsymbol{I}\\left(x+\\mathrm{d}x,y+\\mathrm{d}y,t+\\mathrm{d}t\\right)\\approx\\boldsymbol{I}\\left(x,y,t\\right)+\\frac{\\partial\\boldsymbol{I}}{\\partial x}\\mathrm{d}x+\\frac{\\partial\\boldsymbol{I}}{\\partial y}\\mathrm{d}y+\\frac{\\partial\\boldsymbol{I}}{\\partial t}\\mathrm{d}t. \\] \\[ \\frac{\\partial\\boldsymbol{I}}{\\partial x}\\frac{\\mathrm{d}x}{\\mathrm{d}t}+\\frac{\\partial\\boldsymbol{I}}{\\partial y}\\frac{\\mathrm{d}y}{\\mathrm{d}t}=-\\frac{\\partial\\boldsymbol{I}}{\\partial t}. \\] \\[ \\begin{bmatrix}I_x&amp;I_y\\end{bmatrix}\\begin{bmatrix}u\\\\\\\\v\\end{bmatrix}=-I_t. \\] \\[ \\begin{bmatrix}I_x&amp;I_y\\end{bmatrix}_k\\begin{bmatrix}u\\\\\\\\v\\end{bmatrix}=-I_{tk},\\quad k=1,\\ldots,w^2. \\] \\[ A\\begin{bmatrix}u\\\\\\\\v\\end{bmatrix}=-b. \\] \\[ \\begin{bmatrix}u\\\\\\\\v\\end{bmatrix}^*=-\\begin{pmatrix}\\boldsymbol{A}^\\mathrm{T}\\boldsymbol{A}\\end{pmatrix}^{-1}\\boldsymbol{A}^\\mathrm{T}\\boldsymbol{b}. \\]"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#83-lk","title":"8.3 \u5b9e\u8df5: LK \u5149\u6d41","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#831-lk","title":"8.3.1 \u4f7f\u7528 LK \u5149\u6d41","text":"<pre><code>vector&lt;Point2f&gt; pt1, pt2;\nfor (auto &amp;kp: kp1) pt1.push_back(kp.pt);\nvector&lt;uchar&gt; status;\nvector&lt;float&gt; error;\ncv::calcOpticalFlowPyrLK(img1, img2, pt1, pt2, status, error);\n</code></pre>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#832","title":"8.3.2 \u7528\u9ad8\u65af\u725b\u987f\u6cd5\u5b9e\u73b0\u5149\u6d41","text":"<p>\u5355\u5c42\u5149\u6d41 TODO</p> \\[ \\min_{\\Delta x,\\Delta y}\\left\\|\\boldsymbol{I}_1\\left(x,y\\right)-\\boldsymbol{I}_2\\left(x+\\Delta x,y+\\Delta y\\right)\\right\\|_2^2. \\] <p>\u591a\u5c42\u5149\u6d41 - \u7531\u7c97\u81f3\u7cbe\uff08Coarse-to-fine\uff09</p>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#833","title":"8.3.3 \u5149\u6d41\u5b9e\u8df5\u5c0f\u7ed3","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#84","title":"8.4 \u76f4\u63a5\u6cd5","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#841","title":"8.4.1 \u76f4\u63a5\u6cd5\u7684\u63a8\u5bfc","text":"\\[ \\boldsymbol{p}_1=\\begin{bmatrix}u\\\\\\\\v\\\\\\\\1\\end{bmatrix}_1=\\frac{1}{Z_1}\\boldsymbol{K}\\boldsymbol{P}, \\] \\[ \\boldsymbol{p}_{2}=\\begin{bmatrix}u\\\\\\\\v\\\\\\\\1\\end{bmatrix}_{2}=\\frac{1}{Z_{2}}\\boldsymbol{K}\\left(\\boldsymbol{R}\\boldsymbol{P}+\\boldsymbol{t}\\right)=\\frac{1}{Z_{2}}\\boldsymbol{K}\\left(\\boldsymbol{T}\\boldsymbol{P}\\right)_{1:3}. \\] \\[ e=\\boldsymbol{I}_1\\left(\\boldsymbol{p}_1\\right)-\\boldsymbol{I}_2\\left(\\boldsymbol{p}_2\\right). \\] \\[ \\min_{T}J\\left(T\\right)=\\left\\|e\\right\\|^{2}. \\] \\[ \\min_{\\boldsymbol{T}}J\\left(\\boldsymbol{T}\\right)=\\sum_{i=1}^{N}e_{i}^{\\mathrm{T}}e_{i},\\quad e_{i}=\\boldsymbol{I}_{1}\\left(\\boldsymbol{p}_{1,i}\\right)-\\boldsymbol{I}_{2}\\left(\\boldsymbol{p}_{2,i}\\right). \\] \\[ \\begin{aligned}&amp;q=TP,\\\\&amp;\\boldsymbol{u}=\\frac{1}{Z_{2}}Kq.\\end{aligned} \\] \\[ e(T)=I_1(p_1)-I_2(u), \\] \\[ \\frac{\\partial e}{\\partial\\boldsymbol{T}}=\\frac{\\partial\\boldsymbol{I}_{2}}{\\partial\\boldsymbol{u}}\\frac{\\partial\\boldsymbol{u}}{\\partial\\boldsymbol{q}}\\frac{\\partial\\boldsymbol{q}}{\\partial\\delta\\boldsymbol{\\xi}}\\delta\\boldsymbol{\\xi}, \\] \\[ \\frac{\\partial\\boldsymbol{u}}{\\partial\\boldsymbol{q}}=\\begin{bmatrix}\\frac{\\partial u}{\\partial X}&amp;\\frac{\\partial u}{\\partial Y}&amp;\\frac{\\partial u}{\\partial Z}\\\\\\frac{\\partial v}{\\partial X}&amp;\\frac{\\partial v}{\\partial Y}&amp;\\frac{\\partial v}{\\partial Z}\\end{bmatrix}=\\begin{bmatrix}\\frac{f_x}{Z}&amp;0&amp;-\\frac{f_xX}{Z^2}\\\\0&amp;\\frac{f_y}{Z}&amp;-\\frac{f_yY}{Z^2}\\end{bmatrix}. \\] \\[ \\frac{\\partial\\boldsymbol{q}}{\\partial\\delta\\boldsymbol{\\xi}}=\\left[I,-\\boldsymbol{q}^{\\wedge}\\right]. \\] \\[ \\frac{\\partial\\boldsymbol{u}}{\\partial\\delta\\boldsymbol{\\xi}}=\\begin{bmatrix}\\frac{f_x}{Z}&amp;0&amp;-\\frac{f_xX}{Z^2}&amp;-\\frac{f_xXY}{Z^2}&amp;f_x+\\frac{f_xX^2}{Z^2}&amp;-\\frac{f_xY}{Z}\\\\0&amp;\\frac{f_y}{Z}&amp;-\\frac{f_yY}{Z^2}&amp;-f_y-\\frac{f_yY^2}{Z^2}&amp;\\frac{f_yXY}{Z^2}&amp;\\frac{f_yX}{Z}\\end{bmatrix}. \\] \\[ J=-\\frac{\\partial I_2}{\\partial u}\\frac{\\partial u}{\\partial\\delta\\xi}. \\]"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#842","title":"8.4.2 \u76f4\u63a5\u6cd5\u7684\u8ba8\u8bba","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#85","title":"8.5 \u5b9e\u8df5: \u76f4\u63a5\u6cd5","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#851","title":"8.5.1 \u5355\u5c42\u76f4\u63a5\u6cd5","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#852","title":"8.5.2 \u591a\u5c42\u76f4\u63a5\u6cd5","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#853","title":"8.5.3 \u7ed3\u679c\u8ba8\u8bba","text":"<ul> <li>Normalized Cross</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#854","title":"8.5.4 \u76f4\u63a5\u6cd5\u4f18\u7f3a\u70b9\u603b\u7ed3","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#9-1","title":"9 \u540e\u7aef 1","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#91","title":"9.1 \u6982\u8ff0","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#911","title":"9.1.1 \u72b6\u6001\u4f30\u8ba1\u7684\u6982\u7387\u89e3\u91ca","text":"<ul> <li>\u53ea\u4f7f\u7528\u8fc7\u53bb\u7684\u4fe1\u606f: \u6e10\u8fdb\u7684\uff08Incremental\uff09</li> <li>\u4f7f\u7528\u672a\u6765\u7684\u4fe1\u606f\u66f4\u65b0: \u6279\u91cf\u7684\uff08Batch\uff09</li> </ul> \\[ \\begin{cases}\\boldsymbol{x}_k=f\\left(\\boldsymbol{x}_{k-1},\\boldsymbol{u}_k\\right)+\\boldsymbol{w}_k\\\\\\boldsymbol{z}_{k,j}=h\\left(\\boldsymbol{y}_j,\\boldsymbol{x}_k\\right)+\\boldsymbol{v}_{k,j}\\end{cases}\\quad k=1,\\ldots,N, j=1,\\ldots,M. \\] <ul> <li>\u89c2\u6d4b\u65b9\u7a0b\u7684\u6570\u91cf\u4f1a\u8fdc\u8fdc\u5927\u4e8e\u8fd0\u52a8\u65b9\u7a0b</li> <li>\u5f53\u6ca1\u6709\u8fd0\u52a8\u65b9\u7a0b\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\u76f8\u673a\u4e0d\u52a8\uff0c\u6216\u5047\u8bbe\u76f8\u673a\u5300\u901f\u8fd0\u52a8</li> <li>\u95ee\u9898\uff1a\u5f53\u5b58\u5728\u4e00\u4e9b\u8fd0\u52a8\u6570\u636e\u548c\u89c2\u6d4b\u6570\u636e\u65f6\uff0c\u6211\u4eec\u5982\u4f55\u4f30\u8ba1\u72b6\u6001\u91cf\u7684\u9ad8\u65af\u5206\u5e03</li> <li>\u8bef\u5dee\u65f6\u9010\u6e10\u7d2f\u79ef\u7684</li> <li>\u6700\u5927\u4f3c\u7136\u4f30\u8ba1: \u6279\u91cf\u72b6\u6001\u4f30\u8ba1\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6700\u5927\u4f3c\u7136\u4f30\u8ba1\u95ee\u9898\uff0c\u5e76\u4f7f\u7528\u6700\u5c0f\u4e8c\u4e58\u6cd5\u8fdb\u884c\u6c42\u89e3</li> </ul> \\[ x_k\\stackrel{\\mathrm{def}}{=}\\{x_k,y_1,\\ldots,y_m\\}. \\] \\[ \\begin{cases}\\boldsymbol{x}_k=f\\left(\\boldsymbol{x}_{k-1},\\boldsymbol{u}_k\\right)+\\boldsymbol{w}_k\\\\\\boldsymbol{z}_k=h\\left(\\boldsymbol{x}_k\\right)+\\boldsymbol{v}_k\\end{cases}\\quad k=1,\\ldots,N. \\] \\[ P\\left(\\boldsymbol{x}_k|\\boldsymbol{x}_0,\\boldsymbol{u}_{1:k},\\boldsymbol{z}_{1:k}\\right)\\propto P\\left(\\boldsymbol{z}_k|\\boldsymbol{x}_k\\right)P\\left(\\boldsymbol{x}_k|\\boldsymbol{x}_0,\\boldsymbol{u}_{1:k},\\boldsymbol{z}_{1:k-1}\\right). \\] <ul> <li>\u7b2c\u4e00\u9879\u79f0\u4e3a\u4f3c\u7136\uff0c\u7b2c\u4e8c\u9879\u79f0\u4e3a\u5148\u9a8c</li> </ul> \\[ P\\left(\\boldsymbol{x}_{k}|\\boldsymbol{x}_{0},\\boldsymbol{u}_{1:k},\\boldsymbol{z}_{1:k-1}\\right)=\\int P\\left(\\boldsymbol{x}_{k}|\\boldsymbol{x}_{k-1},\\boldsymbol{x}_{0},\\boldsymbol{u}_{1:k},\\boldsymbol{z}_{1:k-1}\\right)P\\left(\\boldsymbol{x}_{k-1}|\\boldsymbol{x}_{0},\\boldsymbol{u}_{1:k},\\boldsymbol{z}_{1:k-1}\\right)\\mathrm{d}\\boldsymbol{x}_{k-1}. \\] <ul> <li>\u867d\u7136\u53ef\u4ee5\u7ee7\u7eed\u5bf9\u6b64\u5f0f\u8fdb\u884c\u5c55\u5f00\uff0c\u4f46\u6211\u4eec\u53ea\u5173\u5fc3 \\(\\displaystyle k\\) \u65f6\u523b\u548c \\(\\displaystyle k - 1\\) \u65f6\u523b\u7684\u60c5\u51b5<ul> <li>\u7b2c\u4e00\u79cd\u65b9\u6cd5\u662f\u5047\u8bbe\u9a6c\u5c14\u53ef\u592b\u6027: \u5373\u8ba4\u4e3a \\(\\displaystyle k\\) \u65f6\u523b\u72b6\u6001\u53ea\u4e0e \\(\\displaystyle k - 1\\) \u65f6\u523b\u72b6\u6001\u6709\u5173<ul> <li>\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4ee5\u6269\u5c55\u5361\u5c14\u66fc\u6ee4\u6ce2\uff08EKF\uff09\u4e3a\u4ee3\u8868\u7684\u6ee4\u6ce2\u5668\u65b9\u5f0f</li> </ul> </li> <li>\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u662f\u4f9d\u7136\u8003\u8651\u548c\u4e4b\u524d\u6240\u6709\u72b6\u6001\u7684\u5173\u7cfb\uff0c\u59ff\u52bf\u4f1a\u5f97\u5230\u975e\u7ebf\u6027\u4f18\u5316\u4e3a\u4e3b\u4f53\u7684\u4f18\u5316\u6846\u67b6\u3002</li> <li>\u4e3b\u6d41\u662f\u975e\u7ebf\u6027\u4f18\u5316</li> </ul> </li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#912-kf","title":"9.1.2 \u7ebf\u6027\u7cfb\u7edf\u548c KF","text":"\\[ P\\left(\\boldsymbol{x}_k|\\boldsymbol{x}_{k-1},\\boldsymbol{x}_0,\\boldsymbol{u}_{1:k},\\boldsymbol{z}_{1:k-1}\\right)=P\\left(\\boldsymbol{x}_k|\\boldsymbol{x}_{k-1},\\boldsymbol{u}_k\\right). \\] \\[ P\\left(\\boldsymbol{x}_{k-1}|\\boldsymbol{x}_0,\\boldsymbol{u}_{1:k},\\boldsymbol{z}_{1:k-1}\\right)=P\\left(\\boldsymbol{x}_{k-1}|\\boldsymbol{x}_0,\\boldsymbol{u}_{1:k-1},\\boldsymbol{z}_{1:k-1}\\right). \\] <ul> <li>\u6240\u4ee5\u6211\u4eec\u5b9e\u9645\u5728\u505a\u7684\u4e8b\u5982\u4f55\u628a \\(\\displaystyle k - 1\\) \u65f6\u523b\u7684\u72b6\u6001\u5206\u5e03\u63a8\u5bfc\u81f3 \\(\\displaystyle k\\) \u65f6\u523b<ul> <li>\u5373\u6211\u4eec\u53ea\u8981\u7ef4\u62a4\u4e00\u4e2a\u72b6\u6001\uff0c\u5e76\u4e0d\u65ad\u5730\u8fed\u4ee3\u66f4\u65b0<ul> <li>\u53ea\u8981\u7ef4\u62a4\u72b6\u6001\u91cf\u7684\u5747\u503c\u548c\u534f\u65b9\u5dee\uff08\u72b6\u6001\u91cf\u670d\u4ece\u9ad8\u65af\u5206\u5e03\uff09</li> </ul> </li> </ul> </li> </ul> \\[ \\begin{cases}x_k=A_kx_{k-1}+u_k+w_k\\\\z_k=C_kx_k+v_k\\end{cases}\\quad k=1,\\ldots,N. \\] \\[ w_k\\sim N(0,\\boldsymbol{R}).\\quad\\boldsymbol{v}_k\\sim N(\\boldsymbol{0},\\boldsymbol{Q}). \\] <ul> <li>\u4e0a\u5e3d\u5b50\u8868\u793a\u540e\u9a8c\uff0c\u4e0b\u5e3d\u5b50\u8868\u793a\u5148\u9a8c</li> </ul> \\[ P\\left(\\boldsymbol{x}_k|\\boldsymbol{x}_0,\\boldsymbol{u}_{1:k},\\boldsymbol{z}_{1:k-1}\\right)=N\\left(\\boldsymbol{A}_k\\hat{x}_{k-1}+\\boldsymbol{u}_k,\\boldsymbol{A}_k\\hat{\\boldsymbol{P}}_{k-1}\\boldsymbol{A}_k^\\mathrm{T}+\\boldsymbol{R}\\right). \\] <ul> <li>\u8fd9\u4e00\u6b65\u79f0\u4e3a\u9884\u6d4b\uff08Predict\uff09</li> </ul> \\[ \\check{\\boldsymbol{x}}_k=\\boldsymbol{A}_k\\hat{\\boldsymbol{x}}_{k-1}+\\boldsymbol{u}_k,\\quad\\check{\\boldsymbol{P}}_k=A_k\\hat{\\boldsymbol{P}}_{k-1}\\boldsymbol{A}_k^\\mathrm{T}+\\boldsymbol{R}. \\] \\[ P\\left(\\boldsymbol{z}_k|\\boldsymbol{x}_k\\right)=N\\left(\\boldsymbol{C}_k\\boldsymbol{x}_k,\\boldsymbol{Q}\\right). \\] <ul> <li>\u5982\u679c\u7ed3\u679c\u8bbe\u4e3a \\(\\displaystyle x_k\\sim N(\\hat{\\boldsymbol{x}}_k,\\hat{\\boldsymbol{P}}_k)\\)\uff0c\u90a3\u4e48</li> </ul> \\[ N(\\hat{\\boldsymbol{x}}_k,\\hat{\\boldsymbol{P}}_k)=\\eta N\\left(\\boldsymbol{C}_k\\boldsymbol{x}_k,\\boldsymbol{Q}\\right)\\cdot N(\\check{\\boldsymbol{x}}_k,\\check{\\boldsymbol{P}}_k). \\] \\[ (\\boldsymbol{x}_{k}-\\hat{\\boldsymbol{x}}_{k})^{\\mathrm{T}}\\hat{\\boldsymbol{P}}_{k}^{-1}\\left(\\boldsymbol{x}_{k}-\\hat{\\boldsymbol{x}}_{k}\\right)=\\left(\\boldsymbol{z}_{k}-\\boldsymbol{C}_{k}\\boldsymbol{x}_{k}\\right)^{\\mathrm{T}}\\boldsymbol{Q}^{-1}\\left(\\boldsymbol{z}_{k}-\\boldsymbol{C}_{k}\\boldsymbol{x}_{k}\\right)+\\left(\\boldsymbol{x}_{k}-\\check{\\boldsymbol{x}}_{k}\\right)^{\\mathrm{T}}\\boldsymbol{P}_{k}^{-1}\\left(\\boldsymbol{x}_{k}-\\check{\\boldsymbol{x}}_{k}\\right). \\] <ul> <li>\u4e8c\u6b21\u7cfb\u6570</li> </ul> \\[ \\hat{P}_k^{-1}=C_k^{\\mathrm{T}}Q^{-1}C_k+\\check{P}_k^{-1}. \\] <ul> <li>\u5b9a\u4e49\u4e00\u4e2a\u4e2d\u95f4\u53d8\u91cf</li> </ul> \\[ K=\\hat{P}_kC_k^{\\mathrm{T}}Q^{-1}. \\] \\[ I=\\hat{P}_{k}C_{k}^{\\mathrm{T}}Q^{-1}C_{k}+\\hat{P}_{k}\\check{P}_{k}^{-1}=KC_{k}+\\hat{P}_{k}\\check{P}_{k}^{-1}. \\] \\[ \\hat{P}_{k}=(I-KC_{k})\\check{P}_{k}. \\] <ul> <li>\u4e00\u6b21\u9879\u7cfb\u6570</li> </ul> \\[ -2\\hat{\\boldsymbol{x}}_k^\\mathrm{T}\\hat{\\boldsymbol{P}}_k^{-1}\\boldsymbol{x}_k=-2\\boldsymbol{z}_k^\\mathrm{T}\\boldsymbol{Q}^{-1}\\boldsymbol{C}_k\\boldsymbol{x}_k-2\\boldsymbol{\\dot{x}}_k^\\mathrm{T}\\check{\\boldsymbol{P}}_k^{-1}\\boldsymbol{x}_k. \\] \\[ \\hat{\\boldsymbol{P}}_k^{-1}\\hat{\\boldsymbol{x}}_k=\\boldsymbol{C}_k^\\mathrm{T}\\boldsymbol{Q}^{-1}\\boldsymbol{z}_k+\\check{\\boldsymbol{P}}_k^{-1}\\check{\\boldsymbol{x}}_k. \\] \\[ \\begin{aligned} \\hat{x}_{k}&amp; =\\hat{\\boldsymbol{P}}_k\\boldsymbol{C}_k^\\mathrm{T}\\boldsymbol{Q}^{-1}\\boldsymbol{z}_k+\\hat{\\boldsymbol{P}}_k\\check{\\boldsymbol{P}}_k^{-1}\\check{\\boldsymbol{x}}_k \\\\ &amp;=K\\boldsymbol{z}_k+\\left(\\boldsymbol{I}-\\boldsymbol{K}\\boldsymbol{C}_k\\right)\\check{\\boldsymbol{x}}_k=\\check{\\boldsymbol{x}}_k+\\boldsymbol{K}\\left(\\boldsymbol{z}_k-\\boldsymbol{C}_k\\check{\\boldsymbol{x}}_k\\right). \\end{aligned} \\]"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#913-ekf","title":"9.1.3 \u975e\u7ebf\u6027\u7cfb\u7edf\u548c EKF","text":"<ul> <li>\u6269\u5c55\u5361\u5c14\u66fc\u6ee4\u6ce2\u5668<ul> <li>\u5373\u628a\u975e\u9ad8\u65af\u5206\u5e03\u8fd1\u4f3c\u6210\u9ad8\u65af\u5206\u5e03</li> </ul> </li> </ul> \\[ \\boldsymbol{x}_k\\approx f\\left(\\hat{\\boldsymbol{x}}_{k-1},\\boldsymbol{u}_k\\right)+\\left.\\frac{\\partial f}{\\partial\\boldsymbol{x}_{k-1}}\\right|_{\\tilde{\\boldsymbol{x}}_{k-1}}\\left(\\boldsymbol{x}_{k-1}-\\hat{\\boldsymbol{x}}_{k-1}\\right)+\\boldsymbol{w}_k. \\] \\[ \\boldsymbol{F}=\\left.\\frac{\\partial f}{\\partial\\boldsymbol{x}_{k-1}}\\right|_{\\hat{\\boldsymbol{x}}_{k-1}}. \\] \\[ z_k\\approx h\\left(\\check{\\boldsymbol{x}}_k\\right)+\\left.\\frac{\\partial h}{\\partial\\boldsymbol{x}_k}\\right|_{\\dot{\\boldsymbol{x}}_k}\\left(\\boldsymbol{x}_k-\\check{\\boldsymbol{x}}_k\\right)+\\boldsymbol{n}_k. \\] \\[ H=\\left.\\frac{\\partial h}{\\partial\\boldsymbol{x}_k}\\right|_{\\check{\\boldsymbol{x}}_k}. \\] \\[ P\\left(\\boldsymbol{x}_k|\\boldsymbol{x}_0,\\boldsymbol{u}_{1:k},\\boldsymbol{z}_{0:k-1}\\right)=N(f\\left(\\hat{\\boldsymbol{x}}_{k-1},\\boldsymbol{u}_k\\right),\\boldsymbol{F}\\hat{\\boldsymbol{P}}_{k-1}\\boldsymbol{F}^\\mathrm{T}+\\boldsymbol{R}_k). \\] \\[ \\check{\\boldsymbol{x}}_k=f\\left(\\hat{\\boldsymbol{x}}_{k-1},\\boldsymbol{u}_k\\right),\\quad\\check{\\boldsymbol{P}}_k=\\boldsymbol{F}\\hat{\\boldsymbol{P}}_{k-1}\\boldsymbol{F}^\\mathrm{T}+\\boldsymbol{R}_k. \\] \\[ P\\left(\\boldsymbol{z}_k|\\boldsymbol{x}_k\\right)=N(h\\left(\\check{\\boldsymbol{x}}_k\\right)+\\boldsymbol{H}\\left(\\boldsymbol{x}_k-\\check{\\boldsymbol{x}}_k\\right),Q_k). \\] <ul> <li>\u5b9a\u4e49\u4e00\u4e2a\u5361\u5c14\u66fc\u589e\u76ca \\(\\displaystyle \\boldsymbol{K}_{k}\\)</li> </ul> \\[ K_{k}=\\check{P}_{k}H^{\\mathrm{T}}(H\\check{P}_{k}H^{\\mathrm{T}}+Q_{k})^{-1}. \\] \\[ \\hat{\\boldsymbol{x}}_k=\\check{\\boldsymbol{x}}_k+\\boldsymbol{K}_k\\left(\\boldsymbol{z}_k-h\\left(\\check{\\boldsymbol{x}}_k\\right)\\right),\\hat{\\boldsymbol{P}}_k=\\left(\\boldsymbol{I}-\\boldsymbol{K}_k\\boldsymbol{H}\\right)\\check{\\boldsymbol{P}}_k. \\]"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#914-ekf","title":"9.1.4 EKF \u7684\u8ba8\u8bba","text":"<ul> <li>\u5c40\u9650<ul> <li>\u5047\u8bbe\u4e86\u9a6c\u5c14\u53ef\u592b\u6027\uff0c\u4f46\u662f\u975e\u7ebf\u6027\u4f18\u5316\u662f\u5168\u4f53\u65f6\u95f4\u4e0a\u7684 SLAM (Full-SLAM)</li> <li>\u6709\u975e\u7ebf\u6027\u8bef\u5dee\uff08\u4e3b\u8981\u95ee\u9898\u6240\u5728\uff09</li> <li>\u5982\u679c\u628a\u8def\u6807\u4e5f\u653e\u8fdb\u72b6\u6001\uff0c\u5b58\u4e0d\u4e0b</li> <li>\u6ca1\u6709\u5f02\u5e38\u68c0\u6d4b\u673a\u5236</li> </ul> </li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#92-ba","title":"9.2 BA \u4e0e\u56fe\u4f18\u5316","text":"<ul> <li>Bundle Adjustment<ul> <li>\u4ece\u89c6\u89c9\u56fe\u50cf\u4e2d\u63d0\u70bc\u51fa\u6700\u6709\u7684 3 D \u6a21\u578b\u548c\u76f8\u673a\u53c2\u6570\uff0c\u8ba9\u5149\u7ebf\u6700\u7ec8\u6536\u675f\u5230\u76f8\u673a\u7684\u5149\u5fc3</li> </ul> </li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#921-ba","title":"9.2.1 \u6295\u5f71\u6a21\u578b\u548c BA \u4ee3\u4ef7\u51fd\u6570","text":"\\[ P^{\\prime}=Rp+t=[X^{\\prime},Y^{\\prime},Z^{\\prime}]^\\mathrm{T}. \\] \\[ \\boldsymbol{P}_{\\mathrm{c}}=[u_{\\mathrm{c}},v_{\\mathrm{c}},1]^{\\mathrm{T}}=[X^{\\prime}/Z^{\\prime},Y^{\\prime}/Z^{\\prime},1]^{\\mathrm{T}}. \\] \\[ \\begin{cases}u_\\mathrm{c}'=u_\\mathrm{c}\\left(1+k_1r_\\mathrm{c}^2+k_2r_\\mathrm{c}^4\\right)\\\\v_\\mathrm{c}'=v_\\mathrm{c}\\left(1+k_1r_\\mathrm{c}^2+k_2r_\\mathrm{c}^4\\right)\\end{cases}. \\] \\[ \\begin{cases}u_s=f_xu_\\mathrm{c}'+c_x\\\\[2ex]v_s=f_yv_\\mathrm{c}'+c_y\\end{cases}. \\] \\[ z=h(\\boldsymbol{x},\\boldsymbol{y}). \\] \\[ e=z-h(\\boldsymbol{T},\\boldsymbol{p}). \\] \\[ z\\overset{\\mathrm{def}}{\\operatorname*{=}}[u_s,v_s]^\\mathrm{T} \\] \\[ \\frac12\\sum_{i=1}^m\\sum_{j=1}^n\\|e_{ij}\\|^2=\\frac12\\sum_{i=1}^m\\sum_{j=1}^n\\|z_{ij}-h(\\boldsymbol{T}_i,\\boldsymbol{p}_j)\\|^2. \\]"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#922-ba","title":"9.2.2 BA \u7684\u6c42\u89e3","text":"\\[ x=[T_1,\\ldots,T_m,p_1,\\ldots,p_n]^\\mathrm{T}. \\] \\[ \\frac12\\left\\|f(\\boldsymbol{x}+\\Delta\\boldsymbol{x})\\right\\|^2\\approx\\frac12\\sum_{i=1}^m\\sum_{j=1}^n\\left\\|\\boldsymbol{e}_{ij}+\\boldsymbol{F}_{ij}\\Delta\\boldsymbol{\\xi}_i+\\boldsymbol{E}_{ij}\\Delta\\boldsymbol{p}_j\\right\\|^2. \\] \\[ x_{\\mathfrak{c}}=[\\boldsymbol{\\xi}_1,\\boldsymbol{\\xi}_2,\\ldots,\\boldsymbol{\\xi}_m]^{\\mathrm{T}}\\in\\mathbb{R}^{6m} \\] \\[ \\boldsymbol{x}_p=[\\boldsymbol{p}_1,\\boldsymbol{p}_2,\\ldots,\\boldsymbol{p}_n]^\\mathrm{T}\\in\\mathbb{R}^{3n} \\] \\[ \\frac12\\left\\|f(\\boldsymbol{x}+\\Delta\\boldsymbol{x})\\right\\|^2=\\frac12\\left\\|\\boldsymbol{e}+\\boldsymbol{F}\\Delta\\boldsymbol{x}_c+\\boldsymbol{E}\\Delta\\boldsymbol{x}_p\\right\\|^2. \\] \\[ \\boldsymbol{J}=[\\boldsymbol{F}\\boldsymbol{E}]. \\] \\[ H=J^\\mathrm{T}J=\\begin{bmatrix}F^\\mathrm{T}F&amp;F^\\mathrm{T}E\\\\E^\\mathrm{T}F&amp;E^\\mathrm{T}E\\end{bmatrix}. \\]"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#923","title":"9.2.3 \u7a00\u758f\u6027\u548c\u8fb9\u7f18\u5316","text":"\\[ J_{ij}(x)=\\left(\\mathbf{0}_{2\\times6},\\ldots\\mathbf{0}_{2\\times6},\\frac{\\partial\\boldsymbol{e}_{ij}}{\\partial\\boldsymbol{T}_{i}},\\mathbf{0}_{2\\times6},\\ldots\\mathbf{0}_{2\\times3},\\ldots\\mathbf{0}_{2\\times3},\\frac{\\partial\\boldsymbol{e}_{ij}}{\\partial\\boldsymbol{p}_{j}},\\mathbf{0}_{2\\times3},\\ldots\\mathbf{0}_{2\\times3}\\right). \\] \\[ H=\\sum_{i,j}J_{ij}^{\\top}J_{ij}, \\] \\[ H=\\begin{bmatrix}H_{11}&amp;H_{12}\\\\\\\\H_{21}&amp;H_{22}\\end{bmatrix}. \\] <ul> <li>\u5bf9\u4e8e\u7a00\u758f\u77e9\u9635\uff0c\u6211\u4eec\u7528 Schur \u6d88\u5143\uff08Marginalization\uff09</li> </ul> \\[ \\begin{bmatrix}B&amp;E\\\\E^\\mathrm{T}&amp;C\\end{bmatrix}\\begin{bmatrix}\\Delta x_\\mathrm{c}\\\\\\Delta x_p\\end{bmatrix}=\\begin{bmatrix}v\\\\w\\end{bmatrix}. \\] \\[ \\begin{bmatrix}I&amp;-EC^{-1}\\\\0&amp;I\\end{bmatrix}\\begin{bmatrix}B&amp;E\\\\E^{\\intercal}&amp;C\\end{bmatrix}\\begin{bmatrix}\\Delta x_\\mathrm{c}\\\\\\Delta x_p\\end{bmatrix}=\\begin{bmatrix}I&amp;-EC^{-1}\\\\0&amp;I\\end{bmatrix}\\begin{bmatrix}v\\\\w\\end{bmatrix}. \\] \\[ \\begin{bmatrix}B-EC^{-1}E^\\mathrm{T}&amp;0\\\\E^\\mathrm{T}&amp;C\\end{bmatrix}\\begin{bmatrix}\\Delta x_\\mathrm{c}\\\\\\Delta x_p\\end{bmatrix}=\\begin{bmatrix}v-EC^{-1}w\\\\\\\\w\\end{bmatrix}. \\] \\[ \\begin{bmatrix}B-EC^{-1}E^\\mathrm{T}\\end{bmatrix}\\Delta x_\\mathrm{c}=v-EC^{-1}w. \\] <ul> <li>\u4f18\u52bf<ul> <li>\\(\\displaystyle \\boldsymbol{C}\\) \u4e3a\u5bf9\u89d2\u5757\uff0c\u9006\u6bd4\u8f83\u5bb9\u6613\u89e3\u51fa</li> </ul> </li> <li>\u975e\u5bf9\u89d2\u7ebf\u4e0a\u7684\u975e\u96f6\u77e9\u9635\u5757\u8868\u793a\u5bf9\u5e94\u7684\u4e24\u4e2a\u76f8\u673a\u53d8\u91cf\u4e4b\u95f4\u5b58\u5728\u5171\u540c\u89c2\u6d4b\u7684\u8def\u6807\u70b9\uff0c\u5373\u5171\u89c6\uff08Co-visibility\uff09</li> </ul>"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#924","title":"9.2.4 \u9c81\u68d2\u6838\u51fd\u6570","text":"<ul> <li>Robust Kernel</li> </ul> \\[ H(e)=\\begin{cases}\\frac{1}{2}e^2&amp;\\text{\u5f53}|e|\\leqslant\\delta,\\\\\\\\\\delta\\left(|e|-\\frac{1}{2}\\delta\\right)&amp;\\text{\u5176\u4ed6}\\end{cases} \\]"},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#93-ceres-ba","title":"9.3 \u5b9e\u8df5: Ceres BA","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#931-bal","title":"9.3.1 BAL \u6570\u636e\u96c6","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#932-ceres-ba","title":"9.3.2 Ceres BA \u7684\u4e66\u5199","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#94-g-2-o-ba","title":"9.4 \u5b9e\u8df5: g 2 o \u6c42\u89e3 BA","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#95","title":"9.5 \u5c0f\u7ed3","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#10-2","title":"10 \u540e\u7aef 2","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#11_1","title":"11 \u56de\u73af\u68c0\u6d4b","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#12_1","title":"12 \u5efa\u56fe","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#13-slam","title":"13 \u5b9e\u8df5: \u8bbe\u8ba1 SLAM \u7cfb\u7edf","text":""},{"location":"slam/%E8%A7%86%E8%A7%89SLAM%E5%8D%81%E5%9B%9B%E8%AE%B2/#14-slam","title":"14 SLAM: \u73b0\u5728\u4e0e\u672a\u6765","text":""},{"location":"summary/2024summer_vacation/","title":"2024\u5e74\u9ad8\u4e09-\u5927\u4e00\u6691\u5047\u603b\u7ed3","text":"<p>\u6211\u7684\u6691\u5047\u5927\u6982\u662f\u4ece 24.7.10 \u5f00\u59cb\u7684\uff0c\u5230\u90a3\u65f6\u624d\u5c18\u57c3\u843d\u5b9a\u3002\u4f46\u53c8\u6765\u56de\u6447\u6446\uff0c\u60f3\u7740\u672a\u6765\u7684\u51fa\u8def\uff08\u51fa\u56fd\uff1f\u4fdd\u7814\uff1f\u5de5\u4f5c\uff1f\u8f6c\u4e13\u4e1a\uff1f\uff09\u3002\u6240\u4ee5\u5927\u6982\u5230 8 \u6708\u624d\u5f00\u59cb\u5b66\u4e60\u3002</p> <ul> <li>\u8fd0\u52a8<ul> <li>\u6bcf\u5929\u505a\u505a\u4fef\u5367\u6491\uff0c\u611f\u89c9\u8fd8\u4e0d\u9519</li> <li>\u5927\u6982 7 \u6708\u4efd\u7684\u65f6\u5019\u6bcf\u5929\u4e0b\u5348\u4f1a\u51fa\u53bb\u9a91\u8f66\uff08city cycling?\uff09</li> </ul> </li> <li>\u8ba1\u7b97\u673a<ul> <li>crash course computer \u770b\u4e86\u524d 20 \u8bb2\uff0c\u540e\u6765\u56e0\u4e3a\u61d2\u5f97\u770b\u4e86\u5c31\u6446\u70c2\u4e86</li> <li>cs 61 A<ul> <li>\u770b\u4e86\u524d 10 \u8bb2\u7684 lecture\uff0c\u4f46\u662f\u6ca1\u505a\u7b14\u8bb0</li> <li>\u770b\u4e86 composing programs \u524d\u4e09\u7ae0</li> <li>\u505a\u5b8c\u4e86 4 \u4e2a proj\uff0c\u4f46\u662f\u6ca1\u6709\u505a hw \u548c lab</li> </ul> </li> <li>cs 61 C<ul> <li>\u770b\u4e86\u524d 10 \u8bb2\u7684 slide</li> <li>\u505a\u4e86\u524d\u4e24\u4e2a proj \u548c\u524d\u516d\u4e2a lab</li> <li>\u770b\u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u8bbe\u8ba1\u786c\u4ef6\u8f6f\u4ef6\u63a5\u53e3\u524d\u4e24\u7ae0</li> </ul> </li> <li>csapp<ul> <li>\u4e66\u770b\u4e86\u524d\u4e09\u7ae0</li> <li>\u4e5d\u66f2\u9611\u5e72\u770b\u4e86\u524d 4 \u7ae0</li> </ul> </li> <li>Dive into Deep Learning<ul> <li>\u770b\u4e86\u524d\u4e24\u7ae0\u5e76\u505a\u4e86\u7b14\u8bb0\uff0c\u4f46\u611f\u89c9\u4e00\u4e0b\u5b50\u8df3\u8fc7\u592a\u591a\u524d\u7f6e\u77e5\u8bc6\u5f88\u96be\u611f\u53d7\u5230\u7f8e\u611f\u4fbf\u5148\u653e\u653e\u3002</li> </ul> </li> <li>games 101<ul> <li>\u51e0\u4e4e\u770b\u5b8c\u4e86\u6240\u6709\u7684 lecture (\u4f46\u662f\u540e\u9762\u51e0\u8bb2\u4e0d\u662f\u5f88\u8ba4\u771f)\uff0c\u4f46\u662f\u6ca1\u6709\u505a\u7b14\u8bb0</li> </ul> </li> <li>\u4ee3\u7801\u968f\u60f3\u5f55<ul> <li>\u505a\u5230\u56de\u6eaf\u4e86\uff0c\u4f46\u662f\u6253\u7b97\u4e4b\u540e\u4e0d\u4f1a\u5f88\u7ecf\u5e38\u505a\uff08\u7b49\u5230\u8981\u7528\u4e86\u518d\u8bf4\uff09</li> </ul> </li> <li>\u7528 mkdocs \u642d\u5efa\u4e86\u81ea\u5df1\u7684 blog</li> <li>C++<ul> <li>\u770b\u4e86\u83dc\u9e1f\u6559\u7a0b\u4e0a\u7684\u76f8\u5173\u5185\u5bb9\uff0c\u6ca1\u505a\u7b14\u8bb0</li> <li>\u770b\u4e86\u6d59\u5927\u7684 C++\u8bfe\uff0c\u6ca1\u505a\u7b14\u8bb0\uff0c\u4e5f\u6ca1\u770b\u5b8c\uff08\uff09</li> <li>\u770b\u4e86 accelerated C++\uff0c\u505a\u4e86\u7b14\u8bb0</li> </ul> </li> <li>\u770b\u4e86\u6d59\u5927\u7684\u5b9e\u7528\u6280\u80fd\u62fe\u9057<ul> <li>\u590d\u4e60\u4e86 Markdown \u548c Latex \u8bed\u6cd5\uff0c\u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528 git\uff0c\u5b66\u4e60\u4e86\u6700\u57fa\u7840\u7684 shell\uff0cvim\u3002</li> </ul> </li> <li>\u89c6\u89c9 slam \u5341\u56db\u8bb2<ul> <li>\u770b\u5b8c\u4e86\u524d 7 \u8bb2\uff08\u5373\u7406\u8bba\u90e8\u5206\uff09\uff0c\u505a\u4e86\u7b14\u8bb0\uff0c\u4f46\u662f\u6ca1\u6709\u8dd1\u4ee3\u7801 \uff08\u73af\u5883\u592a\u96be\u914d\u4e86\uff09</li> </ul> </li> <li>\u914d\u7f6e\u73af\u5883<ul> <li>wsl 2 , git\uff0cvmware\uff0cvscode</li> <li>\u914d\u7f6e\u4e86 obsidian\uff0c\u88c5\u4e86\u597d\u591a\u63d2\u4ef6\uff0c\u73b0\u5728\u7528\u8d77\u6765\u662f\u5f88\u8212\u670d\u4e86</li> </ul> </li> </ul> </li> <li>\u5176\u4ed6<ul> <li>\u5bb6\u6559\u3002\u65f6\u85aa 150</li> <li>\u5b66\u4e86\u9a7e\u7167</li> <li>\u4e70\u4e86\u4e00\u4e2a\u952e\u76d8\u548c\u663e\u793a\u5668\uff08\u5b66\u4e60\u73af\u5883 upup\uff09, \u91cd\u88c5\u4e86\u7535\u8111</li> <li>\u548c\u670b\u53cb\u65c5\u6e38\uff0c\u53bb\u6cc9\u5dde+\u798f\u5dde</li> <li>\u7ed9\u9ad8\u4e2d\u7684\u5b66\u5f1f\u5b66\u59b9\u5199\u4e86\u7ecf\u9a8c\u5206\u4eab\uff08\u6570\u5b66+\u82f1\u8bed+\u7269\u7406+\u6280\u672f\uff09</li> <li>\u770b\u4e86\u4e0d\u5c11\u7535\u5f71</li> </ul> </li> </ul>"},{"location":"tygx_exp/eng_fht/","title":"\u82f1\u8bed\u7ecf\u9a8c\u5206\u4eab","text":"<p>\u80cc\u666f:2024\u5c4a\u9996\u8003136\uff08\u524d\u9762\u62635\uff0c\u4f5c\u6587\u62639\uff09 -&gt; \u9ad8\u8003137\uff08\u524d\u9762\u62633\uff0c\u4f5c\u6587\u626310\uff09</p>"},{"location":"tygx_exp/eng_fht/#_2","title":"\u5b66\u79d1\u672c\u8eab:","text":""},{"location":"tygx_exp/eng_fht/#_3","title":"\u82f1\u8bed\u96be\u5ea6\u600e\u4e48\u6837\uff1f","text":"<ul> <li>\u53d6\u51b3\u4e8e\u5b66\u751f\u5427\uff0c\u521d\u4e2d\u7684\u5e95\u5b50\u5f71\u54cd\u5f88\u5927\uff0c\u6709\u7684\u4eba\u521d\u4e2d\u82f1\u8bed\u597d\u76f4\u63a5\u4e09\u5e74\u90fd\u4e0d\u7528\u5b66\u82f1\u8bed\u3002</li> <li>\u57fa\u7840\u77e5\u8bc6\u5f71\u54cd\u540e\u7eed\u5b66\u4e60\uff08\u610f\u601d\u662f\u4e0d\u4f1a\u7684\u81ea\u5df1\u53bb\u5b66\u6389\uff09:<ul> <li>\u97f3\u6807 / \u53e3\u8bed</li> <li>\u8bcd\u6c47\u91cf</li> </ul> </li> <li>\u6bd4\u8bed\u6587\u3001\u6570\u5b66\uff08120+\u7684\u65f6\u5019\uff09\u63d0\u5206\uff08110+\u7684\u65f6\u5019\uff09\u5feb\u3002\u8bad\u7ec3\u65b9\u6cd5\u7b80\u5355\uff0c\u89c1\u6548\u5feb\uff0c\u63d0\u5347\u7a33\u5b9a\u3002</li> <li>\u8f7b\u903b\u8f91\uff0c\u91cd\u7406\u89e3\uff08\u8bfb\u61c2\u4e86\u5c31\u80fd\u505a\u5bf9\u9898\u76ee\uff09</li> </ul>"},{"location":"tygx_exp/eng_fht/#_4","title":"\u6295\u5165\u65f6\u95f4\u600e\u4e48\u6837\uff1f","text":"<ul> <li>\u4ec0\u4e48\u788e\u7247\u5316\u80cc\u5355\u8bcd\u5176\u5b9e\u4e0d\u4e00\u5b9a\u6709\u7528\uff0c\u56fe\u7684\u53ea\u662f\u591a\u770b\u51e0\u6b21\u3002\u540c\u6837\uff0c\u65e9\u8bfb\u665a\u8bfb\u4e5f\u53ea\u662f\u591a\u82b1\u70b9\u65f6\u95f4\u719f\u6089\u719f\u6089\uff0c\u5b66\u6821\u7edf\u4e00\u8bad\u7ec3\u7684\u542c\u529b\u771f\u4e0d\u662f\u5f88\u6709\u7528\u53cd\u6b63\u3002\u5efa\u8bae\u79c1\u4e0b\u627e\u8001\u5e08\u5f3a\u5316\u4e00\u4e0b\uff08</li> <li>\u5e73\u65f6\u4e3b\u8981\u7684\u65f6\u95f4\u6295\u5165:<ul> <li>\u505a\u5377\u5b50\u3001\u8ba2\u6b63\u3001\u67e5\u5355\u8bcd</li> <li>\u5199\u4f5c\u6587\u3001\u6279\u6539\u3001\u80cc\u8bed\u6599</li> </ul> </li> <li>\u6211\u4e2a\u4eba\u8ba4\u4e3a\u5355\u8bcd\u662f\u6ca1\u5fc5\u8981\u53bb\u80cc\u7ef4\u514b\u591a\u7684\uff08\u4e0d\u8fc7\u5982\u679c\u8fde\u521d\u4e2d\u7684\u5355\u8bcd\u90fd\u4e0d\u4f1a\u7684\u8bdd\uff0c\u8fd8\u662f\u5148\u80cc\u4e2a1500\uff08\u521d\u4e2d\u5355\u8bcd\u5927\u7eb2\uff09\u518d\u8bf4\u5427\u3002\u540e\u9762\u7684\u5c31\u662f\u591a\u67e5\u67e5\u5b57\u5178\uff0c\u8bb0\u5728\u7b14\u8bb0\u672c\u4e0a\uff0c\u591a\u770b\u770b\u5c31\u597d\u4e86\u3002(\u6709\u7684\u8001\u5e08\u8981\u6c42\u8fc7\u4e2aN\u904d\u7684\u7ef4\u514b\u591a\u5176\u5b9e\u4e0d\u592a\u6709\u7528\uff0c\u6bd5\u7adf\u4e00\u4e2a\u5355\u8bcd\u77e5\u905310\u4e2a\u610f\u601d\uff0c\u4e5f\u4e0d\u4e00\u5b9a\u80fd\u591f\u7406\u89e3\u6587\u610f)<ul> <li>\u5982\u679c\u771f\u60f3\u901f\u6210\uff0c\u5efa\u8bae\u641c\u7d22IAI\u53d1\u7684\u5355\u8bcd\u5927\u7eb2\uff0c\u4ee5\u8ba4\u77e5\u8bcd\u6c47\u4e3a\u6807\u51c6\uff0c\u4e00\u661f\u671f\u5185\u80cc\u5b8c\u65b0\u9ad8\u80033000\u5355\u8bcd\u3002</li> </ul> </li> <li>\u7a33\u5b9a\u8bad\u7ec3\u7684\u60c5\u51b5\u4e0b\uff0c130\u5e94\u8be5\u662f\u6240\u6709\u5b66\u751f\u90fd\u80fd\u57286\u4e2a\u6708\u5185\u53ef\u4ee5\u8fbe\u5230\u7684\u3002</li> </ul>"},{"location":"tygx_exp/eng_fht/#_5","title":"\u5b66\u4e60\u65b9\u6cd5:","text":"<p>\u53ef\u4ee5\u8bf4\uff0c\u82f1\u8bed\u662f\u4e3b\u8bfe\u91cc\u6700\u6709\u8ff9\u53ef\u5faa\u7684\u4e00\u95e8\u8bfe\u4e86\u3002\u800c\u4e14\u82f1\u8bed\u6709\u4e24\u6b21\u673a\u4f1a\uff0c\u6240\u4ee5\u53ea\u8981\u52aa\u529b\u5c31\u80fd\u53d6\u5f97\u5f88\u4e0d\u9519\u7684\u5206\u6570\uff08\u6027\u4ef7\u6bd4\u6781\u9ad8\uff09</p>"},{"location":"tygx_exp/eng_fht/#_6","title":"\u8d44\u6e90\u63a8\u8350:","text":"<ul> <li>IAI yyds\uff01\uff01\uff01\uff08\u4e00\u4e2a\u82f1\u8bed\u516c\u4f17\u53f7\uff09</li> <li>\u4e00\u4e9b\u4e66:<ul> <li>\u8bed\u6cd5\u4ff1\u4e50\u90e8</li> <li>\u4e00\u672c\u6d3b\u9875\u7b14\u8bb0\u672c</li> <li>\u725b\u6d25 / \u6717\u6587 \u9ad8\u7ea7\u5b57\u5178 \u6216\u8005 \u5355\u8bcd\u7b14 \u6216\u8005 \u7535\u5b50\u5b57\u5178 \uff08\u5176\u5b9e\u533a\u522b\u4e0d\u5927\uff0c\u53ef\u4ee5\u51e0\u4e2a\u540c\u5b66\u7528\u4e00\u4e2a\uff09</li> </ul> </li> <li>\u5212\u7ebf\u5c3a\uff08\u5bf9\u5b57\u8ff9\u4e0d\u597d\u7684\u540c\u5b66\u53ef\u4ee5\u7528\uff0c\u5177\u4f53\u641c\u7d22IAI\u63a8\u6587\uff09</li> </ul>"},{"location":"tygx_exp/eng_fht/#_7","title":"\u8d44\u6e90\u4e0d\u63a8\u8350:","text":"<ul> <li>\u82f1\u8bed\u539f\u8457:\uff08\u6027\u4ef7\u6bd4\u51e0\u4e4e\u4e3a\u96f6\uff0c\u5355\u8bcd\u964c\u751f\u5316\u8fc7\u9ad8\uff0c\u8001\u5e08\u770b\u4e0d\u61c2\u5bb9\u6613\u5224\u4f4e\u5206\uff0c\u5bb9\u6613\u4f7f\u4eba\u6d6e\u8e81\uff09     \u6bd4\u5982:<ul> <li>Harry Potter</li> <li>Flipped</li> <li>Good English ...</li> </ul> </li> <li>\u8bfe\u5916\u8d2d\u4e70\u7684\u5b57\u5e16\uff08\u9664\u4e86\u8861\u6c34\u4f53\u4ee5\u5916\u7684\u5b57\u4f53:\u610f\u5927\u5229\u659c\u4f53\uff0c\u82b1\u4f53\uff0c\u5706\u4f53...\uff09</li> <li>\u968f\u4fbf\u4e0d\u77e5\u6765\u6e90\u7684\u4e13\u9898\u96c6\uff08\u9ad8\u8003\u5fc5\u5237\u9898\uff0c\u9ad8\u8003\u4e94\u4e09\uff08\u6392\u7248\u96be\u770b\uff0c\u9898\u76ee\u8001\u65e7\uff09\uff09</li> <li>\u91d1\u8003\u5377\u7b49\uff08\u522b\u60f3\u4e86\uff0c\u6839\u672c\u4e0d\u4f1a\u505a\u591a\u5c11\u7684\uff09 IAI\u3000is enough\uff01</li> <li>\u8001\u5e08\u4e0d\u77e5\u9053\u54ea\u91cc\u641e\u6765\u7684\u5916\u7701\u7684\u5377\u5b50/\u5546\u4e1a\u5377\uff08\u505a\u4e86\u63d0\u5347\u5f88\u5c0f\uff0c\u5f71\u54cd\u53e3\u5473\u7f62\u4e86\uff09</li> <li>\u5e73\u65f6\u7684\u4f5c\u4e1a\uff08\u7f3a\u4e4f\u9488\u5bf9\u6027\uff0c\u5408\u7406\u770b\u5f85\uff0c\u7231\u505a\u4e0d\u505a\uff09</li> <li>\u51fa\u53bb\u8865\u8bfe\u53d1\u7684\u4f5c\u6587\u89e3\u6790\uff08\u5408\u7406\u770b\u5f85\uff0c\u8b66\u60d5\u6a21\u677f/\u79d2\u6740/\u9ad8\u7ea7\u8bcd\u6c47\uff09</li> <li>\u56db\u516d\u7ea7\u3001\u6258\u798f\u3001\u96c5\u601d\u3001GRE\u5355\u8bcd\uff08\u6027\u4ef7\u6bd4\u4f4e\uff0c\u8d34\u5408\u5ea6\u4f4e\uff0c\u88c5\u903c\u5ea6\u9ad8\uff0c\u4e0d\u7b26\u5408\u9ad8\u8003\u5bfc\u5411\uff09</li> </ul>"},{"location":"tygx_exp/eng_fht/#_8","title":"\u5b66\u4e60\u65b9\u6cd5:","text":""},{"location":"tygx_exp/eng_fht/#_9","title":"\u9ad8\u4e00\u9ad8\u4e8c\u4e0a:","text":"<ul> <li>\u79ef\u7d2f\u5355\u8bcd\uff08\u8bb0\u5728\u6d3b\u9875\u672c\u4e0a\uff09</li> <li>\u63d0\u5347\u5ba2\u89c2\u9898:\u6240\u6709\u9898\u76ee\u9519\u7684\u5f04\u61c2\uff0c\u505a\u8fc7\u4e0d\u9519\uff08\u522b\u73a9\u4f60\u7684\u7834\u9519\u9898\u672c\u4e86\uff09</li> <li>\u4f5c\u6587\u6446\u70c2\uff08\u9ad8\u4e00\u9ad8\u4e8c\u8303\u6587\u6c34\u5e73\u592a\u4f4e\uff0c\u6ca1\u6709\u5b66\u4e60\u7684\u4ef7\u503c\uff09</li> </ul>"},{"location":"tygx_exp/eng_fht/#_10","title":"\u9ad8\u4e8c\u4e0b\u9ad8\u4e09:","text":"<ul> <li>\u8fd9\u65f6\u5019\u9ad8\u8003\u5355\u8bcd\u90fd\u8ba4\u4e0d\u5168\u8bf4\u4e0d\u8fc7\u53bb\u4e86<ul> <li>\u8bf7\u53c2\u8003\u524d\u6587</li> </ul> </li> <li>\u8bed\u6cd5\u4e0d\u4f1a\u7684\u53bb\u5b66\u8bed\u6cd5\uff08\u770b\u8bed\u6cd5\u4ff1\u4e50\u90e8\uff09\uff0c\u4e0d\u8981\u8ffd\u6c42\u5b8c\u6574\u5177\u4f53\uff0c\u80fd\u591f\u505a\u8bed\u6cd5\u586b\u7a7a\u548c\u4f1a\u5206\u6790\u9605\u8bfb\u4e2d\u7684\u957f\u96be\u53e5\u5c31\u591f\u4e86\u3002\uff08\u751a\u81f3\u865a\u62df\u8bed\u6c14\u4ec0\u4e48\u7684\u90fd\u8003\u4e0d\u4e86\uff09</li> <li>\u9650\u65f6\u505a\u5377\u5b50\uff0840min\u505a\u5b8c\u5ba2\u89c2\u9898\uff09+\u8ba2\u6b63\uff08\u641e\u61c2\u4e3a\u4ec0\u4e48\u9519\uff09<ul> <li>\u505a\u591f30\u5957\u5c31\u53ef\u4ee5\u7a33\u4e0a130\uff08\u5377\u5b50\u6765\u6e90IAI\uff09</li> </ul> </li> <li>\u9650\u65f6\u7ec3\u4f5c\u6587\uff08\u5e94\u7528\u6587+\u7eed\u5199\uff09<ul> <li>\u7eed\u5199\u5199\u591f20\u504f\u5c31\u53ef\u4ee518+</li> <li>\u5e94\u7528\u6587\u5efa\u8bae\u79ef\u7d2f\u6a21\u677f\uff0c\u9047\u5230\u4e0d\u540c\u4e3b\u9898\u90fd\u6709\u8bdd\u8bf4\u3002\u4fdd\u6301\u5e73\u65f611+\u5c31\u597d\u3002</li> </ul> </li> <li>\u5b66\u6821\u8003\u8bd5\u7684\u4f5c\u6587\u6253\u5206\u4e0d\u503c\u5f97\u76f8\u4fe1:<ul> <li>\u5efa\u8bae\u73cd\u60dc\u8054\u8003\uff08\u4e0d\u662f\u5b66\u6821\u8001\u5e08\u6539\u7684\u65f6\u5019\uff0c\u6bd4\u5982\u5076\u5c14\u7684Z20\uff09</li> <li>\u53ea\u770b\u8001\u5e08\u6539\u7684\u8bed\u6cd5\u9519\u8bef</li> <li>\u53ef\u4ee5\u53c2\u52a0IAI\u57f9\u8bad\uff08\u4e0d\u662f\u5e7f\u544a\uff0c\u6027\u4ef7\u6bd4\u6bd4\u8f83\u4f4e\uff0c\u4f46\u662f\u6539\u4f5c\u6587\u7684\u6807\u51c6\u5f88\u51c6\uff09</li> </ul> </li> <li>\u4ee5\u63d0\u5347\u6210\u7ee9\u4e3a\u5bfc\u5411\uff0c\u8b66\u60d5\u63d0\u5347\u82f1\u8bed\u7d20\u517b\u66f2\u7ebf\u6551\u56fd\u7684\u9677\u8fdb\uff08\u5982\uff0c\u770b\u5916\u520a\uff0c\u8bfb\u539f\u8457\u7b49\u7b49\uff09</li> </ul>"},{"location":"tygx_exp/eng_fht/#_11","title":"\u8bad\u7ec3\u76ee\u6807:","text":"<ul> <li>\u5ba2\u89c2\u9898\u4fdd\u8bc1\u572830-35\u5206\u949f\u5185\u505a\u5b8c</li> <li>\u4f5c\u65871\u5c0f\u65f6\u5185\u5199\u5b8c\u4e24\u7bc7\uff0c\u8981\u6c42\u5e94\u7528\u6587\u4e0d\u4f4e\u4e8e11\u5206\uff0c\u7eed\u5199\u4e0d\u4f4e\u4e8e18\u5206\uff08\u4e24\u6bb5\u90fd\u5199\u6ee110\u884c\uff09</li> <li>\u5ba2\u89c2\u9898\u6263\u5206\u4e0d\u8d85\u8fc75\u5206\uff08\u542c\u529b\u9605\u8bfb\u4e03\u9009\u4e94\u5168\u5bf9\uff0c\u5b8c\u578b\u53ef\u62631\u5206\uff0c\u8bed\u586b\u53ef\u62631.5\u5206\uff09</li> </ul>"},{"location":"tygx_exp/eng_fht/#_12","title":"\u5c0f\u6280\u5de7:","text":"<ul> <li>\u5408\u7406\u5b89\u6392\u505a\u9898\u65f6\u95f4\uff0c\u4e0d\u4e00\u5b9a\u8981\u4ece\u9605\u8bfb\u5f00\u59cb\u505a</li> <li>95%\u7684\u5b8c\u578b\u7b26\u54084443\uff08\u9009\u9879\u5206\u5e03\uff09\uff0c\u9ad8\u8003\u4e2d\u53ea\u670922\u8fd8\u662f\u54ea\u4e00\u5e74\u51fa\u73b0\u8fc74533\uff0c\u5efa\u8bae\u505a\u5b8c\u578b\u7684\u65f6\u5019\u5708\u9009\u9879\u800c\u975e\u5199\u5b57\u6bcd\uff0c\u4e0d\u7136\u4e0a\u4e0b\u4f1a\u5f71\u54cd\u3002\u7b2c\u4e00\u6b21\u505a\u4e0d\u51fa\u6765\u7684\u53ef\u4ee5\u5148\u7a7a\u7740\uff0c\u518d\u8bfb\u4e00\u904d\u540e\u56de\u6765\u6839\u636e\u5206\u5e03\u7efc\u5408\u6587\u610f\u586b\u6ee1\u3002</li> <li>\u9605\u8bfb\u8bfb\u5b8c\u6587\u7ae0\uff0c\u8bed\u586b\u5168\u90e8\u8981\u8bfb \u518d\u505a\u9898\uff08\u4e0d\u7136\u4f1a\u6709\u5f88\u6076\u5fc3\u7684\u9677\u9631\uff09</li> <li>\u4f5c\u6587\u4e0d\u4e00\u5b9a\u8981\u6253\u8349\u7a3f\uff0c\u4f46\u662f\u4e00\u5b9a\u4e0d\u80fd\u6709\u8bed\u6cd5\u9519\u8bef\uff0c\u5b57\u8ff9\u96be\u770b\uff08\u8fd9\u4e24\u70b9\u662f\u5f71\u54cd\u4f5c\u6587\u7684\u4e3b\u8981\u56e0\u7d20\uff0c24\u9ad8\u8003\u4e4b\u540e\u53ef\u80fd\u8fd8\u6709\u4e3b\u65e8\u5347\u534e\uff09\u3002</li> <li>\u8bfb\u61c2\u624d\u662f\u5b66\u82f1\u8bed\u7684\u552f\u4e00\u8981\u70b9\uff01\uff01\uff01</li> </ul> <p>\u8bf7\u5408\u7406\u4f7f\u7528IAI\uff0c\u5f88\u6709\u53ef\u80fd\u662f\u6700\u597d\u7684\u8d44\u6e90\u3002</p>"},{"location":"tygx_exp/math_fht/","title":"\u6570\u5b66\u7ecf\u9a8c\u5206\u4eab","text":"<p>\u80cc\u666f:2024\u5c4a\u9ad8\u8003138\uff08\u586b\u7a7a\u9519\u4e00\u90535'+19\u9898\u6700\u540e\u4e00\u95ee7'\uff09</p>"},{"location":"tygx_exp/math_fht/#_2","title":"\u5b66\u79d1\u672c\u8eab:","text":"<ul> <li>\u6211\u60f3\u6570\u5b66\u7684\u4f53\u7cfb\uff08\u89e3\u9898\u5957\u8def\uff09\u662f\u4e0d\u5982\u7269\u7406\u5b8c\u6574\u7684\u3002\u6bd4\u5982:\u5706\u9525\u66f2\u7ebf\u5f88\u96be\u627e\u5230\u901a\u6cd5\u89e3\u51b3\u6240\u6709\u9898\u6216\u8005\u5bfc\u6570\u6709\u65f6\u5019\u4e5f\u4f1a\u6d89\u53ca\u5f88\u591a\u5947\u5947\u5999\u5999\u7684\u77e5\u8bc6\u3002</li> <li>\u771f\u7684\u5f88\u96be\u7a33\u5b9a\u63d0\u5206\uff08\u4e3b\u8981\u6307120+?\uff09</li> <li>\u5b66\u79d1\u601d\u7ef4\u53ef\u80fd\u5f88\u91cd\u8981\u3002\u867d\u7136\u6211\u4e0d\u662f\u5f88\u80fd\u9610\u660e\u8fd9\u4e2a\u6982\u5ff5\uff0c\u4f46\u5177\u4f53\u6765\u8bf4\u5c31\u662f\uff0c\u8981\u53bb\u505a\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u80cc\u7b54\u6848\u3002\u5176\u5b9e\u5f88\u591a\u65f6\u5019\u7684\u505a\u4e5f\u4e0d\u8fc7\u662f\u9ed8\u5199\u4ee5\u524d\u4f1a\u7684\u5957\u8def\uff0c\u4e0d\u4f1a\u7684\u4e5f\u57fa\u672c\u4e0d\u53ef\u80fd\u5f53\u573a\u521b\u65b0\u51fa\u6765\u3002\u6240\u4ee5\u5927\u6982\u8fd9\u91cc\u7684\u505a\u6307\u7684\u662f\uff0c\u8fd0\u7528\u4ee5\u524d\u5b66\u8fc7\u7684skill\uff0c\u5c06\u4ed6\u4eec\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u62b5\u8fbe\u6240\u8981\u8fbe\u6210\u7684\u76ee\u6807\u3002</li> <li>\u6240\u4ee5\uff0c\u4e5f\u8bb8\u4f46\u51e1\u4e0a\u8ff0\u4e00\u4e2a\u6b65\u9aa4\u505a\u4e0d\u5230\uff0c\u90fd\u5f88\u96be\u505a\u5bf9\u4e00\u9053\u9898:<ul> <li>\u5206\u6790\u76ee\u6807\u662f\u4ec0\u4e48</li> <li>\u8003\u8651\u8981\u600e\u4e48\u5230\u8fbe</li> <li>\u8fd0\u7528\u4ec0\u4e48\u5de5\u5177<ul> <li>\u5982\u4f55\u68c0\u9a8c\uff0c\u5b9a\u6027\u5224\u65ad    </li> <li>\u5982\u4f55\u8bd5\u63a2\uff0c\u5b9a\u91cf\u8ba1\u7b97</li> </ul> </li> </ul> </li> </ul>"},{"location":"tygx_exp/math_fht/#_3","title":"\u5b66\u4e60\u65b9\u6cd5:","text":"<pre><code>\u6211\u4e00\u4e2a\u9ad8\u4e2d\u57fa\u672c\u6ca1\u505a\u8fc7\u6570\u5b66\u4f5c\u4e1a\u7684\u4eba\u4e5f\u8bb8\u4e0d\u914d\u6765\u8bf4\u8fd9\u4e2a\u95ee\u9898\u3002\n</code></pre>"},{"location":"tygx_exp/math_fht/#_4","title":"\u7701\u6d41\u7248:","text":"<ul> <li>\u638c\u63e1\u57fa\u672c\u77e5\u8bc6\u70b9\uff0c\u5b9a\u4e49\uff0c\u516c\u5f0f\uff0c\u5957\u8def\uff08\u5982\u7aef\u70b9\u6548\u5e94\uff09</li> <li>\u505a\u6574\u5377\u67e5\u6f0f\u8865\u7f3a</li> <li>\u505a\u4e13\u9898\uff0c\u6bd4\u8f83\u5f52\u7eb3</li> <li>\u8003\u8bd5\u8bad\u7ec3\u5fc3\u6001</li> </ul>"},{"location":"tygx_exp/math_fht/#_5","title":"\u6ce8\u610f\u4e8b\u9879:","text":"<ul> <li>\u9519\u9898\u672c\u5f88\u53ef\u80fd\u6ca1\u6709\u7528\uff0c\u771f\u6b63\u6709\u7528\u7684\u662f\u8003\u8bd5\u4ee5\u540e\u7684\u590d\u76d8\uff0c\u81ea\u5df1\u6574\u7406\u603b\u7ed3\u51fa\u7684\u5957\u8def\u65b9\u6cd5\uff0c\u6613\u9519\u5f52\u7eb3\u3002     \u6bd4\u5982:     \u53ef\u80fd\u8fd9\u6b21\u5bfc\u6570\u9898\u6ca1\u505a\u51fa\u6765\uff0c\u4f60\u8981\u60f3\u6e05\u695a\u7684\u662f\uff0c\u4e3a\u4ec0\u4e48\u6ca1\u505a\u51fa\u6765\uff0c\u8003\u8bd5\u7684\u65f6\u5019\u6ca1\u82b1\u65f6\u95f4\u8fd8\u662f\u82b1\u4e86\u65f6\u95f4\u4e5f\u6ca1\u60f3\u660e\u767d\uff0c\u771f\u6b63\u6b63\u786e\u7684\u51b3\u7b56\u662f\u4ec0\u4e48\uff08\u8df3\u8fc7\uff1f\u7ee7\u7eed\u601d\u8003\uff1f\uff09\uff0c\u5982\u679c\u4e0b\u6b21\u8fd8\u662f\u505a\u4e0d\u51fa\u6765\u53ef\u4ee5\u600e\u4e48\u5c1d\u8bd5\uff0c\u5b66\u5230\u4e86\u4ec0\u4e48\u65b0\u7684\u6a21\u578b\u3002</li> <li>\u4e0d\u8981\u5bf9\u8003\u8bd5\u8fc7\u62df\u5408\uff0c\u5f88\u591a\u4eba\u8fc7\u5206\u5938\u5927\u4e86\u590d\u76d8\u7684\u4f5c\u7528\u3002\u7279\u522b\u662f\u5728\u6570\u5b66\u5e94\u8bd5\u65b9\u9762\uff0c\u82b1\u8fc7\u591a\u7684\u65f6\u95f4\u5728\u590d\u76d8\u4e0a\u7684\u6027\u4ef7\u6bd4\u4e0d\u9ad8\uff0c\u4e0d\u5982\u591a\u505a\u70b9\u9898/\u770b\u70b9\u65b0\u9c9c\u73a9\u610f/\u5b66\u522b\u7684\u79d1\u76ee\u53bb\u3002</li> <li>\u65f6\u95f4\u5f52\u7eb3\u548c\u5fc3\u6001\u51b3\u5b9a\u8003\u8bd5\u5206\u6570\u7684\u4e0b\u9650\u3002\u57fa\u7840\u9898\u505a\u5b8c\u5c31\u6709\u5f88\u591a\u5206\u6570\u5566\uff01\u522b\u88ab\u4e00\u4e2a\u9898\u5361\u4f4f\u4e86\u5c31\u5fc3\u6001\u5d29\u4e86\uff0c\u5f88\u591a\u4eba\u8bf4\u81ea\u5df1\u5fc3\u6001\u597d\u53ea\u4e0d\u8fc7\u662f\u6ca1\u505a\u8fc7\u9053\u9053\u4e0d\u987a\u5229\u7684\u5377\u5b50\u3002</li> <li>\u591a\u8ddf\u8001\u5e08\u4ea4\u6d41\uff0c\u8001\u5e08\u5f88\u53ef\u80fd\u6bd4\u4f60\u60f3\u50cf\u7684\u8981\u66f4helpful\u4e00\u4e9b\u3002</li> <li>\u4e0d\u8981\u653e\u5f03\u6570\u5b66\uff0c150\u5206\u5462\uff0c\u8fd9\u90fd\u653e\u4e86\u8fd8\u662f\u522b\u9ad8\u8003\u4e86\u3002<ul> <li>\u65e9\u70b9\u5b66\u6570\u5b66\u5427\uff0c\u522b\u6b7b\u5230\u4e34\u5934\u4e86\u624d\u540e\u6094</li> </ul> </li> <li>\u4e0d\u8981\u6c89\u8ff7\u9ad8\u7ea7\u73a9\u610f:\uff08\u6709\u8fd9\u65f6\u95f4\u4e0d\u5982\u53bb\u73a9\uff09<ul> <li>\u6cf0\u52d2\u5c55\u5f00</li> <li>\u6781\u70b9\u6781\u7ebf</li> <li>\u5bfc\u6570\u7684\u4e00\u5806\u5947\u6280\u6deb\u5de7</li> <li>...</li> </ul> </li> <li>\u8ba1\u7b97\u80fd\u529b\u5f88\u91cd\u8981\uff0c\u89e3\u6790\u51e0\u4f55\u8be5\u7b97\u7684\u8981\u7b97\u3002</li> </ul>"},{"location":"tygx_exp/math_fht/#_6","title":"\u8d44\u6599:","text":"<ul> <li>\u5b66\u6821\u5e73\u65f6\u7684\u8003\u8bd5\uff0c\u8bf7\u8ba4\u771f\u5bf9\u5f85</li> <li>\u6d59\u8003\u795e\u5899</li> <li>\u4e0d\u63a8\u8350\u4ec0\u4e48\u6559\u8f85\uff0c\u5bf9\u9ad8\u8003\u7684\u6700\u4f73\u62df\u5408\u662f\u9ad8\u8003\u5377+\u56db\u7701\u8054\u8003\u4e4b\u7c7b\u7684\u98ce\u5411\u5377</li> <li>\u540c\u5b66\u7684\u7b14\u8bb0\uff08\u4e0d\u662f</li> </ul>"},{"location":"tygx_exp/phy_fht/","title":"\u7269\u7406\u7ecf\u9a8c\u5206\u4eab","text":"<p>\u80cc\u666f:2024\u5c4a\u9996\u800395-&gt;\u9ad8\u8003100</p>"},{"location":"tygx_exp/phy_fht/#_2","title":"\u5b66\u79d1\u672c\u8eab:","text":""},{"location":"tygx_exp/phy_fht/#_3","title":"\u8981\u4e0d\u8981\u9009\u7269\u7406\uff1f","text":"<ul> <li>\u5982\u679c\u4ee5\u540e\u60f3\u5b66\u7406\u5de5\u79d1\u7684\u8bdd\uff0c\u6700\u597d\u662f\u7269\u5316\u5927\u793c\u5305\u4e00\u8d77\u4e0a\u300224\u5e74\u6587\u79d1\u6ed1\u6863\u8fd8\u662f\u5f88\u5389\u5bb3\u7684\u3002</li> <li>\u5bf9\u4e8e\u6570\u5b66\u4e0d\u597d\u7684\u540c\u5b66\u6765\u8bf4\uff0c\u7269\u7406\u7684\u96be\u5ea6\u4e0d\u4f1a\u5f88\u5c0f\u3002<ul> <li>\u5efa\u6a21</li> <li>\u8bbe\u65b9\u7a0b\uff0c\u627e\u672a\u77e5\u91cf\uff0c\u89e3\u591a\u5143\u65b9\u7a0b</li> <li>\u4e09\u89d2\u51fd\u6570\u7684\u719f\u7ec3\u4f7f\u7528</li> <li>\u5bfc\u6570\u4ee5\u53ca\u90e8\u5206\u79ef\u5206\u7684\u4f7f\u7528</li> <li>\u5bf9\u516c\u5f0f\u63a8\u5bfc\u65b9\u5411\u7684\u628a\u63e1</li> </ul> </li> <li> <p>\u5bf9\u4e8e\u6b7b\u8bb0\u786c\u80cc\u5b66\u7269\u7406\u7684\u540c\u5b66\u6765\u8bf4\uff0c\u5343\u4e07\u4e0d\u8981\u9009\u7269\u7406\u6765\u6076\u5fc3\u81ea\u5df1/\u8001\u5e08\u3002\u8bf7\u9a8c\u8bc1\u4f60\u662f\u5426\u638c\u63e1\u5982\u4e0b\u516c\u5f0f\u63a8\u5bfc:</p> <ul> <li>\u5229\u7528\u6253\u70b9\u8ba1\u65f6\u5668\u6c42\u52a0\u901f\u5ea6\u516c\u5f0f</li> <li>\u5e73\u629b\u8fd0\u52a8\u8f68\u8ff9\u65b9\u7a0b\uff0c\u5750\u6807\u968f\u65f6\u95f4\u53d8\u5316\u51fd\u6570\uff0c\u53cd\u5411\u5ef6\u957f\u7ebf\u7684\u4e8c\u7ea7\u7ed3\u8bba</li> <li>\u4e07\u6709\u5f15\u529b\u516c\u5f0f\uff0c\u5929\u4f53\u8fd0\u52a8\u901f\u5ea6\uff0c\u89d2\u901f\u5ea6\uff0c\u5468\u671f\uff0c\u80fd\u91cf</li> <li>\u5f39\u6027\u52bf\u80fd\uff0c\u52a8\u80fd\uff0c\u673a\u68b0\u80fd\uff08\u5f15\u529b\u52bf\u80fd\uff0c\u5e93\u4ed1\u52bf\u80fd\uff09</li> <li>\u52a8\u91cf\u6765\u6e90\uff0c\u78b0\u649e\u6a21\u578b</li> <li>\u6d1b\u4f26\u5179\u529b\u53ca\u5bf9\u5e94\u7c92\u5b50\u8fd0\u52a8\u6a21\u578b</li> <li>\u7535\u78c1\u611f\u5e94\u53ca\u5bf9\u5e94\u6a21\u578b:\u65cb\u8f6c\u68d2\u7684\u52a8\u751f\u7535\u52a8\u52bf\uff0c\u5355\u68d2\uff0c\u53cc\u68d2\uff0c\u7535\u5bb9\uff0c\u7535\u611f\uff0c\u78c1\u9a71\u52a8\uff0c\u70ed\u91cf\u8ba1\u7b97</li> </ul> <p>\u5982\u679c\u4f60\u4e3b\u8981\u662f\u9760\u8bb0\u80cc\u6765\u652f\u6491\u7269\u7406\u5b66\u4e60\uff0c\u90a3\u8bf7\u4f60\u4e0d\u8981\u9009\u7269\u7406\u3002</p> </li> </ul>"},{"location":"tygx_exp/phy_fht/#_4","title":"\u7269\u7406\u96be\u5ea6\u600e\u4e48\u6837\uff1f","text":"<ul> <li>\u7269\u7406\u5e94\u8be5\u662f\u7406\u79d1\u91cc\u4f53\u7cfb\u7ed3\u6784\u7d27\u5bc6\u5b8c\u6574\uff0c\u5e94\u8bd5\u624b\u6bb5\u4e30\u5bcc\u5b8c\u5907\u7684\u4e00\u95e8\u5b66\u79d1\u4e86\u3002\u638c\u63e1\u77e5\u8bc6\u70b9\uff0c\u5b9a\u4e49\uff0c\u5b9a\u7406\uff0c\u6a21\u578b\uff0c\u5e94\u7528\u9700\u8981\u82b1\u65f6\u95f4\uff0c\u4e14\u6709\u5408\u7406\u7684\u8def\u7ebf\u53ef\u4ee5\u4f9d\u636e\u3002<ul> <li>\u8ddf\u5316\u5b66\u6bd4\uff0c\u5b83\u66f4\u504f\u5b9a\u91cf\uff0c\u6709\u660e\u786e\u7684\u516c\u5f0f\u8ba1\u7b97\uff0c\u5b8c\u6574\u7684\u903b\u8f91\u94fe\u6761\u3002</li> <li>\u8ddf\u6570\u5b66\u6bd4\uff0c\u5b83\u66f4\u504f\u5e94\u7528\uff0c\u6709\u6e05\u6670\u7684\u7ed3\u679c\u5bfc\u5411\uff0c\u4e0d\u8981\u6c42\u7075\u611f\u7206\u53d1\u3002</li> <li>\u8ddf\u6280\u672f\u6bd4\uff0c\u5b83\u66f4\u504f\u8ba1\u7b97\uff0c\u6709\u76f8\u6263\u7684\u77e5\u8bc6\u4f53\u7cfb\uff0c\u66f4\u4f4e\u7684\u5b66\u4e60\u95e8\u69db\u3002</li> </ul> </li> <li>\u53ea\u8981\u4f60\u613f\u610f\u4e0b\u529f\u592b\uff0c\u7269\u7406\u7edd\u5bf9\u662f\u4e00\u95e8\u52aa\u529b\u5c31\u6709\u56de\u62a5\u7684\u5b66\u79d1\u3002</li> </ul>"},{"location":"tygx_exp/phy_fht/#_5","title":"\u5b66\u4e60\u65b9\u6cd5:","text":"<p>\u8ddf\u6280\u672f\u7c7b\u4f3c</p>"},{"location":"tygx_exp/phy_fht/#etc","title":"\u627e\u4e00\u672c\u6559\u8f85\uff08\u4e94\u4e09\u9ad8\u8003\u7248 etc.\uff09\u770b\u5b8c\u77e5\u8bc6\u70b9","text":"<ul> <li>\u8981\u6c42\u80fd\u591f\u77e5\u9053\u5b9a\u4e49\uff0c\u91cd\u8981\u516c\u5f0f\u63a8\u5bfc\uff0c\u884d\u751f\u4e8c\u7ea7\u7ed3\u8bba\u548c\u57fa\u672c\u6a21\u578b     \u6bd4\u5982:<ul> <li>\u7535\u5bb9\u7684\u5b9a\u4e49</li> <li>\u7535\u5bb9\u5927\u5c0f\u7684\u8ba1\u7b97\u5f0f</li> <li>\u6d89\u53ca\u7535\u5bb9\u7684\u52a8\u6001\u53d8\u5316</li> <li>\u7535\u5bb9\u5728\u7535\u8def\u4e2d\u5982\u4f55\u8ba1\u7b97</li> <li>\u7535\u5bb9\u7684\u80fd\u91cf\u516c\u5f0f</li> <li>\u7535\u5bb9\u5145\u653e\u7535\u5b9e\u9a8c</li> <li>\u7535\u5bb9\u5728\u4ea4\u6d41\u7535\u4e2d\u7684\u4f5c\u7528\uff08\u5b9a\u6027\uff09</li> <li>\u7535\u5bb9\u4e0e\u5176\u4ed6\u6a21\u578b\u7684\u7ed3\u5408</li> <li>...</li> </ul> </li> </ul>"},{"location":"tygx_exp/phy_fht/#_6","title":"\u505a\u9898","text":"<ul> <li>\u9898:<ul> <li>\u5377\u5b50</li> <li>\u4e13\u9898  </li> </ul> </li> <li>\u65b9\u6cd5:<ul> <li>\u5377\u5b50\u7528\u6765\u67e5\u6f0f\u8865\u7f3a\uff0c\u63d0\u5347\u6574\u4f53\u5b8c\u6210\u5ea6\uff0c\u4f18\u5316\u65f6\u95f4\u5206\u914d\uff0c\u5feb\u901f\u5efa\u6784\u77e5\u8bc6\u6846\u67b6</li> <li>\u4e13\u9898\u7528\u6765\u5f3a\u5316\u8ba1\u7b97\uff0c\u719f\u6089\u516c\u5f0f\uff0c\u6df1\u5316\u903b\u8f91\u53ca\u5f52\u7eb3\u672c\u8d28</li> </ul> </li> <li>\u5982\u679c\u4e0d\u4f1a\u600e\u4e48\u529e:<ul> <li>\u770b\u7b54\u6848\uff0c\u95ee\u8001\u5e08\uff0c\u95ee\u540c\u5b66</li> <li>\u9009\u53d6\u540c\u7c7b\u9898\u76ee\uff0c\u505a\u8db3\u591f\u6570\u91cf\u540e\u5f52\u7eb3\u6574\u7406\u6a21\u578b</li> </ul> </li> <li>\u6613\u9519\u70b9\u5373\u4f7f\u8bb0\u5f55<ul> <li>\u53ef\u7528\u6d3b\u9875\u672c/A4\u7eb8+\u71d5\u5c3e\u5939</li> </ul> </li> <li>\u63a8\u8350\u5f52\u7eb3\u6a21\u578b\u800c\u4e0d\u662f\u6574\u7406\u9519\u9898</li> <li>\u4e00\u5b9a\u8981\u591a\u7ec3\u8ba1\u7b97\u548c\u65f6\u95f4\uff0c\u5c11\u7528/\u4e0d\u7528\u8ba1\u7b97\u5668<ul> <li>\u5728\u9ad8\u4e09\u672b\u671f\uff0c\u6211\u80fd\u7a33\u5b9a40min\u505a\u5b8c\u673a\u68b0\u80fd\u53ca\u524d\u9762\u6240\u6709\u90e8\u5206\u3002\u5f53\u7136\u8fd9\u5bf9\u5927\u591a\u6570\u540c\u5b66\u6765\u8bf4\u592a\u5feb\u4e86\uff0c\u4f46\u901f\u5ea6\u63d0\u5347\u600e\u4e48\u4e5f\u4e0d\u5acc\u591a\u3002</li> <li>\u4f8b\u5982\u572824\u5e74\u9ad8\u8003\u4e2d\uff0c\u5f88\u591a\u540c\u5b66\u7531\u4e8e\u7535\u78c1\u611f\u5e94\u5361\u58f3\u800c\u6ca1\u6709\u505a\u5b8c\u5377\u5b50\uff0c\u5bfc\u81f4\u4e8c\u8003\u672a\u80fd\u5b9e\u73b0\u6709\u6548\u63d0\u5206\u3002</li> </ul> </li> <li>\u9009\u62e9\u9898\u5f88\u91cd\u8981\uff0c\u4e00\u9053\u4e09\u5206\u5343\u4e07\u522b\u9519\u3002\u591a\u9009\u9898\u8bf7\u4fdd\u5b88\u4e00\u4e9b\uff0c\u6fc0\u8fdb\u5f80\u5f80\u4e0d\u4f1a\u6709\u597d\u7ed3\u679c\uff0c\u9ad8\u8003\u540e\u6094\u5c31\u6765\u4e0d\u53ca\u4e86\u3002</li> <li>\u4e0d\u4f1a\u7684\u9898\u76ee\u53ca\u65f6\u6b62\u635f\uff0c\u5982\u673a\u68b0\u80fd\u4e2d\u65e0\u8c13\u7684\u5206\u7c7b\u8ba8\u8bba\uff0c\u7535\u78c1\u611f\u5e94\u4e2d\u65e0\u8c13\u7684\u70ed\u91cf\u8ba1\u7b97\u7b49\u7b49\uff0c\u53ef\u4ee5\u7b49\u505a\u5b8c\u6574\u5f20\u5377\u5b50\u540e\u518d\u6765\u505a\u3002</li> <li>\u4e0d\u8981\u6c89\u8ff7\u504f\uff0c\u602a\uff0c\u96be\uff0c\u73b0\u5728\u7684\u6a21\u62df\u5377\u5f88\u591a\u98ce\u683c\u504f\u79bb\u9ad8\u8003\uff0c\u8bf7\u57f9\u517b\u8fa8\u522b\u8d28\u91cf\u7684\u672c\u9886\u3002</li> </ul>"},{"location":"tygx_exp/phy_fht/#_7","title":"\u5fc3\u6001\u65b9\u9762:","text":"<ul> <li>\u7269\u7406\u7684\u8003\u8bd5\u65f6\u95f4\u89c4\u5212\u5f88\u91cd\u8981\uff0c\u4e0d\u4f1a\u7684\u53ef\u4ee5\u5148\u8df3\u8fc7\u53bb\uff0c\u56de\u6765\u5728\u505a\uff0c\u5f53\u7136\u8df3\u591a\u4e86\u81ea\u7136\u4e5f\u8003\u4e0d\u597d\u4e86\u3002\u8981\u9759\u4e0b\u6765\u505a\u9898\u3002</li> <li>\u6ce8\u610f\u529b\u96c6\u4e2d\uff0c\u76f8\u4fe1\u81ea\u5df1\u7684\u5224\u65ad\uff0c\u653e\u677e\u505a\u9898\u3002</li> <li>\u5fc3\u6001\u5e26\u6765\u7684\u5f71\u54cd\u4e3b\u8981\u96c6\u4e2d\u5728\u9009\u62e9\u9898\u4e0a\uff0c\u6211\u9996\u8003\u9519\u4e864.5\u9053\u7684\u9009\u62e9\u9898\uff0c\u76f4\u63a595\u4e86\u3002</li> <li>\u5e73\u65f6\u8003\u8bd5\u6ca1\u6709\u5f88\u5927\u4ef7\u503c\uff0c\u8054\u8003\u7684\u552f\u4e00\u610f\u4e49\u5c31\u662f\u6a21\u62df\u9ad8\u8003\u6c1b\u56f4\u953b\u70bc\u5fc3\u6001\u3002\u6211\u9996\u8003\u524d\u7a33\u5b9a99+\uff0c\u6700\u540e\u4e0d\u8fd8\u662f\u8003\u4e86\u4e2a95\u3002</li> </ul>"},{"location":"tygx_exp/phy_fht/#_8","title":"\u8d44\u6599\u65b9\u9762:","text":"<ul> <li>\u6d59\u8003\u7269\u7406\u4e0a\u6709\u4e00\u4e9b\u5377\u5b50\uff08\u4e0d\u5168\u9762\uff09</li> <li>\u6d59\u8003\u795e\u5899\u4f1a\u6709\u51e0\u4e4e\u6240\u6709\u8054\u8003\u7684\u5377\u5b50</li> <li>\u6559\u8f85\u4e66\u63a8\u8350:<ul> <li>\u9ad8\u8003\u4e94\u4e09\uff08\u7ea2\u7684\u7d2b\u7684\u90fd\u53ef\u4ee5\uff09</li> <li>\u9ad8\u8003\u5fc5\u5237\u9898</li> <li>\u5f53\u7136\uff0c\u5b66\u6821\u80af\u5b9a\u4f1a\u4e70\u7684\uff08\u6bd4\u5982\u6b65\u6b65\u9ad8\uff09\u3002\u5982\u679c\u4f60\u8fd8\u662f\u9ad8\u4e00\u9ad8\u4e8c\u53ef\u4ee5\u505a\u505a\u8f85\u5bfc\u4e66\uff0c\u5982\u679c\u662f\u9ad8\u4e09\u4e86\uff0c\u8fd8\u662f\u5efa\u8bae\u5377\u5b50+\u4e13\u9898\u7684\u6a21\u5f0f\u3002\uff08\u4e13\u9898\u6765\u81ea\u4e8e\u9ad8\u8003\u5fc5\u5237\u9898\u4e4b\u7c7b\u7684\u4e66\uff09\u8bf7\u52ff\u9677\u5165\uff0c\u6211\u505a\u9898\u591a\u5c31\u662f\u597d\u3002\u6211\u51e0\u4e4e\u505a\u5b8c\u4e8623\u5c4a+24\u5c4a\u6d59\u6c5f\u6240\u6709\u7684\u8054\u8003\u5377\uff0c\u611f\u89c9\u63d0\u5347\u5e76\u4e0d\u4f1a\u5f88\u5927\u3002</li> <li>\u7406\u6027\u5237\u9898\u6027\u4ef7\u6bd4\u66f4\u9ad8\u3002</li> </ul> </li> </ul>"},{"location":"tygx_exp/phy_fht/#_9","title":"\u662f\u5426\u8981\u5b66\u4e60\u9ad8\u7ea7\u5185\u5bb9:","text":"<ul> <li>\u5982\u679c\u4e3a\u4e86\u9ad8\u8003\u53d6\u5f9797+\u7684\u6210\u7ee9\uff0c\u6211\u8ba4\u4e3a\u662f\u6ca1\u6709\u5fc5\u8981\u3002\u5982\u679c\u771f\u7684\u60f3\u5b66\uff0c\u63a8\u8350\u5b66\u4e60\u4e00\u4e0b\u5185\u5bb9:<ul> <li>\u7b80\u5355\u51fd\u6570\u7684\u79ef\u5206\uff08\u53c2\u770b\u540c\u6d4e\u7248\u9ad8\u6570\u4e0a\u518c\uff09</li> <li>\u5fae\u5206\u65b9\u7a0b\u7684\u89e3 \uff08\u53c2\u770b\u540c\u6d4e\u7248\u9ad8\u6570\u4e0b\u518c\uff09</li> <li>\u659c\u629b\u8fd0\u52a8</li> <li>\u7535\u78c1\u611f\u6027\u4e2d\u5355\u68d2\uff0c\u53cc\u68d2\u6a21\u578b\u7684\u5b9a\u91cf\u8ba1\u7b97\uff08\u6d89\u53ca\u5fae\u5206\u65b9\u7a0b\uff09</li> <li>\u4ea4\u6d41\u7535\u6709\u6548\u503c\u7684\u63a8\u5bfc</li> <li>\u6768\u6c0f\u5e72\u6d89\u7684\u5b9a\u91cf\u8ba1\u7b97</li> </ul> </li> <li>\u5982\u679c\u662f\u4e3a\u4e86\u5f3a\u57fa\u6216\u8005\u4e09\u4e00\uff0c\u6211\u529d\u4f60\u7701\u7701\u5427\uff0c\u9ad8\u8003\u641e\u5230\u4f4d\u6b211000\u4e86\u518d\u8bf4\u5427\u3002\u6027\u4ef7\u6bd4\u771f\u7684\u5f88\u4f4e\u5f88\u4f4e\uff0c\u522b\u4fe1\u673a\u6784\u7684\u9b3c\u8bdd\uff0c\u9ad8\u8003\u5206\u6570\u624d\u662f\u6700\u91cd\u8981\u7684\u3002</li> </ul>"},{"location":"tygx_exp/phy_fht/#_10","title":"\u8001\u5e08\u4e0a\u8bfe\u662f\u5426\u8981\u542c:","text":"<ul> <li>\u56e0\u4eba\u800c\u5f02\uff0c\u4f60\u89c9\u5f97\u6709\u7528\u5c31\u542c\uff0c\u4f46\u5bf9\u4e8e\u6211\u6765\u8bf4\uff0c\u542c\u8bfe\u7684\u6548\u7387\u80af\u5b9a\u6bd4\u4e0d\u4e0a\u81ea\u5df1\u505a\u9898\u7684\u6548\u7387\u3002\u5e08\u751f\u4e92\u76f8\u8ba9\u6b65\u8fbe\u6210\u4e00\u81f4\u5c31\u597d\u3002</li> </ul>"},{"location":"tygx_exp/phy_fht/#_11","title":"\u662f\u5426\u6709\u5fc5\u8981\u8bfe\u5916\u8f85\u5bfc:","text":"<ul> <li>\u56e0\u4eba\u800c\u5f02\uff0c\u8f85\u5bfc\u73ed\u80fd\u63d0\u4f9b\u7684\u65e0\u975e\u662f\u4e0a\u8ff0\u51e0\u79cd:\u77e5\u8bc6\u70b9\u8bb2\u89e3\uff0c\u9898\u76ee\uff0c\u89e3\u7b54\uff08\u53ef\u80fd\u8fd8\u6ca1\u6709\uff09\uff0c\u7ed9\u5bb6\u957f\u4e00\u4e2a\u5b89\u5fc3\u3002</li> <li>\u5f53\u7136\uff0c\u6211\u89c9\u5f97\u6548\u7387\u4e0d\u4f1a\u6bd4\u5b66\u6821\u9ad8\u591a\u5c11\u3002\u5982\u679c\u771f\u5b66\u4e0d\u4f1a\u4e86\uff0c\u90a3\u8fd8\u662f\u53bb\u5427\u3002</li> </ul> <p>\u53cd\u6b63\u8fd8\u662f\u5e0c\u671b\u5927\u5bb6\u53d1\u6325\u4e3b\u89c2\u80fd\u52a8\u6027\uff0c\u5b66\u6821\u53ea\u6709\u515c\u5e95\u4f5c\u7528\uff0c\u4e0d\u8fc7\u8c01\u77e5\u9053\u5e95\u5728\u54ea\u91cc</p>"},{"location":"tygx_exp/tech_fht/","title":"\u6280\u672f\u7ecf\u9a8c\u5206\u4eab","text":"<p>\u80cc\u666f:2024\u5c4a\u9996\u800389-&gt;\u9ad8\u800398</p>"},{"location":"tygx_exp/tech_fht/#_2","title":"\u5b66\u79d1\u672c\u8eab:","text":""},{"location":"tygx_exp/tech_fht/#_3","title":"\u6280\u672f\u597d\u8d4b\u5206\u5417\uff1f","text":"<p>\u4e00\u822c\uff0c\u81f3\u5c11\u6bd4\u751f\u7269\u597d\u8d4b\u5206\uff08\u4e2a\u4eba\u611f\u89c9\uff09\u3002\uff08\u4e0d\u8fc7\u4e5f\u53ef\u4ee5\u9009\u5730\u7406\uff0c\u53ef\u80fd\u4f1a\u66f4\u597d\u8d4b\u5206\uff09 \u4f46\u5c31\u5e73\u65f6\u7684\u8054\u76df\u8003\u6765\u8bf4\uff0c</p> <ul> <li>\u5927\u6982\u9ad8\u4e00\u9ad8\u4e8c\u8d4b\u5206\u4f1a\u597d\u4e00\u4e9b\uff08\u6bd5\u7adf\u5f88\u591a\u4ebaprogramming\u90fd\u8fd8\u6ca1\u600e\u4e48\u641e\u61c2\uff09\u3002</li> <li>\u5230\u9ad8\u4e09\u5c31\u4e0d\u4e00\u5b9a\u4e86\uff0c\u4e3b\u8981\u770b\u8054\u76df\u53c2\u52a0\u7684\u5b66\u6821\u548c\u5377\u5b50\u672c\u8eab\u7684\u8d28\u91cf\u3002\u8bb0\u5f97\u9ad8\u8003\u524d\u7684\u4e94\u6821\u8054\u8003\uff0c\u5377\u5b50\u597d\u50cf\u633a\u7b80\u5355\u7684\uff0c\u4f46\u662f\u8d4b\u5206\u6781\u5176\u96be\u8d4b\u3002</li> <li>\u81f3\u4e8e\u9ad8\u8003\uff0c\u8d4b\u5206\u8fd8\u884c\uff0c\u4f46\u662f\u9ad8\u5206\u5f88\u96be\uff08\u7279\u522b\u630798+\uff09\uff0c\u4f30\u8ba1\u662f\u9547\u4e2d\u6e29\u4e00\u5b66\u519b\u676d\u4e8c\u628a\u5206\u5361\u4f4f\u4e86\u3002</li> </ul>"},{"location":"tygx_exp/tech_fht/#_4","title":"\u5b66\u79d1\u96be\u5ea6\u5927\u5417\uff1f","text":"<ul> <li>\u6211\u662f\u5728\u9009\u6280\u672f\u4e4b\u524d\u5c31\u4f1aC++\uff0cPython\uff0c\u4e2a\u4eba\u611f\u89c9\u662f\u9ad8\u4e2d\u77e5\u8bc6\u70b9\u4e0d\u96be\uff0c\u5e73\u65f6\u9898\u76ee\u4e5f\u4e0d\u662f\u5f88\u96be\u3002\u4f46\u662f\u9ad8\u8003\u5c31\u4e0d\u4e00\u5b9a\u4e86\uff0c\u7531\u4e8e\u6280\u672f\u8fd8\u6ca1\u8003\u51e0\u5e74\uff08\u5957\u8def\u8fd8\u6ca1\u88ab\u7a77\u5c3d\uff09\uff0c\u6240\u4ee5\u7a0d\u5fae\u4e00\u53d8\u5316\u5c31\u5bb9\u6613\u6b7b\u4e00\u5927\u7247\u3002</li> <li>\u4f46\u662f\u7f16\u7a0b\u5bf9\u521a\u5165\u95e8\u7684\u65b0\u624b\u800c\u8a00\uff0c\u96be\u5ea6\u8fd8\u662f\u4e0d\u5c0f\u7684\u3002\u7279\u522b\u662f\uff0c\u79bb\u8c31\u7684\u5e94\u8bd5\u6559\u80b2\u65b9\u5f0f&amp;\u96be\u8bc4\u7684\u81ea\u5b66\u80fd\u529b\uff0c\u5f88\u96be\u8bf4\u9760\u5199(write)\u4ee3\u7801\u53ef\u4ee5\u5f88\u597d\u7684\u638c\u63e1\u7b97\u6cd5/\u6570\u636e\u7ed3\u6784\u3002\u6781\u5176\u5bb9\u6613\u9677\u5165\u80cc\u4ee3\u7801\u7684\u6b7b\u5c40\u3002</li> <li>\u4e3b\u8981\u6765\u8bb2\u5c31\u662f\uff0c\u6ca1\u6709\u7269\u7406\u5316\u5b66\u96be\u3002</li> <li>\u6027\u4ef7\u6bd4\u633a\u9ad8\uff08\u5bf9\u6211\u6765\u8bf4\uff0c\u9ad8\u4e8c\u51e0\u4e4e\u6ca1\u6709\u82b1\u65f6\u95f4\uff0c\u9ad8\u4e09\u4e5f\u53ea\u662f\u505a\u505a\u8054\u8003\u5377\uff0c\u4f5c\u4e1a\u57fa\u672c\u6ca1\u505a\u8fc7\u3002\u82b1\u7684\u65f6\u95f4\u4f30\u8ba1\u662f\u82b1\u5728\u5316\u5b66\u4e0a\u7684\u96f6\u5934: (\uff09</li> </ul>"},{"location":"tygx_exp/tech_fht/#_5","title":"\u90a3\u8981\u4e0d\u8981\u9009\u6280\u672f\u634f\uff1f","text":"<ul> <li>\u5982\u679c\u662f\u4ee5\u540e\u5b66\u8ba1\u7b97\u673a\u76f8\u5173\u7684\u8fd8\u662f\u5efa\u8bae\u9009\uff0c\u8fd9\u6837\u7b49\u5927\u5b66\u4e86\u4f1a\u6709\u5f88\u5927\u4f18\u52bf\u3002</li> <li>\u4f46\u5982\u679c\u4e00\u70b9programming\u90fd\u641e\u4e0d\u61c2\uff0c\u90a3\u8fd8\u662f\u7b97\u4e86\u3002</li> <li>\u5982\u679c\u6ca1\u6709\u9009\u7269\u7406/\u7269\u7406\u4e0d\u597d\uff0c\u4e5f\u614e\u91cd\u9009\u6280\u672f\u5427\u3002\uff08\u4e0d\u7136\u82b1\u5728\u7535\u63a7\u4e0a\u7684\u65f6\u95f4\u4f1a\u5f88\u6ca1\u6709\u6027\u4ef7\u6bd4\uff09</li> </ul>"},{"location":"tygx_exp/tech_fht/#_6","title":"\u5b66\u4e60\u65b9\u6cd5:","text":"<pre><code>\u4ec5\u5c31\u9ad8\u4e09\u800c\u8a00\uff08\u9ad8\u4e8c\u6ca1\u5b66\uff09\n</code></pre>"},{"location":"tygx_exp/tech_fht/#_7","title":"\u5148\u8981\u786e\u4fdd\u57fa\u7840\u7684\u77e5\u8bc6\u70b9\u90fd\u4f1a:","text":"<ol> <li>\u5148\u628a\u6559\u8f85\u770b\u4e00\u904d\uff08\u5b66\u6821\u80af\u5b9a\u4f1a\u4e70\u7684\u4e00\u4e9b\u4e71\u4e03\u516b\u7cdf\u7684\uff0c\u53cd\u6b63\u5e02\u9762\u4e0a\u4e5f\u6ca1\u4ec0\u4e48\u5f88\u597d\u7684\u6559\u8f85\uff09</li> <li>\u518d\u628a\u4e66\u770b\u4e00\u904d\uff08\u5f88\u5c0f\u7684\u70b9\u90fd\u8981\u77e5\u9053\uff09</li> <li>\u81ea\u5df1\u5c1d\u8bd5\u628a\u77e5\u8bc6\u70b9\u90fd\u7406\u4e00\u904d\uff08\u9009\u505a\uff09</li> <li>\u6ce8\u610f:\u6280\u672f\u672c\u8eab\u7684\u77e5\u8bc6\u4f53\u7cfb\u5e76\u4e0d\u50cf\u7269\u7406\u5316\u5b66\u90a3\u6837\u7d27\u5bc6\uff0c\u6240\u4ee5\u70b9\u90fd\u662f\u633a\u5206\u6563\u7684\u3002\u4e00\u5b9a\u5de9\u56fa\u597d\u57fa\u7840\u3002 \uff08\u7528\u65f6\u5927\u6982:1\u4e2a\u661f\u671f\uff1f\u4e00\u59293h\u3002\u56e0\u4eba\u800c\u5f02\uff09</li> </ol>"},{"location":"tygx_exp/tech_fht/#_8","title":"\u7136\u540e\u5c31\u662f\u505a\u9898:","text":"<ul> <li>\u5148\u505a\u70b9\u5377\u5b50\uff0c\u770b\u770b\u81ea\u5df1\u6f0f\u6d1e\u5728\u54ea\uff0810\u5f20\u5dee\u4e0d\u591a\u4e86\uff0c\u4e00\u5b9a\u8981\u77ed\u65f6\u95f4\u5185\u505a\u5b8c\uff09:<ul> <li>\u5efa\u8bae\u8054\u8003\u5377\u90fd\u505a\u505a\uff0c\u624d\u77e5\u9053\u4ec0\u4e48\u662f\u597d\u7684\u5377\u5b50\u3002\uff08\u8001\u5e08\u80af\u5b9a\u4f1a\u53d1\u7684\uff09</li> </ul> </li> <li>\u7136\u540e\u505a\u70b9\u4e13\u9898\uff0c\u8d44\u6599\u6765\u6e90\uff08\u6d59\u8003\u4ea4\u6d41\uff09<ul> <li>\u4e3b\u8981\u662f\u8981\u641e\u660e\u767d\u77e5\u8bc6\u70b9\uff0c\u6bd4\u5982<ul> <li>\u94fe\u8868\uff08\u57fa\u7840\u64cd\u4f5c\uff0c\u5feb\u6162\u6307\u9488\uff09\uff0c\u4e8c\u5206\uff08\u4e8c\u53c9\u641c\u7d22\u6811\uff09</li> <li>\u5e38\u89c1\u7684pandas\u64cd\u4f5c</li> <li>\u7f51\u8def\u76f8\u5173\uff08\u80cc\u4e66\uff09</li> <li>\u7535\u63a7\u7684\u57fa\u672c\u6a21\u578b\uff08\u9707\u8361\u7535\u8def\u7684\u51e0\u79cd\u5199\u6cd5\uff0c\u955c\u50cf\u7535\u6d41\u6e90\uff09</li> <li>\u7cfb\u7edf&amp;\u63a7\u5236\uff08\u6bcf\u4e2a\u90e8\u5206\u90fd\u8981\u5f88\u786e\u5b9a\uff0c\u8001\u5e08\u8bb2\u4e0d\u6e05\u695a\uff0c\u81ea\u5df1\u4e00\u5b9a\u8981\u53bb\u641e\u61c2\uff0c\u4e0d\u7136\u5c31\u662f\u505a\u4e00\u9053\u9519\u4e00\u9053\uff09</li> <li>\u5c3a\u5bf8\u6807\u6ce8\uff08\u9519\u51e0\u56de\u5c31\u597d\u4e86\uff09</li> <li>\u4e09\u89c6\u56fe\uff08\u5b58\u7591\uff0c\u8fd9\u9898\u4e00\u76f4\u5728\u53d8\uff09</li> </ul> </li> </ul> </li> <li>\u57fa\u672c\u5c31\u5dee\u4e0d\u591a\u4e86\uff08\u540e\u9762\u518d\u82b1\u65f6\u95f4\u6027\u4ef7\u6bd4\u5c31\u4e0d\u9ad8\u4e86\uff09\uff0c\u5982\u679c\u8fd8\u60f3\u7ee7\u7eed\uff0c\u90a3\u5c31\u81ea\u5df1\u6574\u4e2a\u672c\u5b50\uff0c\u628a\u9519\u9898\u641e\u4e0a\u53bb\uff0c\u6bcf\u6b21\u8003\u8bd5\u524d\u770b\u770b\u3002\uff08\u5b9e\u9645\u4f5c\u7528\u5c31\u662f\u8ba9\u4f60\u522b\u4e00\u505a\u5b8c\u5c31\u628a\u9898\u6254\u4e86\uff0c\u4e5f\u4e0d\u641e\u61c2\uff0c\u90a3\u6837\u7b49\u4e8e\u6ca1\u505a\uff09\u4f46\u9519\u9898\u672c\u5176\u5b9e\u6548\u7387\u5f88\u4f4e\u3002\uff08formalism\uff09</li> </ul>"},{"location":"tygx_exp/tech_fht/#_9","title":"\u505a\u9898\u65f6\u95f4\u65b9\u9762:","text":"<ul> <li>\u6211\u662f\u57fa\u672c\u5148\u505a\u4fe1\u606f\uff0c\u5728\u505a\u901a\u7528\u7684<ul> <li>\u4fe1\u606f13\u9898\u548c\u5927\u9898\u6700\u540e\u4e00\u9898\u4e0d\u4f1a\u7684\u5148\u7a7a\u7740\uff08\u586b\u4e2a\u4e0d\u786e\u5b9a\u7684\uff09\uff0c\u7136\u540e\u53bb\u505a\u901a\u7528\u3002\u5927\u6982\u524d\u976230min\u80fd\u641e\u5b9a</li> <li>\u901a\u7528\u8349\u56fe\u5148\u7a7a\u7740\uff0c\u628a\u7535\u63a7\u5927\u9898\u505a\u5b8c\uff0c\u7136\u540e\u56de\u53bb\u753b\u8349\u56fe\u3002\uff08\u5927\u698240min\uff09</li> <li>\u753b\u5b8c\u8349\u56fe\u518d\u56de\u53bb\u505a\u4fe1\u606f\u4e0d\u4f1a\u7684\u3002</li> <li>\u6700\u540e\u53ef\u4ee5\u6446\u70c2\u4e86\uff0c\u8981\u68c0\u67e5\u4e5f\u53ef\u4ee5\uff08\u53cd\u6b63\u68c0\u67e5\u4e0d\u51fa\u6765\uff09</li> </ul> </li> <li>\u505a\u9898\u600e\u4e48\u5feb\u4e00\u70b9\uff08\u9898\u90fd\u505a\u4e0d\u5b8c\uff0c\u8c08\u4ec0\u4e48\u90fd\u662f\u767d\u642d\uff09:<ul> <li>\u83dc\u5c31\u591a\u7ec3\uff08\u4e0a\u8bfe40min\uff0c\u505a\u5b8c\u9664\uff08\u7535\u63a7/\u586b\u7a0b\u4e0d\u4f1a\u7684&amp;\u753b\u56fe\uff09\u7684\u9898\uff09</li> <li>\u6216\u8005\u665a\u81ea\u4e601h\uff0c\u505a\u5b8c\u5168\u90e8\uff08\u9664\u753b\u56fe\uff09+\u5bf9\u7b54\u6848</li> </ul> </li> <li>\u753b\u56fe\u5c31\u628a\u8054\u8003\u9898\u90fd\u653e\u4e00\u8d77\uff0c\u4e00\u6b21\u753b\u4e2a10\u5f20\u5de6\u53f3\u5c31\u5dee\u4e0d\u591a\u4e86\uff0c\u6ca1\u4ec0\u4e48\u6a21\u578b\u7684\uff08</li> </ul>"},{"location":"tygx_exp/tech_fht/#_10","title":"\u5fc3\u6001\u65b9\u9762:","text":"<ul> <li>\u53cd\u6b63\u9ad8\u8003\u548c\u5e73\u65f6\u8fd8\u662f\u5f88\u4e0d\u4e00\u6837\u7684\uff0c\u5efa\u8bae\u5e73\u65f6\u5927\u8003\u5f53\u9ad8\u8003\u8003\u3002</li> <li>\u7136\u540e\u5c31\u662f\u4e00\u6b21\u8003\u5dee\u6ca1\u5565\u5173\u7cfb\uff0c\u65f6\u95f4\u82b1\u5728\u8be5\u82b1\u7684\u5730\u65b9\u5c31\u597d\u4e86\uff0c\u8981\u5bf9\u81ea\u5df1\u7684\u5b66\u4e60\u6709\u638c\u63a7\u529b\u3002</li> <li>\u8001\u5e08\u6559\u7684\u4e0d\u597d\u8981\u5b66\u4f1a\u81ea\u5df1\u5b66</li> </ul>"},{"location":"tygx_exp/tech_fht/#_11","title":"\u8d44\u6599\u65b9\u9762:","text":"<ul> <li>\u6d59\u8003\u4ea4\u6d41\u89e3\u51b3\u6240\u6709\uff08</li> <li>\u8f85\u5bfc\u4e66\u90fd\u5dee\u4e0d\u591a\uff0c\u770b\u591a\u4e86\u6d6a\u8d39\u65f6\u95f4</li> </ul>"},{"location":"tygx_exp/tech_fht/#_12","title":"\u5176\u4ed6:","text":"<ul> <li>\u53ef\u4ee5\u548c\u540c\u5b66\u4e00\u8d77\u5b66\uff08\u4e0d\u662f\u4e00\u8d77\u6446\u70c2\u54e6\uff09</li> <li>\u771f\u5b66\u4e0d\u4f1a\u4e86\u8d76\u7d27\u6362\u79d1\u5427</li> <li>\u90fd\u5b66\u6280\u672f\u4e86\uff0c\u5b66\u5b66\u600e\u4e48\u641c\u96c6\u8d44\u6599\u5427</li> <li>\u6709\u7528\u7684\u4f5c\u4e1a\u5c31\u505a\uff0c\u6ca1\u7528\u7684\u5c31\u7b97\u4e86\uff08\u614e\u91cd\uff09</li> <li>\u63d0\u5347\u6210\u7ee9\u7684debuff\u8fd8\u662f\u4e0d\u5c11\u7684\uff0c\u522b\u6028\u5929\u5c24\u4eba\u7684\uff08\u6b22\u8fce\u52a0\u5b66\u957f\u5b66\u59d0\u6765\u54a8\u8be2</li> <li>\u9996\u8003\u8003\u5dee\u4e86\u600e\u4e48\u529e:<ul> <li>\u8fd8\u80fd\u600e\u4e48\u529e\uff0c\u7ee7\u7eed\u5b66\u5457\u3002</li> </ul> </li> <li>\u5b66\u4e0d\u61c2\u4e0a\u8bfe\u5c31\u597d\u597d\u542c\uff0c\u522b\u73a9\u6e38\u620f\uff08\u4e0d\u7136\u600e\u4e48\u5b66\uff09</li> </ul> <p>\u6700\u540e:\u5e0c\u671b\u5927\u5bb6\u90fd\u80fd\u8003\u597d :\uff09</p>"},{"location":"tygx_exp/%E4%B8%80%E4%BA%9B%E8%B5%84%E6%BA%90/","title":"\u4e00\u4e9b\u8d44\u6e90","text":"<p>\u4e00\u4e9b\u8d44\u6e90\u94fe\u63a5\uff0c\u53ef\u4ee5\u53c2\u8003\u7740\u770b:</p> <ul> <li>wjyyy \u9ad8\u4e09\u751f\u5b58\u6307\u5357</li> <li>IAI\u7ecf\u9a8c\u5206\u4eab</li> </ul> <p>\u6570\u5b66:</p> <ul> <li>\u9009\u62e9\u9898\u538b\u8f74</li> </ul>"}]}